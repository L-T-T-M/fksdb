!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js/",n(n.s=92)}([function(e,t,n){"use strict";e.exports=n(277)},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t);var i=n(0),o=n.n(i),a=n(16),u=n.n(a),l=o.a.createContext(null),s=function(e){function t(t){var n;n=e.call(this,t)||this;var r=t.store;return n.state={storeState:r.getState(),store:r},n}r(t,e);var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this.subscribe()},n.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this._isMounted=!1},n.componentDidUpdate=function(e){this.props.store!==e.store&&(this.unsubscribe&&this.unsubscribe(),this.subscribe())},n.subscribe=function(){var e=this,t=this.props.store;this.unsubscribe=t.subscribe(function(){var n=t.getState();e._isMounted&&e.setState(function(e){return e.storeState===n?null:{storeState:n}})});var n=t.getState();n!==this.state.storeState&&this.setState({storeState:n})},n.render=function(){var e=this.props.context||l;return o.a.createElement(e.Provider,{value:this.state},this.props.children)},t}(i.Component);s.propTypes={store:u.a.shape({subscribe:u.a.func.isRequired,dispatch:u.a.func.isRequired,getState:u.a.func.isRequired}),context:u.a.object,children:u.a.any};var c=s;function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var h=n(55),m=n.n(h),v=n(8),y=n.n(v);n(39);function g(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,s=n.methodName,c=void 0===s?"connectAdvanced":s,h=n.renderCountProp,v=void 0===h?void 0:h,g=n.shouldHandleStateChanges,b=void 0===g||g,_=n.storeKey,x=void 0===_?"store":_,w=n.withRef,E=void 0!==w&&w,S=n.forwardRef,T=void 0!==S&&S,k=n.context,O=void 0===k?l:k,C=p(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);y()(void 0===v,"renderCountProp is removed. render counting is built into the latest React dev tools profiling extension"),y()(!E,"withRef is removed. To access the wrapped instance, use a ref on the connected component");var M="To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React-Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";y()("store"===x,"storeKey has been removed and does not do anything. "+M);var A=O;return function(t){var n=t.displayName||t.name||"Component",a=u(n),l=d({},C,{getDisplayName:u,methodName:c,renderCountProp:v,shouldHandleStateChanges:b,storeKey:x,displayName:a,wrappedComponentName:n,WrappedComponent:t}),s=C.pure,p=i.Component,h=t;s&&(p=i.PureComponent);var g=function(t){function n(n){var r,i,a,u,c,p,m,v,g;return r=t.call(this,n)||this,y()(T?!n.wrapperProps[x]:!n[x],"Passing redux store in props has been removed and does not do anything. "+M),r.selectDerivedProps=function(t,n,r){if(s&&i===n&&a===t)return u;r!==c&&(c=r,p=e(r.dispatch,l)),i=n,a=t;var o=p(t,n);return u===o?u:u=o},r.selectChildElement=function(e,t){return e===m&&t===v||(m=e,v=t,g=o.a.createElement(h,d({},e,{ref:t}))),g},r.renderWrappedComponent=r.renderWrappedComponent.bind(f(f(r))),r}r(n,t);var i=n.prototype;return i.renderWrappedComponent=function(e){y()(e,'Could not find "store" in the context of "'+a+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+a+" in connect options.");var t,n=e.storeState,r=e.store,i=this.props;T&&(i=this.props.wrapperProps,t=this.props.forwardedRef);var o=this.selectDerivedProps(n,i,r);return this.selectChildElement(o,t)},i.render=function(){var e=this.props.context||A;return o.a.createElement(e.Consumer,null,this.renderWrappedComponent)},n}(p);if(g.WrappedComponent=t,g.displayName=a,T){var _=o.a.forwardRef(function(e,t){return o.a.createElement(g,{wrapperProps:e,forwardedRef:t})});return _.displayName=a,_.WrappedComponent=t,m()(_,t)}return m()(g,t)}}var b=Object.prototype.hasOwnProperty;function _(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function x(e,t){if(_(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!b.call(t,n[i])||!_(e[n[i]],t[n[i]]))return!1;return!0}var w=n(4);function E(e){return function(t,n){var r=e(t,n);function i(){return r}return i.dependsOnOwnProps=!1,i}}function S(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function T(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=S(e);var i=r(t,n);return"function"==typeof i&&(r.mapToProps=i,r.dependsOnOwnProps=S(i),i=r(t,n)),i},r}}var k=[function(e){return"function"==typeof e?T(e):void 0},function(e){return e?void 0:E(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?E(function(t){return Object(w.bindActionCreators)(e,t)}):void 0}];var O=[function(e){return"function"==typeof e?T(e):void 0},function(e){return e?void 0:E(function(){return{}})}];function C(e,t,n){return d({},n,e,t)}var M=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,i=n.pure,o=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?i&&o(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return C}}];function A(e,t,n,r){return function(i,o){return n(e(i,o),t(r,o),o)}}function N(e,t,n,r,i){var o,a,u,l,s,c=i.areStatesEqual,f=i.areOwnPropsEqual,d=i.areStatePropsEqual,p=!1;function h(i,p){var h,m,v=!f(p,a),y=!c(i,o);return o=i,a=p,v&&y?(u=e(o,a),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):v?(e.dependsOnOwnProps&&(u=e(o,a)),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):y?(h=e(o,a),m=!d(h,u),u=h,m&&(s=n(u,l,a)),s):s}return function(i,c){return p?h(i,c):(u=e(o=i,a=c),l=t(r,a),s=n(u,l,a),p=!0,s)}}function P(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,i=t.initMergeProps,o=p(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,o),u=r(e,o),l=i(e,o);return(o.pure?N:A)(a,u,l,e,o)}function R(e,t,n){for(var r=t.length-1;r>=0;r--){var i=t[r](e);if(i)return i}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function I(e,t){return e===t}var F,j,D,U,z,L,V,q,B,W,Y,H,$=(D=(j=void 0===F?{}:F).connectHOC,U=void 0===D?g:D,z=j.mapStateToPropsFactories,L=void 0===z?O:z,V=j.mapDispatchToPropsFactories,q=void 0===V?k:V,B=j.mergePropsFactories,W=void 0===B?M:B,Y=j.selectorFactory,H=void 0===Y?P:Y,function(e,t,n,r){void 0===r&&(r={});var i=r,o=i.pure,a=void 0===o||o,u=i.areStatesEqual,l=void 0===u?I:u,s=i.areOwnPropsEqual,c=void 0===s?x:s,f=i.areStatePropsEqual,h=void 0===f?x:f,m=i.areMergedPropsEqual,v=void 0===m?x:m,y=p(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),g=R(e,L,"mapStateToProps"),b=R(t,q,"mapDispatchToProps"),_=R(n,W,"mergeProps");return U(H,d({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:g,initMapDispatchToProps:b,initMergeProps:_,pure:a,areStatesEqual:l,areOwnPropsEqual:c,areStatePropsEqual:h,areMergedPropsEqual:v},y))});n.d(t,"Provider",function(){return c}),n.d(t,"connectAdvanced",function(){return g}),n.d(t,"ReactReduxContext",function(){return l}),n.d(t,"connect",function(){return $})},function(e,t,n){!function(e){"use strict";var t=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},n=function(e){var n;return 1===e.length&&(n=e,e=function(e,r){return t(n(e),r)}),{left:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;e(t[o],n)<0?r=o+1:i=o}return r},right:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;e(t[o],n)>0?i=o:r=o+1}return r}}},r=n(t),i=r.right,o=r.left;function a(e,t){return[e,t]}var u=function(e){return null===e?NaN:+e},l=function(e,t){var n,r,i=e.length,o=0,a=-1,l=0,s=0;if(null==t)for(;++a<i;)isNaN(n=u(e[a]))||(l+=(r=n-l)/++o,s+=r*(n-l));else for(;++a<i;)isNaN(n=u(t(e[a],a,e)))||(l+=(r=n-l)/++o,s+=r*(n-l));if(o>1)return s/(o-1)},s=function(e,t){var n=l(e,t);return n?Math.sqrt(n):n},c=function(e,t){var n,r,i,o=e.length,a=-1;if(null==t){for(;++a<o;)if(null!=(n=e[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=e[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=t(e[a],a,e))&&n>=n)for(r=i=n;++a<o;)null!=(n=t(e[a],a,e))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},f=Array.prototype,d=f.slice,p=f.map,h=function(e){return function(){return e}},m=function(e){return e},v=function(e,t,n){e=+e,t=+t,n=(i=arguments.length)<2?(t=e,e=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((t-e)/n)),o=new Array(i);++r<i;)o[r]=e+r*n;return o},y=Math.sqrt(50),g=Math.sqrt(10),b=Math.sqrt(2),_=function(e,t,n){var r,i,o,a=t<e,u=-1;if(a&&(r=e,e=t,t=r),0===(o=x(e,t,n))||!isFinite(o))return[];if(o>0)for(e=Math.ceil(e/o),t=Math.floor(t/o),i=new Array(r=Math.ceil(t-e+1));++u<r;)i[u]=(e+u)*o;else for(e=Math.floor(e*o),t=Math.ceil(t*o),i=new Array(r=Math.ceil(e-t+1));++u<r;)i[u]=(e-u)/o;return a&&i.reverse(),i};function x(e,t,n){var r=(t-e)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=y?10:o>=g?5:o>=b?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=y?10:o>=g?5:o>=b?2:1)}function w(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=y?i*=10:o>=g?i*=5:o>=b&&(i*=2),t<e?-i:i}var E=function(e){return Math.ceil(Math.log(e.length)/Math.LN2)+1},S=function(e,t,n){if(null==n&&(n=u),r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,i=(r-1)*t,o=Math.floor(i),a=+n(e[o],o,e),l=+n(e[o+1],o+1,e);return a+(l-a)*(i-o)}},T=function(e){for(var t,n,r,i=e.length,o=-1,a=0;++o<i;)a+=e[o].length;for(n=new Array(a);--i>=0;)for(r=e[i],t=r.length;--t>=0;)n[--a]=r[t];return n},k=function(e,t){var n,r,i=e.length,o=-1;if(null==t){for(;++o<i;)if(null!=(n=e[o])&&n>=n)for(r=n;++o<i;)null!=(n=e[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=t(e[o],o,e))&&n>=n)for(r=n;++o<i;)null!=(n=t(e[o],o,e))&&r>n&&(r=n);return r},O=function(e){if(!(i=e.length))return[];for(var t=-1,n=k(e,C),r=new Array(n);++t<n;)for(var i,o=-1,a=r[t]=new Array(i);++o<i;)a[o]=e[o][t];return r};function C(e){return e.length}var M=Array.prototype.slice,A=function(e){return e},N=1,P=2,R=3,I=4,F=1e-6;function j(e){return"translate("+(e+.5)+",0)"}function D(e){return"translate(0,"+(e+.5)+")"}function U(){return!this.__axis}function z(e,t){var n=[],r=null,i=null,o=6,a=6,u=3,l=e===N||e===I?-1:1,s=e===I||e===P?"x":"y",c=e===N||e===R?j:D;function f(f){var d=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,p=null==i?t.tickFormat?t.tickFormat.apply(t,n):A:i,h=Math.max(o,0)+u,m=t.range(),v=+m[0]+.5,y=+m[m.length-1]+.5,g=(t.bandwidth?function(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}:function(e){return function(t){return+e(t)}})(t.copy()),b=f.selection?f.selection():f,_=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(d,t).order(),w=x.exit(),E=x.enter().append("g").attr("class","tick"),S=x.select("line"),T=x.select("text");_=_.merge(_.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(E),S=S.merge(E.append("line").attr("stroke","#000").attr(s+"2",l*o)),T=T.merge(E.append("text").attr("fill","#000").attr(s,l*h).attr("dy",e===N?"0em":e===R?"0.71em":"0.32em")),f!==b&&(_=_.transition(f),x=x.transition(f),S=S.transition(f),T=T.transition(f),w=w.transition(f).attr("opacity",F).attr("transform",function(e){return isFinite(e=g(e))?c(e):this.getAttribute("transform")}),E.attr("opacity",F).attr("transform",function(e){var t=this.parentNode.__axis;return c(t&&isFinite(t=t(e))?t:g(e))})),w.remove(),_.attr("d",e===I||e==P?"M"+l*a+","+v+"H0.5V"+y+"H"+l*a:"M"+v+","+l*a+"V0.5H"+y+"V"+l*a),x.attr("opacity",1).attr("transform",function(e){return c(g(e))}),S.attr(s+"2",l*o),T.attr(s,l*h).text(p),b.filter(U).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===P?"start":e===I?"end":"middle"),b.each(function(){this.__axis=g})}return f.scale=function(e){return arguments.length?(t=e,f):t},f.ticks=function(){return n=M.call(arguments),f},f.tickArguments=function(e){return arguments.length?(n=null==e?[]:M.call(e),f):n.slice()},f.tickValues=function(e){return arguments.length?(r=null==e?null:M.call(e),f):r&&r.slice()},f.tickFormat=function(e){return arguments.length?(i=e,f):i},f.tickSize=function(e){return arguments.length?(o=a=+e,f):o},f.tickSizeInner=function(e){return arguments.length?(o=+e,f):o},f.tickSizeOuter=function(e){return arguments.length?(a=+e,f):a},f.tickPadding=function(e){return arguments.length?(u=+e,f):u},f}var L={value:function(){}};function V(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r)throw new Error("illegal type: "+e);r[e]=[]}return new q(r)}function q(e){this._=e}function B(e,t){for(var n,r=0,i=e.length;r<i;++r)if((n=e[r]).name===t)return n.value}function W(e,t,n){for(var r=0,i=e.length;r<i;++r)if(e[r].name===t){e[r]=L,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}q.prototype=V.prototype={constructor:q,on:function(e,t){var n,r,i=this._,o=(r=i,(e+"").trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!r.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}})),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++a<u;)if(n=(e=o[a]).type)i[n]=W(i[n],e.name,t);else if(null==t)for(n in i)i[n]=W(i[n],e.name,null);return this}for(;++a<u;)if((n=(e=o[a]).type)&&(n=B(i[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new q(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(r=this._[e],o=0,n=r.length;o<n;++o)r[o].value.apply(t,i)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],i=0,o=r.length;i<o;++i)r[i].value.apply(t,n)}};var Y="http://www.w3.org/1999/xhtml",H={svg:"http://www.w3.org/2000/svg",xhtml:Y,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},$=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),H.hasOwnProperty(t)?{space:H[t],local:e}:e},K=function(e){var t=$(e);return(t.local?function(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===Y&&t.documentElement.namespaceURI===Y?t.createElement(e):t.createElementNS(n,e)}})(t)},X=0;function G(){return new Q}function Q(){this._="@"+(++X).toString(36)}Q.prototype=G.prototype={constructor:Q,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}};var Z=function(e){return function(){return this.matches(e)}};if("undefined"!=typeof document){var J=document.documentElement;if(!J.matches){var ee=J.webkitMatchesSelector||J.msMatchesSelector||J.mozMatchesSelector||J.oMatchesSelector;Z=function(e){return function(){return ee.call(this,e)}}}}var te=Z,ne={};if(e.event=null,"undefined"!=typeof document){var re=document.documentElement;"onmouseenter"in re||(ne={mouseenter:"mouseover",mouseleave:"mouseout"})}function ie(e,t,n){return e=oe(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function oe(t,n,r){return function(i){var o=e.event;e.event=i;try{t.call(this,this.__data__,n,r)}finally{e.event=o}}}function ae(e){return function(){var t=this.__on;if(t){for(var n,r=0,i=-1,o=t.length;r<o;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?t.length=i:delete this.__on}}}function ue(e,t,n){var r=ne.hasOwnProperty(e.type)?ie:oe;return function(i,o,a){var u,l=this.__on,s=r(t,o,a);if(l)for(var c=0,f=l.length;c<f;++c)if((u=l[c]).type===e.type&&u.name===e.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=s,u.capture=n),void(u.value=t);this.addEventListener(e.type,s,n),u={type:e.type,name:e.name,value:t,listener:s,capture:n},l?l.push(u):this.__on=[u]}}function le(t,n,r,i){var o=e.event;t.sourceEvent=e.event,e.event=t;try{return n.apply(r,i)}finally{e.event=o}}var se=function(){for(var t,n=e.event;t=n.sourceEvent;)n=t;return n},ce=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]},fe=function(e){var t=se();return t.changedTouches&&(t=t.changedTouches[0]),ce(e,t)};function de(){}var pe=function(e){return null==e?de:function(){return this.querySelector(e)}};function he(){return[]}var me=function(e){return null==e?he:function(){return this.querySelectorAll(e)}},ve=function(e){return new Array(e.length)};function ye(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}ye.prototype={constructor:ye,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var ge="$";function be(e,t,n,r,i,o){for(var a,u=0,l=t.length,s=o.length;u<s;++u)(a=t[u])?(a.__data__=o[u],r[u]=a):n[u]=new ye(e,o[u]);for(;u<l;++u)(a=t[u])&&(i[u]=a)}function _e(e,t,n,r,i,o,a){var u,l,s,c={},f=t.length,d=o.length,p=new Array(f);for(u=0;u<f;++u)(l=t[u])&&(p[u]=s=ge+a.call(l,l.__data__,u,t),s in c?i[u]=l:c[s]=l);for(u=0;u<d;++u)s=ge+a.call(e,o[u],u,o),(l=c[s])?(r[u]=l,l.__data__=o[u],c[s]=null):n[u]=new ye(e,o[u]);for(u=0;u<f;++u)(l=t[u])&&c[p[u]]===l&&(i[u]=l)}function xe(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var we=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function Ee(e,t){return e.style.getPropertyValue(t)||we(e).getComputedStyle(e,null).getPropertyValue(t)}function Se(e){return e.trim().split(/^|\s+/)}function Te(e){return e.classList||new ke(e)}function ke(e){this._node=e,this._names=Se(e.getAttribute("class")||"")}function Oe(e,t){for(var n=Te(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function Ce(e,t){for(var n=Te(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function Me(){this.textContent=""}function Ae(){this.innerHTML=""}function Ne(){this.nextSibling&&this.parentNode.appendChild(this)}function Pe(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Re(){return null}function Ie(){var e=this.parentNode;e&&e.removeChild(this)}function Fe(e,t,n){var r=we(e),i=r.CustomEvent;"function"==typeof i?i=new i(t,n):(i=r.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}ke.prototype={add:function(e){var t=this._names.indexOf(e);t<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var je=[null];function De(e,t){this._groups=e,this._parents=t}function Ue(){return new De([[document.documentElement]],je)}De.prototype=Ue.prototype={constructor:De,select:function(e){"function"!=typeof e&&(e=pe(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a,u=t[i],l=u.length,s=r[i]=new Array(l),c=0;c<l;++c)(o=u[c])&&(a=e.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),s[c]=a);return new De(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=me(e));for(var t=this._groups,n=t.length,r=[],i=[],o=0;o<n;++o)for(var a,u=t[o],l=u.length,s=0;s<l;++s)(a=u[s])&&(r.push(e.call(a,a.__data__,s,u)),i.push(a));return new De(r,i)},filter:function(e){"function"!=typeof e&&(e=te(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],u=a.length,l=r[i]=[],s=0;s<u;++s)(o=a[s])&&e.call(o,o.__data__,s,a)&&l.push(o);return new De(r,this._parents)},data:function(e,t){if(!e)return h=new Array(this.size()),c=-1,this.each(function(e){h[++c]=e}),h;var n,r=t?_e:be,i=this._parents,o=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var a=o.length,u=new Array(a),l=new Array(a),s=new Array(a),c=0;c<a;++c){var f=i[c],d=o[c],p=d.length,h=e.call(f,f&&f.__data__,c,i),m=h.length,v=l[c]=new Array(m),y=u[c]=new Array(m),g=s[c]=new Array(p);r(f,d,v,y,g,h,t);for(var b,_,x=0,w=0;x<m;++x)if(b=v[x]){for(x>=w&&(w=x+1);!(_=y[w])&&++w<m;);b._next=_||null}}return(u=new De(u,i))._enter=l,u._exit=s,u},enter:function(){return new De(this._enter||this._groups.map(ve),this._parents)},exit:function(){return new De(this._exit||this._groups.map(ve),this._parents)},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var l,s=t[u],c=n[u],f=s.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=s[p]||c[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new De(a,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,i=e[t],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=xe);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,u=n[o],l=u.length,s=i[o]=new Array(l),c=0;c<l;++c)(a=u[c])&&(s[c]=a);s.sort(t)}return new De(i,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each(function(){e[++t]=this}),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var e=0;return this.each(function(){++e}),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var i,o=t[n],a=0,u=o.length;a<u;++a)(i=o[a])&&e.call(i,i.__data__,a,o);return this},attr:function(e,t){var n=$(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}}:"function"==typeof t?n.local?function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}:function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}:n.local?function(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}:function(e,t){return function(){this.setAttribute(e,t)}})(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?function(e){return function(){this.style.removeProperty(e)}}:"function"==typeof t?function(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}:function(e,t,n){return function(){this.style.setProperty(e,t,n)}})(e,t,null==n?"":n)):Ee(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?function(e){return function(){delete this[e]}}:"function"==typeof t?function(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}:function(e,t){return function(){this[e]=t}})(e,t)):this.node()[e]},classed:function(e,t){var n=Se(e+"");if(arguments.length<2){for(var r=Te(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof t?function(e,t){return function(){(t.apply(this,arguments)?Oe:Ce)(this,e)}}:t?function(e){return function(){Oe(this,e)}}:function(e){return function(){Ce(this,e)}})(n,t))},text:function(e){return arguments.length?this.each(null==e?Me:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}:function(e){return function(){this.textContent=e}})(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?Ae:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(e){return function(){this.innerHTML=e}})(e)):this.node().innerHTML},raise:function(){return this.each(Ne)},lower:function(){return this.each(Pe)},append:function(e){var t="function"==typeof e?e:K(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})},insert:function(e,t){var n="function"==typeof e?e:K(e),r=null==t?Re:"function"==typeof t?t:pe(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Ie)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,i,o=function(e){return e.trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}})}(e+""),a=o.length;if(!(arguments.length<2)){for(u=t?ue:ae,null==n&&(n=!1),r=0;r<a;++r)this.each(u(o[r],t,n));return this}var u=this.node().__on;if(u)for(var l,s=0,c=u.length;s<c;++s)for(r=0,l=u[s];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?function(e,t){return function(){return Fe(this,e,t.apply(this,arguments))}}:function(e,t){return function(){return Fe(this,e,t)}})(e,t))}};var ze=function(e){return"string"==typeof e?new De([[document.querySelector(e)]],[document.documentElement]):new De([[e]],je)},Le=function(e,t,n){arguments.length<3&&(n=t,t=se().changedTouches);for(var r,i=0,o=t?t.length:0;i<o;++i)if((r=t[i]).identifier===n)return ce(e,r);return null};function Ve(){e.event.stopImmediatePropagation()}var qe=function(){e.event.preventDefault(),e.event.stopImmediatePropagation()},Be=function(e){var t=e.document.documentElement,n=ze(e).on("dragstart.drag",qe,!0);"onselectstart"in t?n.on("selectstart.drag",qe,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")};function We(e,t){var n=e.document.documentElement,r=ze(e).on("dragstart.drag",null);t&&(r.on("click.drag",qe,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var Ye=function(e){return function(){return e}};function He(e,t,n,r,i,o,a,u,l,s){this.target=e,this.type=t,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=u,this.dy=l,this._=s}function $e(){return!e.event.button}function Ke(){return this.parentNode}function Xe(t){return null==t?{x:e.event.x,y:e.event.y}:t}function Ge(){return"ontouchstart"in this}He.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e};var Qe=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function Ze(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Je(){}var et=1/.7,tt="\\s*([+-]?\\d+)\\s*",nt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",rt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",it=/^#([0-9a-f]{3})$/,ot=/^#([0-9a-f]{6})$/,at=new RegExp("^rgb\\("+[tt,tt,tt]+"\\)$"),ut=new RegExp("^rgb\\("+[rt,rt,rt]+"\\)$"),lt=new RegExp("^rgba\\("+[tt,tt,tt,nt]+"\\)$"),st=new RegExp("^rgba\\("+[rt,rt,rt,nt]+"\\)$"),ct=new RegExp("^hsl\\("+[nt,rt,rt]+"\\)$"),ft=new RegExp("^hsla\\("+[nt,rt,rt,nt]+"\\)$"),dt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function pt(e){var t;return e=(e+"").trim().toLowerCase(),(t=it.exec(e))?new gt((t=parseInt(t[1],16))>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):(t=ot.exec(e))?ht(parseInt(t[1],16)):(t=at.exec(e))?new gt(t[1],t[2],t[3],1):(t=ut.exec(e))?new gt(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=lt.exec(e))?mt(t[1],t[2],t[3],t[4]):(t=st.exec(e))?mt(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=ct.exec(e))?bt(t[1],t[2]/100,t[3]/100,1):(t=ft.exec(e))?bt(t[1],t[2]/100,t[3]/100,t[4]):dt.hasOwnProperty(e)?ht(dt[e]):"transparent"===e?new gt(NaN,NaN,NaN,0):null}function ht(e){return new gt(e>>16&255,e>>8&255,255&e,1)}function mt(e,t,n,r){return r<=0&&(e=t=n=NaN),new gt(e,t,n,r)}function vt(e){return e instanceof Je||(e=pt(e)),e?new gt((e=e.rgb()).r,e.g,e.b,e.opacity):new gt}function yt(e,t,n,r){return 1===arguments.length?vt(e):new gt(e,t,n,null==r?1:r)}function gt(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function bt(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new xt(e,t,n,r)}function _t(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof xt)return new xt(e.h,e.s,e.l,e.opacity);if(e instanceof Je||(e=pt(e)),!e)return new xt;if(e instanceof xt)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),o=Math.max(t,n,r),a=NaN,u=o-i,l=(o+i)/2;return u?(a=t===o?(n-r)/u+6*(n<r):n===o?(r-t)/u+2:(t-n)/u+4,u/=l<.5?o+i:2-o-i,a*=60):u=l>0&&l<1?0:a,new xt(a,u,l,e.opacity)}(e):new xt(e,t,n,null==r?1:r)}function xt(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function wt(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}Qe(Je,pt,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Qe(gt,yt,Ze(Je,{brighter:function(e){return e=null==e?et:Math.pow(et,e),new gt(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new gt(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}})),Qe(xt,_t,Ze(Je,{brighter:function(e){return e=null==e?et:Math.pow(et,e),new xt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new xt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,i=2*n-r;return new gt(wt(e>=240?e-240:e+120,i,r),wt(e,i,r),wt(e<120?e+240:e-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Et=Math.PI/180,St=180/Math.PI,Tt=.95047,kt=1,Ot=1.08883,Ct=4/29,Mt=6/29,At=3*Mt*Mt,Nt=Mt*Mt*Mt;function Pt(e){if(e instanceof It)return new It(e.l,e.a,e.b,e.opacity);if(e instanceof Lt){var t=e.h*Et;return new It(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}e instanceof gt||(e=vt(e));var n=Ut(e.r),r=Ut(e.g),i=Ut(e.b),o=Ft((.4124564*n+.3575761*r+.1804375*i)/Tt),a=Ft((.2126729*n+.7151522*r+.072175*i)/kt),u=Ft((.0193339*n+.119192*r+.9503041*i)/Ot);return new It(116*a-16,500*(o-a),200*(a-u),e.opacity)}function Rt(e,t,n,r){return 1===arguments.length?Pt(e):new It(e,t,n,null==r?1:r)}function It(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function Ft(e){return e>Nt?Math.pow(e,1/3):e/At+Ct}function jt(e){return e>Mt?e*e*e:At*(e-Ct)}function Dt(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function Ut(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function zt(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Lt)return new Lt(e.h,e.c,e.l,e.opacity);e instanceof It||(e=Pt(e));var t=Math.atan2(e.b,e.a)*St;return new Lt(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}(e):new Lt(e,t,n,null==r?1:r)}function Lt(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}Qe(It,Rt,Ze(Je,{brighter:function(e){return new It(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new It(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return e=kt*jt(e),t=Tt*jt(t),n=Ot*jt(n),new gt(Dt(3.2404542*t-1.5371385*e-.4985314*n),Dt(-.969266*t+1.8760108*e+.041556*n),Dt(.0556434*t-.2040259*e+1.0572252*n),this.opacity)}})),Qe(Lt,zt,Ze(Je,{brighter:function(e){return new Lt(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new Lt(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return Pt(this).rgb()}}));var Vt=-.14861,qt=1.78277,Bt=-.29227,Wt=-.90649,Yt=1.97294,Ht=Yt*Wt,$t=Yt*qt,Kt=qt*Bt-Wt*Vt;function Xt(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Gt)return new Gt(e.h,e.s,e.l,e.opacity);e instanceof gt||(e=vt(e));var t=e.r/255,n=e.g/255,r=e.b/255,i=(Kt*r+Ht*t-$t*n)/(Kt+Ht-$t),o=r-i,a=(Yt*(n-i)-Bt*o)/Wt,u=Math.sqrt(a*a+o*o)/(Yt*i*(1-i)),l=u?Math.atan2(a,o)*St-120:NaN;return new Gt(l<0?l+360:l,u,i,e.opacity)}(e):new Gt(e,t,n,null==r?1:r)}function Gt(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Qt(e,t,n,r,i){var o=e*e,a=o*e;return((1-3*e+3*o-a)*t+(4-6*o+3*a)*n+(1+3*e+3*o-3*a)*r+a*i)/6}Qe(Gt,Xt,Ze(Je,{brighter:function(e){return e=null==e?et:Math.pow(et,e),new Gt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Gt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*Et,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),i=Math.sin(e);return new gt(255*(t+n*(Vt*r+qt*i)),255*(t+n*(Bt*r+Wt*i)),255*(t+n*(Yt*r)),this.opacity)}}));var Zt=function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[r],o=e[r+1],a=r>0?e[r-1]:2*i-o,u=r<t-1?e[r+2]:2*o-i;return Qt((n-r/t)*t,a,i,o,u)}},Jt=function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),i=e[(r+t-1)%t],o=e[r%t],a=e[(r+1)%t],u=e[(r+2)%t];return Qt((n-r/t)*t,i,o,a,u)}},en=function(e){return function(){return e}};function tn(e,t){return function(n){return e+n*t}}function nn(e,t){var n=t-e;return n?tn(e,n>180||n<-180?n-360*Math.round(n/360):n):en(isNaN(e)?t:e)}function rn(e){return 1==(e=+e)?on:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):en(isNaN(t)?n:t)}}function on(e,t){var n=t-e;return n?tn(e,n):en(isNaN(e)?t:e)}var an=function e(t){var n=rn(t);function r(e,t){var r=n((e=yt(e)).r,(t=yt(t)).r),i=n(e.g,t.g),o=n(e.b,t.b),a=on(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=i(t),e.b=o(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function un(e){return function(t){var n,r,i=t.length,o=new Array(i),a=new Array(i),u=new Array(i);for(n=0;n<i;++n)r=yt(t[n]),o[n]=r.r||0,a[n]=r.g||0,u[n]=r.b||0;return o=e(o),a=e(a),u=e(u),r.opacity=1,function(e){return r.r=o(e),r.g=a(e),r.b=u(e),r+""}}}var ln,sn,cn,fn,dn=un(Zt),pn=un(Jt),hn=function(e,t){var n,r=t?t.length:0,i=e?Math.min(r,e.length):0,o=new Array(r),a=new Array(r);for(n=0;n<i;++n)o[n]=xn(e[n],t[n]);for(;n<r;++n)a[n]=t[n];return function(e){for(n=0;n<i;++n)a[n]=o[n](e);return a}},mn=function(e,t){var n=new Date;return t-=e=+e,function(r){return n.setTime(e+t*r),n}},vn=function(e,t){return t-=e=+e,function(n){return e+t*n}},yn=function(e,t){var n,r={},i={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=xn(e[n],t[n]):i[n]=t[n];return function(e){for(n in r)i[n]=r[n](e);return i}},gn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,bn=new RegExp(gn.source,"g"),_n=function(e,t){var n,r,i,o=gn.lastIndex=bn.lastIndex=0,a=-1,u=[],l=[];for(e+="",t+="";(n=gn.exec(e))&&(r=bn.exec(t));)(i=r.index)>o&&(i=t.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:vn(n,r)})),o=bn.lastIndex;return o<t.length&&(i=t.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?l[0]?function(e){return function(t){return e(t)+""}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)u[(n=l[r]).i]=n.x(e);return u.join("")})},xn=function(e,t){var n,r=typeof t;return null==t||"boolean"===r?en(t):("number"===r?vn:"string"===r?(n=pt(t))?(t=n,an):_n:t instanceof pt?an:t instanceof Date?mn:Array.isArray(t)?hn:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?yn:vn)(e,t)},wn=function(e,t){return t-=e=+e,function(n){return Math.round(e+t*n)}},En=180/Math.PI,Sn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Tn=function(e,t,n,r,i,o){var a,u,l;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(l=e*n+t*r)&&(n-=e*l,r-=t*l),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,l/=u),e*r<t*n&&(e=-e,t=-t,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(t,e)*En,skewX:Math.atan(l)*En,scaleX:a,scaleY:u}};function kn(e,t,n,r){function i(e){return e.length?e.pop()+" ":""}return function(o,a){var u=[],l=[];return o=e(o),a=e(a),function(e,r,i,o,a,u){if(e!==i||r!==o){var l=a.push("translate(",null,t,null,n);u.push({i:l-4,x:vn(e,i)},{i:l-2,x:vn(r,o)})}else(i||o)&&a.push("translate("+i+t+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,u,l),function(e,t,n,o){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:vn(e,t)})):t&&n.push(i(n)+"rotate("+t+r)}(o.rotate,a.rotate,u,l),function(e,t,n,o){e!==t?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:vn(e,t)}):t&&n.push(i(n)+"skewX("+t+r)}(o.skewX,a.skewX,u,l),function(e,t,n,r,o,a){if(e!==n||t!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:vn(e,n)},{i:u-2,x:vn(t,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,l),o=a=null,function(e){for(var t,n=-1,r=l.length;++n<r;)u[(t=l[n]).i]=t.x(e);return u.join("")}}}var On=kn(function(e){return"none"===e?Sn:(ln||(ln=document.createElement("DIV"),sn=document.documentElement,cn=document.defaultView),ln.style.transform=e,e=cn.getComputedStyle(sn.appendChild(ln),null).getPropertyValue("transform"),sn.removeChild(ln),e=e.slice(7,-1).split(","),Tn(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))},"px, ","px)","deg)"),Cn=kn(function(e){return null==e?Sn:(fn||(fn=document.createElementNS("http://www.w3.org/2000/svg","g")),fn.setAttribute("transform",e),(e=fn.transform.baseVal.consolidate())?(e=e.matrix,Tn(e.a,e.b,e.c,e.d,e.e,e.f)):Sn)},", ",")",")"),Mn=Math.SQRT2;function An(e){return((e=Math.exp(e))+1/e)/2}var Nn=function(e,t){var n,r,i=e[0],o=e[1],a=e[2],u=t[0],l=t[1],s=t[2],c=u-i,f=l-o,d=c*c+f*f;if(d<1e-12)r=Math.log(s/a)/Mn,n=function(e){return[i+e*c,o+e*f,a*Math.exp(Mn*e*r)]};else{var p=Math.sqrt(d),h=(s*s-a*a+4*d)/(2*a*2*p),m=(s*s-a*a-4*d)/(2*s*2*p),v=Math.log(Math.sqrt(h*h+1)-h),y=Math.log(Math.sqrt(m*m+1)-m);r=(y-v)/Mn,n=function(e){var t,n=e*r,u=An(v),l=a/(2*p)*(u*(t=Mn*n+v,((t=Math.exp(2*t))-1)/(t+1))-function(e){return((e=Math.exp(e))-1/e)/2}(v));return[i+l*c,o+l*f,a*u/An(Mn*n+v)]}}return n.duration=1e3*r,n};function Pn(e){return function(t,n){var r=e((t=_t(t)).h,(n=_t(n)).h),i=on(t.s,n.s),o=on(t.l,n.l),a=on(t.opacity,n.opacity);return function(e){return t.h=r(e),t.s=i(e),t.l=o(e),t.opacity=a(e),t+""}}}var Rn=Pn(nn),In=Pn(on);function Fn(e){return function(t,n){var r=e((t=zt(t)).h,(n=zt(n)).h),i=on(t.c,n.c),o=on(t.l,n.l),a=on(t.opacity,n.opacity);return function(e){return t.h=r(e),t.c=i(e),t.l=o(e),t.opacity=a(e),t+""}}}var jn=Fn(nn),Dn=Fn(on);function Un(e){return function t(n){function r(t,r){var i=e((t=Xt(t)).h,(r=Xt(r)).h),o=on(t.s,r.s),a=on(t.l,r.l),u=on(t.opacity,r.opacity);return function(e){return t.h=i(e),t.s=o(e),t.l=a(Math.pow(e,n)),t.opacity=u(e),t+""}}return n=+n,r.gamma=t,r}(1)}var zn,Ln,Vn=Un(nn),qn=Un(on),Bn=0,Wn=0,Yn=0,Hn=1e3,$n=0,Kn=0,Xn=0,Gn="object"==typeof performance&&performance.now?performance:Date,Qn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function Zn(){return Kn||(Qn(Jn),Kn=Gn.now()+Xn)}function Jn(){Kn=0}function er(){this._call=this._time=this._next=null}function tr(e,t,n){var r=new er;return r.restart(e,t,n),r}function nr(){Zn(),++Bn;for(var e,t=zn;t;)(e=Kn-t._time)>=0&&t._call.call(null,e),t=t._next;--Bn}function rr(){Kn=($n=Gn.now())+Xn,Bn=Wn=0;try{nr()}finally{Bn=0,function(){for(var e,t,n=zn,r=1/0;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:zn=t);Ln=e,or(r)}(),Kn=0}}function ir(){var e=Gn.now(),t=e-$n;t>Hn&&(Xn-=t,$n=e)}function or(e){if(!Bn){Wn&&(Wn=clearTimeout(Wn));var t=e-Kn;t>24?(e<1/0&&(Wn=setTimeout(rr,t)),Yn&&(Yn=clearInterval(Yn))):(Yn||($n=Kn,Yn=setInterval(ir,Hn)),Bn=1,Qn(rr))}}er.prototype=tr.prototype={constructor:er,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?Zn():+n)+(null==t?0:+t),this._next||Ln===this||(Ln?Ln._next=this:zn=this,Ln=this),this._call=e,this._time=n,or()},stop:function(){this._call&&(this._call=null,this._time=1/0,or())}};var ar=function(e,t,n){var r=new er;return t=null==t?0:+t,r.restart(function(n){r.stop(),e(n+t)},t,n),r},ur=V("start","end","interrupt"),lr=[],sr=0,cr=1,fr=2,dr=3,pr=4,hr=5,mr=6,vr=function(e,t,n,r,i,o){var a=e.__transition;if(a){if(n in a)return}else e.__transition={};!function(e,t,n){var r,i=e.__transition;function o(l){var s,c,f,d;if(n.state!==cr)return u();for(s in i)if((d=i[s]).name===n.name){if(d.state===dr)return ar(o);d.state===pr?(d.state=mr,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete i[s]):+s<t&&(d.state=mr,d.timer.stop(),delete i[s])}if(ar(function(){n.state===dr&&(n.state=pr,n.timer.restart(a,n.delay,n.time),a(l))}),n.state=fr,n.on.call("start",e,e.__data__,n.index,n.group),n.state===fr){for(n.state=dr,r=new Array(f=n.tween.length),s=0,c=-1;s<f;++s)(d=n.tween[s].value.call(e,e.__data__,n.index,n.group))&&(r[++c]=d);r.length=c+1}}function a(t){for(var i=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(u),n.state=hr,1),o=-1,a=r.length;++o<a;)r[o].call(null,i);n.state===hr&&(n.on.call("end",e,e.__data__,n.index,n.group),u())}function u(){for(var r in n.state=mr,n.timer.stop(),delete i[t],i)return;delete e.__transition}i[t]=n,n.timer=tr(function(e){n.state=cr,n.timer.restart(o,n.delay,n.time),n.delay<=e&&o(e-n.delay)},0,n.time)}(e,n,{name:t,index:r,group:i,on:ur,tween:lr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:sr})};function yr(e,t){var n=e.__transition;if(!n||!(n=n[t])||n.state>sr)throw new Error("too late");return n}function gr(e,t){var n=e.__transition;if(!n||!(n=n[t])||n.state>fr)throw new Error("too late");return n}function br(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("too late");return n}var _r=function(e,t){var n,r,i,o=e.__transition,a=!0;if(o){for(i in t=null==t?null:t+"",o)(n=o[i]).name===t?(r=n.state>fr&&n.state<hr,n.state=mr,n.timer.stop(),r&&n.on.call("interrupt",e,e.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete e.__transition}};function xr(e,t,n){var r=e._id;return e.each(function(){var e=gr(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)}),function(e){return br(e,r).value[t]}}var wr=function(e,t){var n;return("number"==typeof t?vn:t instanceof pt?an:(n=pt(t))?(t=n,an):_n)(e,t)},Er=Ue.prototype.constructor,Sr=0;function Tr(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function kr(e){return Ue().transition(e)}function Or(){return++Sr}var Cr=Ue.prototype;function Mr(e){return((e*=2)<=1?e*e:--e*(2-e)+1)/2}function Ar(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}Tr.prototype=kr.prototype={constructor:Tr,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=pe(e));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,l,s=r[a],c=s.length,f=o[a]=new Array(c),d=0;d<c;++d)(u=s[d])&&(l=e.call(u,u.__data__,d,s))&&("__data__"in u&&(l.__data__=u.__data__),f[d]=l,vr(f[d],t,n,d,f,br(u,n)));return new Tr(o,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=me(e));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var l,s=r[u],c=s.length,f=0;f<c;++f)if(l=s[f]){for(var d,p=e.call(l,l.__data__,f,s),h=br(l,n),m=0,v=p.length;m<v;++m)(d=p[m])&&vr(d,t,n,m,p,h);o.push(p),a.push(l)}return new Tr(o,a,t,n)},filter:function(e){"function"!=typeof e&&(e=te(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],u=a.length,l=r[i]=[],s=0;s<u;++s)(o=a[s])&&e.call(o,o.__data__,s,a)&&l.push(o);return new Tr(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var l,s=t[u],c=n[u],f=s.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=s[p]||c[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new Tr(a,this._parents,this._name,this._id)},selection:function(){return new Er(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Or(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],l=u.length,s=0;s<l;++s)if(a=u[s]){var c=br(a,t);vr(a,e,n,s,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Tr(r,this._parents,e,n)},call:Cr.call,nodes:Cr.nodes,node:Cr.node,size:Cr.size,empty:Cr.empty,each:Cr.each,on:function(e,t){var n=this._id;return arguments.length<2?br(this.node(),n).on.on(e):this.each(function(e,t,n){var r,i,o=function(e){return(e+"").trim().split(/^|\s+/).every(function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e})}(t)?yr:gr;return function(){var a=o(this,e),u=a.on;u!==r&&(i=(r=u).copy()).on(t,n),a.on=i}}(n,e,t))},attr:function(e,t){var n=$(e),r="transform"===n?Cn:wr;return this.attrTween(e,"function"==typeof t?(n.local?function(e,t,n){var r,i,o;return function(){var a,u=n(this);if(null!=u)return(a=this.getAttributeNS(e.space,e.local))===u?null:a===r&&u===i?o:o=t(r=a,i=u);this.removeAttributeNS(e.space,e.local)}}:function(e,t,n){var r,i,o;return function(){var a,u=n(this);if(null!=u)return(a=this.getAttribute(e))===u?null:a===r&&u===i?o:o=t(r=a,i=u);this.removeAttribute(e)}})(n,r,xr(this,"attr."+e,t)):null==t?(n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}})(n):(n.local?function(e,t,n){var r,i;return function(){var o=this.getAttributeNS(e.space,e.local);return o===n?null:o===r?i:i=t(r=o,n)}}:function(e,t,n){var r,i;return function(){var o=this.getAttribute(e);return o===n?null:o===r?i:i=t(r=o,n)}})(n,r,t+""))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=$(e);return this.tween(n,(r.local?function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttributeNS(e.space,e.local,r(t))}}return n._value=t,n}:function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttribute(e,r(t))}}return n._value=t,n})(r,t))},style:function(e,t,n){var r="transform"==(e+="")?On:wr;return null==t?this.styleTween(e,function(e,t){var n,r,i;return function(){var o=Ee(this,e),a=(this.style.removeProperty(e),Ee(this,e));return o===a?null:o===n&&a===r?i:i=t(n=o,r=a)}}(e,r)).on("end.style."+e,function(e){return function(){this.style.removeProperty(e)}}(e)):this.styleTween(e,"function"==typeof t?function(e,t,n){var r,i,o;return function(){var a=Ee(this,e),u=n(this);return null==u&&(this.style.removeProperty(e),u=Ee(this,e)),a===u?null:a===r&&u===i?o:o=t(r=a,i=u)}}(e,r,xr(this,"style."+e,t)):function(e,t,n){var r,i;return function(){var o=Ee(this,e);return o===n?null:o===r?i:i=t(r=o,n)}}(e,r,t+""),n)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,function(e,t,n){function r(){var r=this,i=t.apply(r,arguments);return i&&function(t){r.style.setProperty(e,i(t),n)}}return r._value=t,r}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(xr(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,i=br(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===e)return r.value;return null}return this.each((null==t?function(e,t){var n,r;return function(){var i=gr(this,e),o=i.tween;if(o!==n)for(var a=0,u=(r=n=o).length;a<u;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(e,t,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=gr(this,e),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:t,value:n},l=0,s=i.length;l<s;++l)if(i[l].name===t){i[l]=u;break}l===s&&i.push(u)}o.tween=i}})(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){yr(this,e).delay=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){yr(this,e).delay=t}})(t,e)):br(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){gr(this,e).duration=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){gr(this,e).duration=t}})(t,e)):br(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){gr(this,e).ease=t}}(t,e)):br(this.node(),t).ease}};var Nr=function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n}(3),Pr=function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),Rr=function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3),Ir=Math.PI,Fr=Ir/2;function jr(e){return(1-Math.cos(Ir*e))/2}function Dr(e){return((e*=2)<=1?Math.pow(2,10*e-10):2-Math.pow(2,10-10*e))/2}function Ur(e){return((e*=2)<=1?1-Math.sqrt(1-e*e):Math.sqrt(1-(e-=2)*e)+1)/2}var zr=4/11,Lr=6/11,Vr=8/11,qr=.75,Br=9/11,Wr=10/11,Yr=.9375,Hr=21/22,$r=63/64,Kr=1/zr/zr;function Xr(e){return(e=+e)<zr?Kr*e*e:e<Vr?Kr*(e-=Lr)*e+qr:e<Wr?Kr*(e-=Br)*e+Yr:Kr*(e-=Hr)*e+$r}var Gr=function e(t){function n(e){return e*e*((t+1)*e-t)}return t=+t,n.overshoot=e,n}(1.70158),Qr=function e(t){function n(e){return--e*e*((t+1)*e+t)+1}return t=+t,n.overshoot=e,n}(1.70158),Zr=function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(1.70158),Jr=2*Math.PI,ei=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Jr);function i(e){return t*Math.pow(2,10*--e)*Math.sin((r-e)/n)}return i.amplitude=function(t){return e(t,n*Jr)},i.period=function(n){return e(t,n)},i}(1,.3),ti=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Jr);function i(e){return 1-t*Math.pow(2,-10*(e=+e))*Math.sin((e+r)/n)}return i.amplitude=function(t){return e(t,n*Jr)},i.period=function(n){return e(t,n)},i}(1,.3),ni=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Jr);function i(e){return((e=2*e-1)<0?t*Math.pow(2,10*e)*Math.sin((r-e)/n):2-t*Math.pow(2,-10*e)*Math.sin((r+e)/n))/2}return i.amplitude=function(t){return e(t,n*Jr)},i.period=function(n){return e(t,n)},i}(1,.3),ri={time:null,delay:0,duration:250,ease:Ar};function ii(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return ri.time=Zn(),ri;return n}Ue.prototype.interrupt=function(e){return this.each(function(){_r(this,e)})},Ue.prototype.transition=function(e){var t,n;e instanceof Tr?(t=e._id,e=e._name):(t=Or(),(n=ri).time=Zn(),e=null==e?null:e+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],l=u.length,s=0;s<l;++s)(a=u[s])&&vr(a,e,t,s,u,n||ii(a,t));return new Tr(r,this._parents,e,t)};var oi=[null],ai=function(e){return function(){return e}},ui=function(e,t,n){this.target=e,this.type=t,this.selection=n};function li(){e.event.stopImmediatePropagation()}var si=function(){e.event.preventDefault(),e.event.stopImmediatePropagation()},ci={name:"drag"},fi={name:"space"},di={name:"handle"},pi={name:"center"},hi={name:"x",handles:["e","w"].map(wi),input:function(e,t){return e&&[[e[0],t[0][1]],[e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},mi={name:"y",handles:["n","s"].map(wi),input:function(e,t){return e&&[[t[0][0],e[0]],[t[1][0],e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},vi={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(wi),input:function(e){return e},output:function(e){return e}},yi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},gi={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},bi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},_i={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},xi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function wi(e){return{type:e}}function Ei(){return!e.event.button}function Si(){var e=this.ownerSVGElement||this;return[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function Ti(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function ki(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function Oi(t){var n,r=Si,i=Ei,o=V(u,"start","brush","end"),a=6;function u(e){var n=e.property("__brush",d).selectAll(".overlay").data([wi("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",yi.overlay).merge(n).each(function(){var e=Ti(this).extent;ze(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])}),e.selectAll(".selection").data([wi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",yi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,function(e){return e.type});r.exit().remove(),r.enter().append("rect").attr("class",function(e){return"handle handle--"+e.type}).attr("cursor",function(e){return yi[e.type]}),e.each(l).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",f)}function l(){var e=ze(this),t=Ti(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",function(e){return"e"===e.type[e.type.length-1]?t[1][0]-a/2:t[0][0]-a/2}).attr("y",function(e){return"s"===e.type[0]?t[1][1]-a/2:t[0][1]-a/2}).attr("width",function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+a:a}).attr("height",function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+a:a})):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(e,t){return e.__brush.emitter||new c(e,t)}function c(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function f(){if(e.event.touches){if(e.event.changedTouches.length<e.event.touches.length)return si()}else if(n)return;if(i.apply(this,arguments)){var r,o,a,u,c,f,d,p,h,m,v,y,g,b=this,_=e.event.target.__data__.type,x="selection"===(e.event.metaKey?_="overlay":_)?ci:e.event.altKey?pi:di,w=t===mi?null:_i[_],E=t===hi?null:xi[_],S=Ti(b),T=S.extent,k=S.selection,O=T[0][0],C=T[0][1],M=T[1][0],A=T[1][1],N=w&&E&&e.event.shiftKey,P=fe(b),R=P,I=s(b,arguments).beforestart();"overlay"===_?S.selection=k=[[r=t===mi?O:P[0],a=t===hi?C:P[1]],[c=t===mi?M:r,d=t===hi?A:a]]:(r=k[0][0],a=k[0][1],c=k[1][0],d=k[1][1]),o=r,u=a,f=c,p=d;var F=ze(b).attr("pointer-events","none"),j=F.selectAll(".overlay").attr("cursor",yi[_]);if(e.event.touches)F.on("touchmove.brush",U,!0).on("touchend.brush touchcancel.brush",L,!0);else{var D=ze(e.event.view).on("keydown.brush",function(){switch(e.event.keyCode){case 16:N=w&&E;break;case 18:x===di&&(w&&(c=f-h*w,r=o+h*w),E&&(d=p-m*E,a=u+m*E),x=pi,z());break;case 32:x!==di&&x!==pi||(w<0?c=f-h:w>0&&(r=o-h),E<0?d=p-m:E>0&&(a=u-m),x=fi,j.attr("cursor",yi.selection),z());break;default:return}si()},!0).on("keyup.brush",function(){switch(e.event.keyCode){case 16:N&&(y=g=N=!1,z());break;case 18:x===pi&&(w<0?c=f:w>0&&(r=o),E<0?d=p:E>0&&(a=u),x=di,z());break;case 32:x===fi&&(e.event.altKey?(w&&(c=f-h*w,r=o+h*w),E&&(d=p-m*E,a=u+m*E),x=pi):(w<0?c=f:w>0&&(r=o),E<0?d=p:E>0&&(a=u),x=di),j.attr("cursor",yi[_]),z());break;default:return}si()},!0).on("mousemove.brush",U,!0).on("mouseup.brush",L,!0);Be(e.event.view)}li(),_r(b),l.call(b),I.start()}function U(){var e=fe(b);!N||y||g||(Math.abs(e[0]-R[0])>Math.abs(e[1]-R[1])?g=!0:y=!0),R=e,v=!0,si(),z()}function z(){var e;switch(h=R[0]-P[0],m=R[1]-P[1],x){case fi:case ci:w&&(h=Math.max(O-r,Math.min(M-c,h)),o=r+h,f=c+h),E&&(m=Math.max(C-a,Math.min(A-d,m)),u=a+m,p=d+m);break;case di:w<0?(h=Math.max(O-r,Math.min(M-r,h)),o=r+h,f=c):w>0&&(h=Math.max(O-c,Math.min(M-c,h)),o=r,f=c+h),E<0?(m=Math.max(C-a,Math.min(A-a,m)),u=a+m,p=d):E>0&&(m=Math.max(C-d,Math.min(A-d,m)),u=a,p=d+m);break;case pi:w&&(o=Math.max(O,Math.min(M,r-h*w)),f=Math.max(O,Math.min(M,c+h*w))),E&&(u=Math.max(C,Math.min(A,a-m*E)),p=Math.max(C,Math.min(A,d+m*E)))}f<o&&(w*=-1,e=r,r=c,c=e,e=o,o=f,f=e,_ in gi&&j.attr("cursor",yi[_=gi[_]])),p<u&&(E*=-1,e=a,a=d,d=e,e=u,u=p,p=e,_ in bi&&j.attr("cursor",yi[_=bi[_]])),S.selection&&(k=S.selection),y&&(o=k[0][0],f=k[1][0]),g&&(u=k[0][1],p=k[1][1]),k[0][0]===o&&k[0][1]===u&&k[1][0]===f&&k[1][1]===p||(S.selection=[[o,u],[f,p]],l.call(b),I.brush())}function L(){if(li(),e.event.touches){if(e.event.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),F.on("touchmove.brush touchend.brush touchcancel.brush",null)}else We(e.event.view,v),D.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);F.attr("pointer-events","all"),j.attr("cursor",yi.overlay),S.selection&&(k=S.selection),ki(k)&&(S.selection=null,l.call(b)),I.end()}}function d(){var e=this.__brush||{selection:null};return e.extent=r.apply(this,arguments),e.dim=t,e}return u.move=function(e,n){e.selection?e.on("start.brush",function(){s(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){s(this,arguments).end()}).tween("brush",function(){var e=this,r=e.__brush,i=s(e,arguments),o=r.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),u=xn(o,a);function c(t){r.selection=1===t&&ki(a)?null:u(t),l.call(e),i.brush()}return o&&a?c:c(1)}):e.each(function(){var e=arguments,r=this.__brush,i=t.input("function"==typeof n?n.apply(this,e):n,r.extent),o=s(this,e).beforestart();_r(this),r.selection=null==i||ki(i)?null:i,l.call(this),o.start().brush().end()})},c.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){le(new ui(u,e,t.output(this.state.selection)),o.apply,o,[e,this.that,this.args])}},u.extent=function(e){return arguments.length?(r="function"==typeof e?e:ai([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),u):r},u.filter=function(e){return arguments.length?(i="function"==typeof e?e:ai(!!e),u):i},u.handleSize=function(e){return arguments.length?(a=+e,u):a},u.on=function(){var e=o.on.apply(o,arguments);return e===o?u:e},u}var Ci=Math.cos,Mi=Math.sin,Ai=Math.PI,Ni=Ai/2,Pi=2*Ai,Ri=Math.max,Ii=Array.prototype.slice,Fi=function(e){return function(){return e}},ji=Math.PI,Di=2*ji,Ui=Di-1e-6;function zi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Li(){return new zi}function Vi(e){return e.source}function qi(e){return e.target}function Bi(e){return e.radius}function Wi(e){return e.startAngle}function Yi(e){return e.endAngle}function Hi(){}function $i(e,t){var n=new Hi;if(e instanceof Hi)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var r,i=-1,o=e.length;if(null==t)for(;++i<o;)n.set(i,e[i]);else for(;++i<o;)n.set(t(r=e[i],i,e),r)}else if(e)for(var a in e)n.set(a,e[a]);return n}function Ki(){return{}}function Xi(e,t,n){e[t]=n}function Gi(){return $i()}function Qi(e,t,n){e.set(t,n)}function Zi(){}zi.prototype=Li.prototype={constructor:zi,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,i,o){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(e,t,n,r,i){e=+e,t=+t,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,u=n-e,l=r-t,s=o-e,c=a-t,f=s*s+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(c*u-l*s)>1e-6&&i){var d=n-o,p=r-a,h=u*u+l*l,m=d*d+p*p,v=Math.sqrt(h),y=Math.sqrt(f),g=i*Math.tan((ji-Math.acos((h+f-m)/(2*v*y)))/2),b=g/y,_=g/v;Math.abs(b-1)>1e-6&&(this._+="L"+(e+b*s)+","+(t+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*d>s*p)+","+(this._x1=e+_*u)+","+(this._y1=t+_*l)}else this._+="L"+(this._x1=e)+","+(this._y1=t)},arc:function(e,t,n,r,i,o){e=+e,t=+t;var a=(n=+n)*Math.cos(r),u=n*Math.sin(r),l=e+a,s=t+u,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+s:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+l+","+s),n&&(f<0&&(f=f%Di+Di),f>Ui?this._+="A"+n+","+n+",0,1,"+c+","+(e-a)+","+(t-u)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=s):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=ji)+","+c+","+(this._x1=e+n*Math.cos(i))+","+(this._y1=t+n*Math.sin(i))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},Hi.prototype=$i.prototype={constructor:Hi,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var Ji=$i.prototype;function eo(e,t){var n=new Zi;if(e instanceof Zi)e.each(function(e){n.add(e)});else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}function to(e){return new Function("d","return {"+e.map(function(e,t){return JSON.stringify(e)+": d["+t+"]"}).join(",")+"}")}Zi.prototype=eo.prototype={constructor:Zi,has:Ji.has,add:function(e){return this["$"+(e+="")]=e,this},remove:Ji.remove,clear:Ji.clear,values:Ji.keys,size:Ji.size,empty:Ji.empty,each:Ji.each};var no=function(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function r(e,t){var r,i,o={},a={},u=[],l=e.length,s=0,c=0;function f(){if(s>=l)return a;if(i)return i=!1,o;var t,r=s;if(34===e.charCodeAt(r)){for(var u=r;u++<l;)if(34===e.charCodeAt(u)){if(34!==e.charCodeAt(u+1))break;++u}return s=u+2,13===(t=e.charCodeAt(u+1))?(i=!0,10===e.charCodeAt(u+2)&&++s):10===t&&(i=!0),e.slice(r+1,u).replace(/""/g,'"')}for(;s<l;){var c=1;if(10===(t=e.charCodeAt(s++)))i=!0;else if(13===t)i=!0,10===e.charCodeAt(s)&&(++s,++c);else if(t!==n)continue;return e.slice(r,s-c)}return e.slice(r)}for(;(r=f())!==a;){for(var d=[];r!==o&&r!==a;)d.push(r),r=f();t&&null==(d=t(d,c++))||u.push(d)}return u}function i(t){return t.map(o).join(e)}function o(e){return null==e?"":t.test(e+="")?'"'+e.replace(/\"/g,'""')+'"':e}return{parse:function(e,t){var n,i,o=r(e,function(e,r){if(n)return n(e,r-1);i=e,n=t?function(e,t){var n=to(e);return function(r,i){return t(n(r),i,e)}}(e,t):to(e)});return o.columns=i,o},parseRows:r,format:function(t,n){return null==n&&(n=function(e){var t=Object.create(null),n=[];return e.forEach(function(e){for(var r in e)r in t||n.push(t[r]=r)}),n}(t)),[n.map(o).join(e)].concat(t.map(function(t){return n.map(function(e){return o(t[e])}).join(e)})).join("\n")},formatRows:function(e){return e.map(i).join("\n")}}},ro=no(","),io=ro.parse,oo=ro.parseRows,ao=ro.format,uo=ro.formatRows,lo=no("\t"),so=lo.parse,co=lo.parseRows,fo=lo.format,po=lo.formatRows,ho=function(e){return function(){return e}},mo=function(){return 1e-6*(Math.random()-.5)};function vo(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var i,o,a,u,l,s,c,f,d,p=e._root,h={data:r},m=e._x0,v=e._y0,y=e._x1,g=e._y1;if(!p)return e._root=h,e;for(;p.length;)if((s=t>=(o=(m+y)/2))?m=o:y=o,(c=n>=(a=(v+g)/2))?v=a:g=a,i=p,!(p=p[f=c<<1|s]))return i[f]=h,e;if(u=+e._x.call(null,p.data),l=+e._y.call(null,p.data),t===u&&n===l)return h.next=p,i?i[f]=h:e._root=h,e;do{i=i?i[f]=new Array(4):e._root=new Array(4),(s=t>=(o=(m+y)/2))?m=o:y=o,(c=n>=(a=(v+g)/2))?v=a:g=a}while((f=c<<1|s)==(d=(l>=a)<<1|u>=o));return i[d]=p,i[f]=h,e}var yo=function(e,t,n,r,i){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=i};function go(e){return e[0]}function bo(e){return e[1]}function _o(e,t,n){var r=new xo(null==t?go:t,null==n?bo:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function xo(e,t,n,r,i,o){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function wo(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var Eo=_o.prototype=xo.prototype;function So(e){return e.x+e.vx}function To(e){return e.y+e.vy}function ko(e){return e.index}function Oo(e,t){var n=e.get(t);if(!n)throw new Error("missing: "+t);return n}function Co(e){return e.x}function Mo(e){return e.y}Eo.copy=function(){var e,t,n=new xo(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=wo(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var i=0;i<4;++i)(t=r.source[i])&&(t.length?e.push({source:t,target:r.target[i]=new Array(4)}):r.target[i]=wo(t));return n},Eo.add=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return vo(this.cover(t,n),t,n,e)},Eo.addAll=function(e){var t,n,r,i,o=e.length,a=new Array(o),u=new Array(o),l=1/0,s=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(i=+this._y.call(null,t))||(a[n]=r,u[n]=i,r<l&&(l=r),r>c&&(c=r),i<s&&(s=i),i>f&&(f=i));for(c<l&&(l=this._x0,c=this._x1),f<s&&(s=this._y0,f=this._y1),this.cover(l,s).cover(c,f),n=0;n<o;++n)vo(this,a[n],u[n],e[n]);return this},Eo.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(e))+1,o=(r=Math.floor(t))+1;else{if(!(n>e||e>i||r>t||t>o))return this;var a,u,l=i-n,s=this._root;switch(u=(t<(r+o)/2)<<1|e<(n+i)/2){case 0:do{(a=new Array(4))[u]=s,s=a}while(o=r+(l*=2),e>(i=n+l)||t>o);break;case 1:do{(a=new Array(4))[u]=s,s=a}while(o=r+(l*=2),(n=i-l)>e||t>o);break;case 2:do{(a=new Array(4))[u]=s,s=a}while(r=o-(l*=2),e>(i=n+l)||r>t);break;case 3:do{(a=new Array(4))[u]=s,s=a}while(r=o-(l*=2),(n=i-l)>e||r>t)}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},Eo.data=function(){var e=[];return this.visit(function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)}),e},Eo.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Eo.find=function(e,t,n){var r,i,o,a,u,l,s,c=this._x0,f=this._y0,d=this._x1,p=this._y1,h=[],m=this._root;for(m&&h.push(new yo(m,c,f,d,p)),null==n?n=1/0:(c=e-n,f=t-n,d=e+n,p=t+n,n*=n);l=h.pop();)if(!(!(m=l.node)||(i=l.x0)>d||(o=l.y0)>p||(a=l.x1)<c||(u=l.y1)<f))if(m.length){var v=(i+a)/2,y=(o+u)/2;h.push(new yo(m[3],v,y,a,u),new yo(m[2],i,y,v,u),new yo(m[1],v,o,a,y),new yo(m[0],i,o,v,y)),(s=(t>=y)<<1|e>=v)&&(l=h[h.length-1],h[h.length-1]=h[h.length-1-s],h[h.length-1-s]=l)}else{var g=e-+this._x.call(null,m.data),b=t-+this._y.call(null,m.data),_=g*g+b*b;if(_<n){var x=Math.sqrt(n=_);c=e-x,f=t-x,d=e+x,p=t+x,r=m.data}}return r},Eo.remove=function(e){if(isNaN(o=+this._x.call(null,e))||isNaN(a=+this._y.call(null,e)))return this;var t,n,r,i,o,a,u,l,s,c,f,d,p=this._root,h=this._x0,m=this._y0,v=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((s=o>=(u=(h+v)/2))?h=u:v=u,(c=a>=(l=(m+y)/2))?m=l:y=l,t=p,!(p=p[f=c<<1|s]))return this;if(!p.length)break;(t[f+1&3]||t[f+2&3]||t[f+3&3])&&(n=t,d=f)}for(;p.data!==e;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):t?(i?t[f]=i:delete t[f],(p=t[0]||t[1]||t[2]||t[3])&&p===(t[3]||t[2]||t[1]||t[0])&&!p.length&&(n?n[d]=p:this._root=p),this):(this._root=i,this)},Eo.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},Eo.root=function(){return this._root},Eo.size=function(){var e=0;return this.visit(function(t){if(!t.length)do{++e}while(t=t.next)}),e},Eo.visit=function(e){var t,n,r,i,o,a,u=[],l=this._root;for(l&&u.push(new yo(l,this._x0,this._y0,this._x1,this._y1));t=u.pop();)if(!e(l=t.node,r=t.x0,i=t.y0,o=t.x1,a=t.y1)&&l.length){var s=(r+o)/2,c=(i+a)/2;(n=l[3])&&u.push(new yo(n,s,c,o,a)),(n=l[2])&&u.push(new yo(n,r,c,s,a)),(n=l[1])&&u.push(new yo(n,s,i,o,c)),(n=l[0])&&u.push(new yo(n,r,i,s,c))}return this},Eo.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new yo(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var i=t.node;if(i.length){var o,a=t.x0,u=t.y0,l=t.x1,s=t.y1,c=(a+l)/2,f=(u+s)/2;(o=i[0])&&n.push(new yo(o,a,u,c,f)),(o=i[1])&&n.push(new yo(o,c,u,l,f)),(o=i[2])&&n.push(new yo(o,a,f,c,s)),(o=i[3])&&n.push(new yo(o,c,f,l,s))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},Eo.x=function(e){return arguments.length?(this._x=e,this):this._x},Eo.y=function(e){return arguments.length?(this._y=e,this):this._y};var Ao,No=10,Po=Math.PI*(3-Math.sqrt(5)),Ro=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},Io=function(e){return(e=Ro(Math.abs(e)))?e[1]:NaN},Fo=function(e,t){var n=Ro(e,t);if(!n)return e+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},jo={"":function(e,t){e=e.toPrecision(t);e:for(var n,r=e.length,i=1,o=-1;i<r;++i)switch(e[i]){case".":o=n=i;break;case"0":0===o&&(o=i),n=i;break;case"e":break e;default:o>0&&(o=0)}return o>0?e.slice(0,o)+e.slice(n+1):e},"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Fo(100*e,t)},r:Fo,s:function(e,t){var n=Ro(e,t);if(!n)return e+"";var r=n[0],i=n[1],o=i-(Ao=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ro(e,Math.max(0,t+o-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Do=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function Uo(e){return new zo(e)}function zo(e){if(!(t=Do.exec(e)))throw new Error("invalid format: "+e);var t,n=t[1]||" ",r=t[2]||">",i=t[3]||"-",o=t[4]||"",a=!!t[5],u=t[6]&&+t[6],l=!!t[7],s=t[8]&&+t[8].slice(1),c=t[9]||"";"n"===c?(l=!0,c="g"):jo[c]||(c=""),(a||"0"===n&&"="===r)&&(a=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=i,this.symbol=o,this.zero=a,this.width=u,this.comma=l,this.precision=s,this.type=c}Uo.prototype=zo.prototype,zo.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Lo,Vo=function(e){return e},qo=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Bo=function(e){var t,n,r=e.grouping&&e.thousands?(t=e.grouping,n=e.thousands,function(e,r){for(var i=e.length,o=[],a=0,u=t[0],l=0;i>0&&u>0&&(l+u+1>r&&(u=Math.max(1,r-l)),o.push(e.substring(i-=u,i+u)),!((l+=u+1)>r));)u=t[a=(a+1)%t.length];return o.reverse().join(n)}):Vo,i=e.currency,o=e.decimal,a=e.numerals?function(e){return function(t){return t.replace(/[0-9]/g,function(t){return e[+t]})}}(e.numerals):Vo,u=e.percent||"%";function l(e){var t=(e=Uo(e)).fill,n=e.align,l=e.sign,s=e.symbol,c=e.zero,f=e.width,d=e.comma,p=e.precision,h=e.type,m="$"===s?i[0]:"#"===s&&/[boxX]/.test(h)?"0"+h.toLowerCase():"",v="$"===s?i[1]:/[%p]/.test(h)?u:"",y=jo[h],g=!h||/[defgprs%]/.test(h);function b(e){var i,u,s,b=m,_=v;if("c"===h)_=y(e)+_,e="";else{var x=(e=+e)<0;if(e=y(Math.abs(e),p),x&&0==+e&&(x=!1),b=(x?"("===l?l:"-":"-"===l||"("===l?"":l)+b,_=_+("s"===h?qo[8+Ao/3]:"")+(x&&"("===l?")":""),g)for(i=-1,u=e.length;++i<u;)if(48>(s=e.charCodeAt(i))||s>57){_=(46===s?o+e.slice(i+1):e.slice(i))+_,e=e.slice(0,i);break}}d&&!c&&(e=r(e,1/0));var w=b.length+e.length+_.length,E=w<f?new Array(f-w+1).join(t):"";switch(d&&c&&(e=r(E+e,E.length?f-_.length:1/0),E=""),n){case"<":e=b+e+_+E;break;case"=":e=b+E+e+_;break;case"^":e=E.slice(0,w=E.length>>1)+b+e+_+E.slice(w);break;default:e=E+b+e+_}return a(e)}return p=null==p?h?6:12:/[gprs]/.test(h)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),b.toString=function(){return e+""},b}return{format:l,formatPrefix:function(e,t){var n=l(((e=Uo(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(Io(t)/3))),i=Math.pow(10,-r),o=qo[8+r/3];return function(e){return n(i*e)+o}}}};function Wo(t){return Lo=Bo(t),e.format=Lo.format,e.formatPrefix=Lo.formatPrefix,Lo}Wo({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Yo=function(e){return Math.max(0,-Io(Math.abs(e)))},Ho=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Io(t)/3)))-Io(Math.abs(e)))},$o=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Io(t)-Io(e))+1},Ko=function(){return new Xo};function Xo(){this.reset()}Xo.prototype={constructor:Xo,reset:function(){this.s=this.t=0},add:function(e){Qo(Go,e,this.t),Qo(this,Go.s,this.s),this.s?this.t+=Go.t:this.s=Go.t},valueOf:function(){return this.s}};var Go=new Xo;function Qo(e,t,n){var r=e.s=t+n,i=r-t,o=r-i;e.t=t-o+(n-i)}var Zo=1e-6,Jo=Math.PI,ea=Jo/2,ta=Jo/4,na=2*Jo,ra=180/Jo,ia=Jo/180,oa=Math.abs,aa=Math.atan,ua=Math.atan2,la=Math.cos,sa=Math.ceil,ca=Math.exp,fa=Math.log,da=Math.pow,pa=Math.sin,ha=Math.sign||function(e){return e>0?1:e<0?-1:0},ma=Math.sqrt,va=Math.tan;function ya(e){return e>1?0:e<-1?Jo:Math.acos(e)}function ga(e){return e>1?ea:e<-1?-ea:Math.asin(e)}function ba(e){return(e=pa(e/2))*e}function _a(){}function xa(e,t){e&&Ea.hasOwnProperty(e.type)&&Ea[e.type](e,t)}var wa={Feature:function(e,t){xa(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,i=n.length;++r<i;)xa(n[r].geometry,t)}},Ea={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){Sa(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)Sa(n[r],t,0)},Polygon:function(e,t){Ta(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)Ta(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,i=n.length;++r<i;)xa(n[r],t)}};function Sa(e,t,n){var r,i=-1,o=e.length-n;for(t.lineStart();++i<o;)r=e[i],t.point(r[0],r[1],r[2]);t.lineEnd()}function Ta(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)Sa(e[n],t,1);t.polygonEnd()}var ka,Oa,Ca,Ma,Aa,Na,Pa,Ra,Ia,Fa,ja,Da,Ua,za=function(e,t){e&&wa.hasOwnProperty(e.type)?wa[e.type](e,t):xa(e,t)},La=Ko(),Va=Ko(),qa={point:_a,lineStart:_a,lineEnd:_a,polygonStart:function(){La.reset(),qa.lineStart=Ba,qa.lineEnd=Wa},polygonEnd:function(){var e=+La;Va.add(e<0?na+e:e),this.lineStart=this.lineEnd=this.point=_a},sphere:function(){Va.add(na)}};function Ba(){qa.point=Ya}function Wa(){Ha(ka,Oa)}function Ya(e,t){qa.point=Ha,ka=e,Oa=t,Ca=e*=ia,Ma=la(t=(t*=ia)/2+ta),Aa=pa(t)}function Ha(e,t){t=(t*=ia)/2+ta;var n=(e*=ia)-Ca,r=n>=0?1:-1,i=r*n,o=la(t),a=pa(t),u=Aa*a,l=Ma*o+u*la(i),s=u*r*pa(i);La.add(ua(s,l)),Ca=e,Ma=o,Aa=a}function $a(e){return[ua(e[1],e[0]),ga(e[2])]}function Ka(e){var t=e[0],n=e[1],r=la(n);return[r*la(t),r*pa(t),pa(n)]}function Xa(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function Ga(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function Qa(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function Za(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function Ja(e){var t=ma(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}var eu,tu,nu=Ko(),ru={point:iu,lineStart:au,lineEnd:uu,polygonStart:function(){ru.point=lu,ru.lineStart=su,ru.lineEnd=cu,nu.reset(),qa.polygonStart()},polygonEnd:function(){qa.polygonEnd(),ru.point=iu,ru.lineStart=au,ru.lineEnd=uu,La<0?(Na=-(Ra=180),Pa=-(Ia=90)):nu>Zo?Ia=90:nu<-Zo&&(Pa=-90),tu[0]=Na,tu[1]=Ra}};function iu(e,t){eu.push(tu=[Na=e,Ra=e]),t<Pa&&(Pa=t),t>Ia&&(Ia=t)}function ou(e,t){var n=Ka([e*ia,t*ia]);if(Ua){var r=Ga(Ua,n),i=[r[1],-r[0],0],o=Ga(i,r);Ja(o),o=$a(o);var a,u=e-Fa,l=u>0?1:-1,s=o[0]*ra*l,c=oa(u)>180;c^(l*Fa<s&&s<l*e)?(a=o[1]*ra)>Ia&&(Ia=a):c^(l*Fa<(s=(s+360)%360-180)&&s<l*e)?(a=-o[1]*ra)<Pa&&(Pa=a):(t<Pa&&(Pa=t),t>Ia&&(Ia=t)),c?e<Fa?fu(Na,e)>fu(Na,Ra)&&(Ra=e):fu(e,Ra)>fu(Na,Ra)&&(Na=e):Ra>=Na?(e<Na&&(Na=e),e>Ra&&(Ra=e)):e>Fa?fu(Na,e)>fu(Na,Ra)&&(Ra=e):fu(e,Ra)>fu(Na,Ra)&&(Na=e)}else eu.push(tu=[Na=e,Ra=e]);t<Pa&&(Pa=t),t>Ia&&(Ia=t),Ua=n,Fa=e}function au(){ru.point=ou}function uu(){tu[0]=Na,tu[1]=Ra,ru.point=iu,Ua=null}function lu(e,t){if(Ua){var n=e-Fa;nu.add(oa(n)>180?n+(n>0?360:-360):n)}else ja=e,Da=t;qa.point(e,t),ou(e,t)}function su(){qa.lineStart()}function cu(){lu(ja,Da),qa.lineEnd(),oa(nu)>Zo&&(Na=-(Ra=180)),tu[0]=Na,tu[1]=Ra,Ua=null}function fu(e,t){return(t-=e)<0?t+360:t}function du(e,t){return e[0]-t[0]}function pu(e,t){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var hu,mu,vu,yu,gu,bu,_u,xu,wu,Eu,Su,Tu,ku,Ou,Cu,Mu,Au={sphere:_a,point:Nu,lineStart:Ru,lineEnd:ju,polygonStart:function(){Au.lineStart=Du,Au.lineEnd=Uu},polygonEnd:function(){Au.lineStart=Ru,Au.lineEnd=ju}};function Nu(e,t){e*=ia;var n=la(t*=ia);Pu(n*la(e),n*pa(e),pa(t))}function Pu(e,t,n){vu+=(e-vu)/++hu,yu+=(t-yu)/hu,gu+=(n-gu)/hu}function Ru(){Au.point=Iu}function Iu(e,t){e*=ia;var n=la(t*=ia);Ou=n*la(e),Cu=n*pa(e),Mu=pa(t),Au.point=Fu,Pu(Ou,Cu,Mu)}function Fu(e,t){e*=ia;var n=la(t*=ia),r=n*la(e),i=n*pa(e),o=pa(t),a=ua(ma((a=Cu*o-Mu*i)*a+(a=Mu*r-Ou*o)*a+(a=Ou*i-Cu*r)*a),Ou*r+Cu*i+Mu*o);mu+=a,bu+=a*(Ou+(Ou=r)),_u+=a*(Cu+(Cu=i)),xu+=a*(Mu+(Mu=o)),Pu(Ou,Cu,Mu)}function ju(){Au.point=Nu}function Du(){Au.point=zu}function Uu(){Lu(Tu,ku),Au.point=Nu}function zu(e,t){Tu=e,ku=t,e*=ia,t*=ia,Au.point=Lu;var n=la(t);Ou=n*la(e),Cu=n*pa(e),Mu=pa(t),Pu(Ou,Cu,Mu)}function Lu(e,t){e*=ia;var n=la(t*=ia),r=n*la(e),i=n*pa(e),o=pa(t),a=Cu*o-Mu*i,u=Mu*r-Ou*o,l=Ou*i-Cu*r,s=ma(a*a+u*u+l*l),c=ga(s),f=s&&-c/s;wu+=f*a,Eu+=f*u,Su+=f*l,mu+=c,bu+=c*(Ou+(Ou=r)),_u+=c*(Cu+(Cu=i)),xu+=c*(Mu+(Mu=o)),Pu(Ou,Cu,Mu)}var Vu=function(e){return function(){return e}},qu=function(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),n};function Bu(e,t){return[e>Jo?e-na:e<-Jo?e+na:e,t]}function Wu(e,t,n){return(e%=na)?t||n?qu(Hu(e),$u(t,n)):Hu(e):t||n?$u(t,n):Bu}function Yu(e){return function(t,n){return[(t+=e)>Jo?t-na:t<-Jo?t+na:t,n]}}function Hu(e){var t=Yu(e);return t.invert=Yu(-e),t}function $u(e,t){var n=la(e),r=pa(e),i=la(t),o=pa(t);function a(e,t){var a=la(t),u=la(e)*a,l=pa(e)*a,s=pa(t),c=s*n+u*r;return[ua(l*i-c*o,u*n-s*r),ga(c*i+l*o)]}return a.invert=function(e,t){var a=la(t),u=la(e)*a,l=pa(e)*a,s=pa(t),c=s*i-l*o;return[ua(l*i+s*o,u*n+c*r),ga(c*n-u*r)]},a}Bu.invert=Bu;var Ku=function(e){function t(t){return(t=e(t[0]*ia,t[1]*ia))[0]*=ra,t[1]*=ra,t}return e=Wu(e[0]*ia,e[1]*ia,e.length>2?e[2]*ia:0),t.invert=function(t){return(t=e.invert(t[0]*ia,t[1]*ia))[0]*=ra,t[1]*=ra,t},t};function Xu(e,t,n,r,i,o){if(n){var a=la(t),u=pa(t),l=r*n;null==i?(i=t+r*na,o=t-l/2):(i=Gu(a,i),o=Gu(a,o),(r>0?i<o:i>o)&&(i+=r*na));for(var s,c=i;r>0?c>o:c<o;c-=l)s=$a([a,-u*la(c),-u*pa(c)]),e.point(s[0],s[1])}}function Gu(e,t){(t=Ka(t))[0]-=e,Ja(t);var n=ya(-t[1]);return((-t[2]<0?-n:n)+na-Zo)%na}var Qu=function(){var e,t=[];return{point:function(t,n){e.push([t,n])},lineStart:function(){t.push(e=[])},lineEnd:_a,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}},Zu=function(e,t,n,r,i,o){var a,u=e[0],l=e[1],s=t[0],c=t[1],f=0,d=1,p=s-u,h=c-l;if(a=n-u,p||!(a>0)){if(a/=p,p<0){if(a<f)return;a<d&&(d=a)}else if(p>0){if(a>d)return;a>f&&(f=a)}if(a=i-u,p||!(a<0)){if(a/=p,p<0){if(a>d)return;a>f&&(f=a)}else if(p>0){if(a<f)return;a<d&&(d=a)}if(a=r-l,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<d&&(d=a)}else if(h>0){if(a>d)return;a>f&&(f=a)}if(a=o-l,h||!(a<0)){if(a/=h,h<0){if(a>d)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<d&&(d=a)}return f>0&&(e[0]=u+f*p,e[1]=l+f*h),d<1&&(t[0]=u+d*p,t[1]=l+d*h),!0}}}}},Ju=function(e,t){return oa(e[0]-t[0])<Zo&&oa(e[1]-t[1])<Zo};function el(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var tl=function(e,t,n,r,i){var o,a,u=[],l=[];if(e.forEach(function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],a=e[t];if(Ju(r,a)){for(i.lineStart(),o=0;o<t;++o)i.point((r=e[o])[0],r[1]);i.lineEnd()}else u.push(n=new el(r,e,null,!0)),l.push(n.o=new el(r,null,n,!1)),u.push(n=new el(a,e,null,!1)),l.push(n.o=new el(a,null,n,!0))}}),u.length){for(l.sort(t),nl(u),nl(l),o=0,a=l.length;o<a;++o)l[o].e=n=!n;for(var s,c,f=u[0];;){for(var d=f,p=!0;d.v;)if((d=d.n)===f)return;s=d.z,i.lineStart();do{if(d.v=d.o.v=!0,d.e){if(p)for(o=0,a=s.length;o<a;++o)i.point((c=s[o])[0],c[1]);else r(d.x,d.n.x,1,i);d=d.n}else{if(p)for(s=d.p.z,o=s.length-1;o>=0;--o)i.point((c=s[o])[0],c[1]);else r(d.x,d.p.x,-1,i);d=d.p}d=d.o,s=d.z,p=!p}while(!d.v);i.lineEnd()}}};function nl(e){if(t=e.length){for(var t,n,r=0,i=e[0];++r<t;)i.n=n=e[r],n.p=i,i=n;i.n=n=e[0],n.p=i}}var rl=1e9,il=-rl;function ol(e,t,n,r){function i(i,o){return e<=i&&i<=n&&t<=o&&o<=r}function o(i,o,u,s){var c=0,f=0;if(null==i||(c=a(i,u))!==(f=a(o,u))||l(i,o)<0^u>0)do{s.point(0===c||3===c?e:n,c>1?r:t)}while((c=(c+u+4)%4)!==f);else s.point(o[0],o[1])}function a(r,i){return oa(r[0]-e)<Zo?i>0?0:3:oa(r[0]-n)<Zo?i>0?2:1:oa(r[1]-t)<Zo?i>0?1:0:i>0?3:2}function u(e,t){return l(e.x,t.x)}function l(e,t){var n=a(e,1),r=a(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(a){var l,s,c,f,d,p,h,m,v,y,g,b=a,_=Qu(),x={point:w,lineStart:function(){x.point=E,s&&s.push(c=[]),y=!0,v=!1,h=m=NaN},lineEnd:function(){l&&(E(f,d),p&&v&&_.rejoin(),l.push(_.result())),x.point=w,v&&b.lineEnd()},polygonStart:function(){b=_,l=[],s=[],g=!0},polygonEnd:function(){var t=function(){for(var t=0,n=0,i=s.length;n<i;++n)for(var o,a,u=s[n],l=1,c=u.length,f=u[0],d=f[0],p=f[1];l<c;++l)o=d,a=p,f=u[l],d=f[0],p=f[1],a<=r?p>r&&(d-o)*(r-a)>(p-a)*(e-o)&&++t:p<=r&&(d-o)*(r-a)<(p-a)*(e-o)&&--t;return t}(),n=g&&t,i=(l=T(l)).length;(n||i)&&(a.polygonStart(),n&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&tl(l,u,t,o,a),a.polygonEnd()),b=a,l=s=c=null}};function w(e,t){i(e,t)&&b.point(e,t)}function E(o,a){var u=i(o,a);if(s&&c.push([o,a]),y)f=o,d=a,p=u,y=!1,u&&(b.lineStart(),b.point(o,a));else if(u&&v)b.point(o,a);else{var l=[h=Math.max(il,Math.min(rl,h)),m=Math.max(il,Math.min(rl,m))],_=[o=Math.max(il,Math.min(rl,o)),a=Math.max(il,Math.min(rl,a))];Zu(l,_,e,t,n,r)?(v||(b.lineStart(),b.point(l[0],l[1])),b.point(_[0],_[1]),u||b.lineEnd(),g=!1):u&&(b.lineStart(),b.point(o,a),g=!1)}h=o,m=a,v=u}return x}}var al,ul,ll,sl=Ko(),cl=function(e,t){var n=t[0],r=t[1],i=[pa(n),-la(n),0],o=0,a=0;sl.reset();for(var u=0,l=e.length;u<l;++u)if(c=(s=e[u]).length)for(var s,c,f=s[c-1],d=f[0],p=f[1]/2+ta,h=pa(p),m=la(p),v=0;v<c;++v,d=g,h=_,m=x,f=y){var y=s[v],g=y[0],b=y[1]/2+ta,_=pa(b),x=la(b),w=g-d,E=w>=0?1:-1,S=E*w,T=S>Jo,k=h*_;if(sl.add(ua(k*E*pa(S),m*x+k*la(S))),o+=T?w+E*na:w,T^d>=n^g>=n){var O=Ga(Ka(f),Ka(y));Ja(O);var C=Ga(i,O);Ja(C);var M=(T^w>=0?-1:1)*ga(C[2]);(r>M||r===M&&(O[0]||O[1]))&&(a+=T^w>=0?1:-1)}}return(o<-Zo||o<Zo&&sl<-Zo)^1&a},fl=Ko(),dl={sphere:_a,point:_a,lineStart:function(){dl.point=hl,dl.lineEnd=pl},lineEnd:_a,polygonStart:_a,polygonEnd:_a};function pl(){dl.point=dl.lineEnd=_a}function hl(e,t){al=e*=ia,ul=pa(t*=ia),ll=la(t),dl.point=ml}function ml(e,t){e*=ia;var n=pa(t*=ia),r=la(t),i=oa(e-al),o=la(i),a=pa(i),u=r*a,l=ll*n-ul*r*o,s=ul*n+ll*r*o;fl.add(ua(ma(u*u+l*l),s)),al=e,ul=n,ll=r}var vl=function(e){return fl.reset(),za(e,dl),+fl},yl=[null,null],gl={type:"LineString",coordinates:yl},bl=function(e,t){return yl[0]=e,yl[1]=t,vl(gl)},_l={Feature:function(e,t){return wl(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,i=n.length;++r<i;)if(wl(n[r].geometry,t))return!0;return!1}},xl={Sphere:function(){return!0},Point:function(e,t){return El(e.coordinates,t)},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)if(El(n[r],t))return!0;return!1},LineString:function(e,t){return Sl(e.coordinates,t)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)if(Sl(n[r],t))return!0;return!1},Polygon:function(e,t){return Tl(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)if(Tl(n[r],t))return!0;return!1},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,i=n.length;++r<i;)if(wl(n[r],t))return!0;return!1}};function wl(e,t){return!(!e||!xl.hasOwnProperty(e.type))&&xl[e.type](e,t)}function El(e,t){return 0===bl(e,t)}function Sl(e,t){var n=bl(e[0],e[1]),r=bl(e[0],t),i=bl(t,e[1]);return r+i<=n+Zo}function Tl(e,t){return!!cl(e.map(kl),Ol(t))}function kl(e){return(e=e.map(Ol)).pop(),e}function Ol(e){return[e[0]*ia,e[1]*ia]}function Cl(e,t,n){var r=v(e,t-Zo,n).concat(t);return function(e){return r.map(function(t){return[e,t]})}}function Ml(e,t,n){var r=v(e,t-Zo,n).concat(t);return function(e){return r.map(function(t){return[t,e]})}}function Al(){var e,t,n,r,i,o,a,u,l,s,c,f,d=10,p=d,h=90,m=360,y=2.5;function g(){return{type:"MultiLineString",coordinates:b()}}function b(){return v(sa(r/h)*h,n,h).map(c).concat(v(sa(u/m)*m,a,m).map(f)).concat(v(sa(t/d)*d,e,d).filter(function(e){return oa(e%h)>Zo}).map(l)).concat(v(sa(o/p)*p,i,p).filter(function(e){return oa(e%m)>Zo}).map(s))}return g.lines=function(){return b().map(function(e){return{type:"LineString",coordinates:e}})},g.outline=function(){return{type:"Polygon",coordinates:[c(r).concat(f(a).slice(1),c(n).reverse().slice(1),f(u).reverse().slice(1))]}},g.extent=function(e){return arguments.length?g.extentMajor(e).extentMinor(e):g.extentMinor()},g.extentMajor=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],u=+e[0][1],a=+e[1][1],r>n&&(e=r,r=n,n=e),u>a&&(e=u,u=a,a=e),g.precision(y)):[[r,u],[n,a]]},g.extentMinor=function(n){return arguments.length?(t=+n[0][0],e=+n[1][0],o=+n[0][1],i=+n[1][1],t>e&&(n=t,t=e,e=n),o>i&&(n=o,o=i,i=n),g.precision(y)):[[t,o],[e,i]]},g.step=function(e){return arguments.length?g.stepMajor(e).stepMinor(e):g.stepMinor()},g.stepMajor=function(e){return arguments.length?(h=+e[0],m=+e[1],g):[h,m]},g.stepMinor=function(e){return arguments.length?(d=+e[0],p=+e[1],g):[d,p]},g.precision=function(d){return arguments.length?(y=+d,l=Cl(o,i,90),s=Ml(t,e,y),c=Cl(u,a,90),f=Ml(r,n,y),g):y},g.extentMajor([[-180,-90+Zo],[180,90-Zo]]).extentMinor([[-180,-80-Zo],[180,80+Zo]])}var Nl,Pl,Rl,Il,Fl=function(e){return e},jl=Ko(),Dl=Ko(),Ul={point:_a,lineStart:_a,lineEnd:_a,polygonStart:function(){Ul.lineStart=zl,Ul.lineEnd=ql},polygonEnd:function(){Ul.lineStart=Ul.lineEnd=Ul.point=_a,jl.add(oa(Dl)),Dl.reset()},result:function(){var e=jl/2;return jl.reset(),e}};function zl(){Ul.point=Ll}function Ll(e,t){Ul.point=Vl,Nl=Rl=e,Pl=Il=t}function Vl(e,t){Dl.add(Il*e-Rl*t),Rl=e,Il=t}function ql(){Vl(Nl,Pl)}var Bl,Wl,Yl,Hl,$l=1/0,Kl=$l,Xl=-$l,Gl=Xl,Ql={point:function(e,t){e<$l&&($l=e),e>Xl&&(Xl=e),t<Kl&&(Kl=t),t>Gl&&(Gl=t)},lineStart:_a,lineEnd:_a,polygonStart:_a,polygonEnd:_a,result:function(){var e=[[$l,Kl],[Xl,Gl]];return Xl=Gl=-(Kl=$l=1/0),e}},Zl=0,Jl=0,es=0,ts=0,ns=0,rs=0,is=0,os=0,as=0,us={point:ls,lineStart:ss,lineEnd:ds,polygonStart:function(){us.lineStart=ps,us.lineEnd=hs},polygonEnd:function(){us.point=ls,us.lineStart=ss,us.lineEnd=ds},result:function(){var e=as?[is/as,os/as]:rs?[ts/rs,ns/rs]:es?[Zl/es,Jl/es]:[NaN,NaN];return Zl=Jl=es=ts=ns=rs=is=os=as=0,e}};function ls(e,t){Zl+=e,Jl+=t,++es}function ss(){us.point=cs}function cs(e,t){us.point=fs,ls(Yl=e,Hl=t)}function fs(e,t){var n=e-Yl,r=t-Hl,i=ma(n*n+r*r);ts+=i*(Yl+e)/2,ns+=i*(Hl+t)/2,rs+=i,ls(Yl=e,Hl=t)}function ds(){us.point=ls}function ps(){us.point=ms}function hs(){vs(Bl,Wl)}function ms(e,t){us.point=vs,ls(Bl=Yl=e,Wl=Hl=t)}function vs(e,t){var n=e-Yl,r=t-Hl,i=ma(n*n+r*r);ts+=i*(Yl+e)/2,ns+=i*(Hl+t)/2,rs+=i,is+=(i=Hl*e-Yl*t)*(Yl+e),os+=i*(Hl+t),as+=3*i,ls(Yl=e,Hl=t)}function ys(e){this._context=e}ys.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,na)}},result:_a};var gs,bs,_s,xs,ws,Es=Ko(),Ss={point:_a,lineStart:function(){Ss.point=Ts},lineEnd:function(){gs&&ks(bs,_s),Ss.point=_a},polygonStart:function(){gs=!0},polygonEnd:function(){gs=null},result:function(){var e=+Es;return Es.reset(),e}};function Ts(e,t){Ss.point=ks,bs=xs=e,_s=ws=t}function ks(e,t){xs-=e,ws-=t,Es.add(ma(xs*xs+ws*ws)),xs=e,ws=t}function Os(){this._string=[]}function Cs(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}Os.prototype={_radius:4.5,_circle:Cs(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._string.push("M",e,",",t),this._point=1;break;case 1:this._string.push("L",e,",",t);break;default:null==this._circle&&(this._circle=Cs(this._radius)),this._string.push("M",e,",",t,this._circle)}},result:function(){if(this._string.length){var e=this._string.join("");return this._string=[],e}return null}};var Ms=function(e,t,n,r){return function(i,o){var a,u,l,s=t(o),c=i.invert(r[0],r[1]),f=Qu(),d=t(f),p=!1,h={point:m,lineStart:y,lineEnd:g,polygonStart:function(){h.point=b,h.lineStart=_,h.lineEnd=x,u=[],a=[]},polygonEnd:function(){h.point=m,h.lineStart=y,h.lineEnd=g,u=T(u);var e=cl(a,c);u.length?(p||(o.polygonStart(),p=!0),tl(u,Ns,e,n,o)):e&&(p||(o.polygonStart(),p=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),p&&(o.polygonEnd(),p=!1),u=a=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function m(t,n){var r=i(t,n);e(t=r[0],n=r[1])&&o.point(t,n)}function v(e,t){var n=i(e,t);s.point(n[0],n[1])}function y(){h.point=v,s.lineStart()}function g(){h.point=m,s.lineEnd()}function b(e,t){l.push([e,t]);var n=i(e,t);d.point(n[0],n[1])}function _(){d.lineStart(),l=[]}function x(){b(l[0][0],l[0][1]),d.lineEnd();var e,t,n,r,i=d.clean(),s=f.result(),c=s.length;if(l.pop(),a.push(l),l=null,c)if(1&i){if(n=s[0],(t=n.length-1)>0){for(p||(o.polygonStart(),p=!0),o.lineStart(),e=0;e<t;++e)o.point((r=n[e])[0],r[1]);o.lineEnd()}}else c>1&&2&i&&s.push(s.pop().concat(s.shift())),u.push(s.filter(As))}return h}};function As(e){return e.length>1}function Ns(e,t){return((e=e.x)[0]<0?e[1]-ea-Zo:ea-e[1])-((t=t.x)[0]<0?t[1]-ea-Zo:ea-t[1])}var Ps=Ms(function(){return!0},function(e){var t,n=NaN,r=NaN,i=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(o,a){var u=o>0?Jo:-Jo,l=oa(o-n);oa(l-Jo)<Zo?(e.point(n,r=(r+a)/2>0?ea:-ea),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(u,r),e.point(o,r),t=0):i!==u&&l>=Jo&&(oa(n-i)<Zo&&(n-=i*Zo),oa(o-u)<Zo&&(o-=u*Zo),r=function(e,t,n,r){var i,o,a=pa(e-n);return oa(a)>Zo?aa((pa(t)*(o=la(r))*pa(n)-pa(r)*(i=la(t))*pa(e))/(i*o*a)):(t+r)/2}(n,r,o,a),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(u,r),t=0),e.point(n=o,r=a),i=u},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}},function(e,t,n,r){var i;if(null==e)i=n*ea,r.point(-Jo,i),r.point(0,i),r.point(Jo,i),r.point(Jo,0),r.point(Jo,-i),r.point(0,-i),r.point(-Jo,-i),r.point(-Jo,0),r.point(-Jo,i);else if(oa(e[0]-t[0])>Zo){var o=e[0]<t[0]?Jo:-Jo;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(t[0],t[1])},[-Jo,-ea]),Rs=function(e,t){var n=la(e),r=n>0,i=oa(n)>Zo;function o(e,t){return la(e)*la(t)>n}function a(e,t,r){var i=Ka(e),o=Ka(t),a=[1,0,0],u=Ga(i,o),l=Xa(u,u),s=u[0],c=l-s*s;if(!c)return!r&&e;var f=n*l/c,d=-n*s/c,p=Ga(a,u),h=Za(a,f),m=Za(u,d);Qa(h,m);var v=p,y=Xa(h,v),g=Xa(v,v),b=y*y-g*(Xa(h,h)-1);if(!(b<0)){var _=ma(b),x=Za(v,(-y-_)/g);if(Qa(x,h),x=$a(x),!r)return x;var w,E=e[0],S=t[0],T=e[1],k=t[1];S<E&&(w=E,E=S,S=w);var O=S-E,C=oa(O-Jo)<Zo,M=C||O<Zo;if(!C&&k<T&&(w=T,T=k,k=w),M?C?T+k>0^x[1]<(oa(x[0]-E)<Zo?T:k):T<=x[1]&&x[1]<=k:O>Jo^(E<=x[0]&&x[0]<=S)){var A=Za(v,(-y+_)/g);return Qa(A,h),[x,$a(A)]}}}function u(t,n){var i=r?e:Jo-e,o=0;return t<-i?o|=1:t>i&&(o|=2),n<-i?o|=4:n>i&&(o|=8),o}return Ms(o,function(e){var t,n,l,s,c;return{lineStart:function(){s=l=!1,c=1},point:function(f,d){var p,h=[f,d],m=o(f,d),v=r?m?0:u(f,d):m?u(f+(f<0?Jo:-Jo),d):0;if(!t&&(s=l=m)&&e.lineStart(),m!==l&&(!(p=a(t,h))||Ju(t,p)||Ju(h,p))&&(h[0]+=Zo,h[1]+=Zo,m=o(h[0],h[1])),m!==l)c=0,m?(e.lineStart(),p=a(h,t),e.point(p[0],p[1])):(p=a(t,h),e.point(p[0],p[1]),e.lineEnd()),t=p;else if(i&&t&&r^m){var y;v&n||!(y=a(h,t,!0))||(c=0,r?(e.lineStart(),e.point(y[0][0],y[0][1]),e.point(y[1][0],y[1][1]),e.lineEnd()):(e.point(y[1][0],y[1][1]),e.lineEnd(),e.lineStart(),e.point(y[0][0],y[0][1])))}!m||t&&Ju(t,h)||e.point(h[0],h[1]),t=h,l=m,n=v},lineEnd:function(){l&&e.lineEnd(),t=null},clean:function(){return c|(s&&l)<<1}}},function(n,r,i,o){Xu(o,e,t,i,n,r)},r?[0,-e]:[-Jo,e-Jo])};function Is(e){return function(t){var n=new Fs;for(var r in e)n[r]=e[r];return n.stream=t,n}}function Fs(){}function js(e,t,n){var r=t[1][0]-t[0][0],i=t[1][1]-t[0][1],o=e.clipExtent&&e.clipExtent();e.scale(150).translate([0,0]),null!=o&&e.clipExtent(null),za(n,e.stream(Ql));var a=Ql.result(),u=Math.min(r/(a[1][0]-a[0][0]),i/(a[1][1]-a[0][1])),l=+t[0][0]+(r-u*(a[1][0]+a[0][0]))/2,s=+t[0][1]+(i-u*(a[1][1]+a[0][1]))/2;return null!=o&&e.clipExtent(o),e.scale(150*u).translate([l,s])}function Ds(e,t,n){return js(e,[[0,0],t],n)}Fs.prototype={constructor:Fs,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Us=16,zs=la(30*ia),Ls=function(e,t){return+t?function(e,t){function n(r,i,o,a,u,l,s,c,f,d,p,h,m,v){var y=s-r,g=c-i,b=y*y+g*g;if(b>4*t&&m--){var _=a+d,x=u+p,w=l+h,E=ma(_*_+x*x+w*w),S=ga(w/=E),T=oa(oa(w)-1)<Zo||oa(o-f)<Zo?(o+f)/2:ua(x,_),k=e(T,S),O=k[0],C=k[1],M=O-r,A=C-i,N=g*M-y*A;(N*N/b>t||oa((y*M+g*A)/b-.5)>.3||a*d+u*p+l*h<zs)&&(n(r,i,o,a,u,l,O,C,T,_/=E,x/=E,w,m,v),v.point(O,C),n(O,C,T,_,x,w,s,c,f,d,p,h,m,v))}}return function(t){var r,i,o,a,u,l,s,c,f,d,p,h,m={point:v,lineStart:y,lineEnd:b,polygonStart:function(){t.polygonStart(),m.lineStart=_},polygonEnd:function(){t.polygonEnd(),m.lineStart=y}};function v(n,r){n=e(n,r),t.point(n[0],n[1])}function y(){c=NaN,m.point=g,t.lineStart()}function g(r,i){var o=Ka([r,i]),a=e(r,i);n(c,f,s,d,p,h,c=a[0],f=a[1],s=r,d=o[0],p=o[1],h=o[2],Us,t),t.point(c,f)}function b(){m.point=v,t.lineEnd()}function _(){y(),m.point=x,m.lineEnd=w}function x(e,t){g(r=e,t),i=c,o=f,a=d,u=p,l=h,m.point=g}function w(){n(c,f,s,d,p,h,i,o,r,a,u,l,Us,t),m.lineEnd=b,b()}return m}}(e,t):function(e){return Is({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}(e)},Vs=Is({point:function(e,t){this.stream.point(e*ia,t*ia)}});function qs(e){return Bs(function(){return e})()}function Bs(e){var t,n,r,i,o,a,u,l,s,c,f=150,d=480,p=250,h=0,m=0,v=0,y=0,g=0,b=null,_=Ps,x=null,w=Fl,E=.5,S=Ls(O,E);function T(e){return[(e=o(e[0]*ia,e[1]*ia))[0]*f+n,r-e[1]*f]}function k(e){return(e=o.invert((e[0]-n)/f,(r-e[1])/f))&&[e[0]*ra,e[1]*ra]}function O(e,i){return[(e=t(e,i))[0]*f+n,r-e[1]*f]}function C(){o=qu(i=Wu(v,y,g),t);var e=t(h,m);return n=d-e[0]*f,r=p+e[1]*f,M()}function M(){return s=c=null,T}return T.stream=function(e){return s&&c===e?s:s=Vs(_(i,S(w(c=e))))},T.clipAngle=function(e){return arguments.length?(_=+e?Rs(b=e*ia,6*ia):(b=null,Ps),M()):b*ra},T.clipExtent=function(e){return arguments.length?(w=null==e?(x=a=u=l=null,Fl):ol(x=+e[0][0],a=+e[0][1],u=+e[1][0],l=+e[1][1]),M()):null==x?null:[[x,a],[u,l]]},T.scale=function(e){return arguments.length?(f=+e,C()):f},T.translate=function(e){return arguments.length?(d=+e[0],p=+e[1],C()):[d,p]},T.center=function(e){return arguments.length?(h=e[0]%360*ia,m=e[1]%360*ia,C()):[h*ra,m*ra]},T.rotate=function(e){return arguments.length?(v=e[0]%360*ia,y=e[1]%360*ia,g=e.length>2?e[2]%360*ia:0,C()):[v*ra,y*ra,g*ra]},T.precision=function(e){return arguments.length?(S=Ls(O,E=e*e),M()):ma(E)},T.fitExtent=function(e,t){return js(T,e,t)},T.fitSize=function(e,t){return Ds(T,e,t)},function(){return t=e.apply(this,arguments),T.invert=t.invert&&k,C()}}function Ws(e){var t=0,n=Jo/3,r=Bs(e),i=r(t,n);return i.parallels=function(e){return arguments.length?r(t=e[0]*ia,n=e[1]*ia):[t*ra,n*ra]},i}function Ys(e,t){var n=pa(e),r=(n+pa(t))/2;if(oa(r)<Zo)return function(e){var t=la(e);function n(e,n){return[e*t,pa(n)/t]}return n.invert=function(e,n){return[e/t,ga(n*t)]},n}(e);var i=1+n*(2*r-n),o=ma(i)/r;function a(e,t){var n=ma(i-2*r*pa(t))/r;return[n*pa(e*=r),o-n*la(e)]}return a.invert=function(e,t){var n=o-t;return[ua(e,oa(n))/r*ha(n),ga((i-(e*e+n*n)*r*r)/(2*r))]},a}var Hs=function(){return Ws(Ys).scale(155.424).center([0,33.6442])},$s=function(){return Hs().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};function Ks(e){return function(t,n){var r=la(t),i=la(n),o=e(r*i);return[o*i*pa(t),o*pa(n)]}}function Xs(e){return function(t,n){var r=ma(t*t+n*n),i=e(r),o=pa(i),a=la(i);return[ua(t*o,r*a),ga(r&&n*o/r)]}}var Gs=Ks(function(e){return ma(2/(1+e))});Gs.invert=Xs(function(e){return 2*ga(e/2)});var Qs=Ks(function(e){return(e=ya(e))&&e/pa(e)});function Zs(e,t){return[e,fa(va((ea+t)/2))]}function Js(e){var t,n,r,i=qs(e),o=i.center,a=i.scale,u=i.translate,l=i.clipExtent,s=null;function c(){var o=Jo*a(),u=i(Ku(i.rotate()).invert([0,0]));return l(null==s?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:e===Zs?[[Math.max(u[0]-o,s),t],[Math.min(u[0]+o,n),r]]:[[s,Math.max(u[1]-o,t)],[n,Math.min(u[1]+o,r)]])}return i.scale=function(e){return arguments.length?(a(e),c()):a()},i.translate=function(e){return arguments.length?(u(e),c()):u()},i.center=function(e){return arguments.length?(o(e),c()):o()},i.clipExtent=function(e){return arguments.length?(null==e?s=t=n=r=null:(s=+e[0][0],t=+e[0][1],n=+e[1][0],r=+e[1][1]),c()):null==s?null:[[s,t],[n,r]]},c()}function ec(e){return va((ea+e)/2)}function tc(e,t){var n=la(e),r=e===t?pa(e):fa(n/la(t))/fa(ec(t)/ec(e)),i=n*da(ec(e),r)/r;if(!r)return Zs;function o(e,t){i>0?t<-ea+Zo&&(t=-ea+Zo):t>ea-Zo&&(t=ea-Zo);var n=i/da(ec(t),r);return[n*pa(r*e),i-n*la(r*e)]}return o.invert=function(e,t){var n=i-t,o=ha(r)*ma(e*e+n*n);return[ua(e,oa(n))/r*ha(n),2*aa(da(i/o,1/r))-ea]},o}function nc(e,t){return[e,t]}function rc(e,t){var n=la(e),r=e===t?pa(e):(n-la(t))/(t-e),i=n/r+e;if(oa(r)<Zo)return nc;function o(e,t){var n=i-t,o=r*e;return[n*pa(o),i-n*la(o)]}return o.invert=function(e,t){var n=i-t;return[ua(e,oa(n))/r*ha(n),i-ha(r)*ma(e*e+n*n)]},o}function ic(e,t){var n=la(t),r=la(e)*n;return[n*pa(e)/r,pa(t)/r]}function oc(e,t,n,r){return 1===e&&1===t&&0===n&&0===r?Fl:Is({point:function(i,o){this.stream.point(i*e+n,o*t+r)}})}function ac(e,t){return[la(t)*pa(e),pa(t)]}function uc(e,t){var n=la(t),r=1+la(e)*n;return[n*pa(e)/r,pa(t)/r]}function lc(e,t){return[fa(va((ea+t)/2)),-e]}function sc(e,t){return e.parent===t.parent?1:2}function cc(e,t){return e+t.x}function fc(e,t){return Math.max(e,t.y)}function dc(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}function pc(e,t){var n,r,i,o,a,u=new yc(e),l=+e.value&&(u.value=e.value),s=[u];for(null==t&&(t=hc);n=s.pop();)if(l&&(n.value=+n.data.value),(i=t(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)s.push(r=n.children[o]=new yc(i[o])),r.parent=n,r.depth=n.depth+1;return u.eachBefore(vc)}function hc(e){return e.children}function mc(e){e.data=e.data.data}function vc(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function yc(e){this.data=e,this.depth=this.height=0,this.parent=null}Qs.invert=Xs(function(e){return e}),Zs.invert=function(e,t){return[e,2*aa(ca(t))-ea]},nc.invert=nc,ic.invert=Xs(aa),ac.invert=Xs(ga),uc.invert=Xs(function(e){return 2*aa(e)}),lc.invert=function(e,t){return[-t,2*aa(ca(e))-ea]},yc.prototype=pc.prototype={constructor:yc,count:function(){return this.eachAfter(dc)},each:function(e){var t,n,r,i,o=this,a=[o];do{for(t=a.reverse(),a=[];o=t.pop();)if(e(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(e){for(var t,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),t=i.children)for(n=0,r=t.length;n<r;++n)o.push(t[n]);for(;i=a.pop();)e(i);return this},eachBefore:function(e){for(var t,n,r=this,i=[r];r=i.pop();)if(e(r),t=r.children)for(n=t.length-1;n>=0;--n)i.push(t[n]);return this},sum:function(e){return this.eachAfter(function(t){for(var n=+e(t.data)||0,r=t.children,i=r&&r.length;--i>=0;)n+=r[i].value;t.value=n})},sort:function(e){return this.eachBefore(function(t){t.children&&t.children.sort(e)})},path:function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),i=null;for(e=n.pop(),t=r.pop();e===t;)i=e,e=n.pop(),t=r.pop();return i}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var i=r.length;e!==n;)r.splice(i,0,e),e=e.parent;return r},ancestors:function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t},descendants:function(){var e=[];return this.each(function(t){e.push(t)}),e},leaves:function(){var e=[];return this.eachBefore(function(t){t.children||e.push(t)}),e},links:function(){var e=this,t=[];return e.each(function(n){n!==e&&t.push({source:n.parent,target:n})}),t},copy:function(){return pc(this).eachBefore(mc)}};var gc=Array.prototype.slice,bc=function(e){for(var t,n,r=0,i=(e=function(e){for(var t,n,r=e.length;r;)n=Math.random()*r--|0,t=e[r],e[r]=e[n],e[n]=t;return e}(gc.call(e))).length,o=[];r<i;)t=e[r],n&&wc(n,t)?++r:(n=Sc(o=_c(o,t)),r=0);return n};function _c(e,t){var n,r;if(Ec(t,e))return[t];for(n=0;n<e.length;++n)if(xc(t,e[n])&&Ec(Tc(e[n],t),e))return[e[n],t];for(n=0;n<e.length-1;++n)for(r=n+1;r<e.length;++r)if(xc(Tc(e[n],e[r]),t)&&xc(Tc(e[n],t),e[r])&&xc(Tc(e[r],t),e[n])&&Ec(kc(e[n],e[r],t),e))return[e[n],e[r],t];throw new Error}function xc(e,t){var n=e.r-t.r,r=t.x-e.x,i=t.y-e.y;return n<0||n*n<r*r+i*i}function wc(e,t){var n=e.r-t.r+1e-6,r=t.x-e.x,i=t.y-e.y;return n>0&&n*n>r*r+i*i}function Ec(e,t){for(var n=0;n<t.length;++n)if(!wc(e,t[n]))return!1;return!0}function Sc(e){switch(e.length){case 1:return{x:(t=e[0]).x,y:t.y,r:t.r};case 2:return Tc(e[0],e[1]);case 3:return kc(e[0],e[1],e[2])}var t}function Tc(e,t){var n=e.x,r=e.y,i=e.r,o=t.x,a=t.y,u=t.r,l=o-n,s=a-r,c=u-i,f=Math.sqrt(l*l+s*s);return{x:(n+o+l/f*c)/2,y:(r+a+s/f*c)/2,r:(f+i+u)/2}}function kc(e,t,n){var r=e.x,i=e.y,o=e.r,a=t.x,u=t.y,l=t.r,s=n.x,c=n.y,f=n.r,d=r-a,p=r-s,h=i-u,m=i-c,v=l-o,y=f-o,g=r*r+i*i-o*o,b=g-a*a-u*u+l*l,_=g-s*s-c*c+f*f,x=p*h-d*m,w=(h*_-m*b)/(2*x)-r,E=(m*v-h*y)/x,S=(p*b-d*_)/(2*x)-i,T=(d*y-p*v)/x,k=E*E+T*T-1,O=2*(o+w*E+S*T),C=w*w+S*S-o*o,M=-(k?(O+Math.sqrt(O*O-4*k*C))/(2*k):C/O);return{x:r+w+E*M,y:i+S+T*M,r:M}}function Oc(e,t,n){var r=e.x,i=e.y,o=t.r+n.r,a=e.r+n.r,u=t.x-r,l=t.y-i,s=u*u+l*l;if(s){var c=.5+((a*=a)-(o*=o))/(2*s),f=Math.sqrt(Math.max(0,2*o*(a+s)-(a-=s)*a-o*o))/(2*s);n.x=r+c*u+f*l,n.y=i+c*l-f*u}else n.x=r+a,n.y=i}function Cc(e,t){var n=t.x-e.x,r=t.y-e.y,i=e.r+t.r;return i*i-1e-6>n*n+r*r}function Mc(e){var t=e._,n=e.next._,r=t.r+n.r,i=(t.x*n.r+n.x*t.r)/r,o=(t.y*n.r+n.y*t.r)/r;return i*i+o*o}function Ac(e){this._=e,this.next=null,this.previous=null}function Nc(e){if(!(i=e.length))return 0;var t,n,r,i,o,a,u,l,s,c,f;if((t=e[0]).x=0,t.y=0,!(i>1))return t.r;if(n=e[1],t.x=-n.r,n.x=t.r,n.y=0,!(i>2))return t.r+n.r;Oc(n,t,r=e[2]),t=new Ac(t),n=new Ac(n),r=new Ac(r),t.next=r.previous=n,n.next=t.previous=r,r.next=n.previous=t;e:for(u=3;u<i;++u){Oc(t._,n._,r=e[u]),r=new Ac(r),l=n.next,s=t.previous,c=n._.r,f=t._.r;do{if(c<=f){if(Cc(l._,r._)){n=l,t.next=n,n.previous=t,--u;continue e}c+=l._.r,l=l.next}else{if(Cc(s._,r._)){(t=s).next=n,n.previous=t,--u;continue e}f+=s._.r,s=s.previous}}while(l!==s.next);for(r.previous=t,r.next=n,t.next=n.previous=n=r,o=Mc(t);(r=r.next)!==n;)(a=Mc(r))<o&&(t=r,o=a);n=t.next}for(t=[n._],r=n;(r=r.next)!==n;)t.push(r._);for(r=bc(t),u=0;u<i;++u)(t=e[u]).x-=r.x,t.y-=r.y;return r.r}function Pc(e){if("function"!=typeof e)throw new Error;return e}function Rc(){return 0}var Ic=function(e){return function(){return e}};function Fc(e){return Math.sqrt(e.value)}function jc(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function Dc(e,t){return function(n){if(r=n.children){var r,i,o,a=r.length,u=e(n)*t||0;if(u)for(i=0;i<a;++i)r[i].r+=u;if(o=Nc(r),u)for(i=0;i<a;++i)r[i].r-=u;n.r=o+u}}}function Uc(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}var zc=function(e){e.x0=Math.round(e.x0),e.y0=Math.round(e.y0),e.x1=Math.round(e.x1),e.y1=Math.round(e.y1)},Lc=function(e,t,n,r,i){for(var o,a=e.children,u=-1,l=a.length,s=e.value&&(r-t)/e.value;++u<l;)(o=a[u]).y0=n,o.y1=i,o.x0=t,o.x1=t+=o.value*s},Vc="$",qc={depth:-1},Bc={};function Wc(e){return e.id}function Yc(e){return e.parentId}function Hc(e,t){return e.parent===t.parent?1:2}function $c(e){var t=e.children;return t?t[0]:e.t}function Kc(e){var t=e.children;return t?t[t.length-1]:e.t}function Xc(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function Gc(e,t,n){return e.a.parent===t.parent?e.a:n}function Qc(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}Qc.prototype=Object.create(yc.prototype);var Zc=function(e,t,n,r,i){for(var o,a=e.children,u=-1,l=a.length,s=e.value&&(i-n)/e.value;++u<l;)(o=a[u]).x0=t,o.x1=r,o.y0=n,o.y1=n+=o.value*s},Jc=(1+Math.sqrt(5))/2;function ef(e,t,n,r,i,o){for(var a,u,l,s,c,f,d,p,h,m,v,y=[],g=t.children,b=0,_=0,x=g.length,w=t.value;b<x;){l=i-n,s=o-r;do{c=g[_++].value}while(!c&&_<x);for(f=d=c,m=Math.max(s/l,l/s)/(w*e),v=c*c*m,h=Math.max(d/v,v/f);_<x;++_){if(c+=u=g[_].value,u<f&&(f=u),u>d&&(d=u),v=c*c*m,(p=Math.max(d/v,v/f))>h){c-=u;break}h=p}y.push(a={value:c,dice:l<s,children:g.slice(b,_)}),a.dice?Lc(a,n,r,i,w?r+=s*c/w:o):Zc(a,n,r,w?n+=l*c/w:i,o),w-=c,b=_}return y}var tf=function e(t){function n(e,n,r,i,o){ef(t,e,n,r,i,o)}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(Jc),nf=function e(t){function n(e,n,r,i,o){if((a=e._squarify)&&a.ratio===t)for(var a,u,l,s,c,f=-1,d=a.length,p=e.value;++f<d;){for(u=a[f],l=u.children,s=u.value=0,c=l.length;s<c;++s)u.value+=l[s].value;u.dice?Lc(u,n,r,i,r+=(o-r)*u.value/p):Zc(u,n,r,n+=(i-n)*u.value/p,o),p-=u.value}else e._squarify=a=ef(t,e,n,r,i,o),a.ratio=t}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(Jc),rf=function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])};function of(e,t){return e[0]-t[0]||e[1]-t[1]}function af(e){for(var t=e.length,n=[0,1],r=2,i=2;i<t;++i){for(;r>1&&rf(e[n[r-2]],e[n[r-1]],e[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}var uf=[].slice,lf={};function sf(e){this._size=e,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function cf(e){if(!e._start)try{!function(e){for(;e._start=e._waiting&&e._active<e._size;){var t=e._ended+e._active,n=e._tasks[t],r=n.length-1,i=n[r];n[r]=ff(e,t),--e._waiting,++e._active,n=i.apply(null,n),e._tasks[t]&&(e._tasks[t]=n||lf)}}(e)}catch(t){if(e._tasks[e._ended+e._active-1])df(e,t);else if(!e._data)throw t}}function ff(e,t){return function(n,r){e._tasks[t]&&(--e._active,++e._ended,e._tasks[t]=null,null==e._error&&(null!=n?df(e,n):(e._data[t]=r,e._waiting?cf(e):pf(e))))}}function df(e,t){var n,r=e._tasks.length;for(e._error=t,e._data=void 0,e._waiting=NaN;--r>=0;)if((n=e._tasks[r])&&(e._tasks[r]=null,n.abort))try{n.abort()}catch(t){}e._active=NaN,pf(e)}function pf(e){if(!e._active&&e._call){var t=e._data;e._data=void 0,e._call(e._error,t)}}function hf(e){if(null==e)e=1/0;else if(!((e=+e)>=1))throw new Error("invalid concurrency");return new sf(e)}sf.prototype=hf.prototype={constructor:sf,defer:function(e){if("function"!=typeof e)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var t=uf.call(arguments,1);return t.push(e),++this._waiting,this._tasks.push(t),cf(this),this},abort:function(){return null==this._error&&df(this,new Error("abort")),this},await:function(e){if("function"!=typeof e)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(t,n){e.apply(null,[t].concat(n))},pf(this),this},awaitAll:function(e){if("function"!=typeof e)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=e,pf(this),this}};var mf=function(){return Math.random()},vf=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(mf),yf=function e(t){function n(e,n){var r,i;return e=null==e?0:+e,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*t()-1,o=2*t()-1,i=r*r+o*o}while(!i||i>1);return e+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=e,n}(mf),gf=function e(t){function n(){var e=yf.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(mf),bf=function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(mf),_f=function e(t){function n(e){var n=bf.source(t)(e);return function(){return n()/e}}return n.source=e,n}(mf),xf=function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(mf),wf=function(e,t){var n,r,i,o,a=V("beforesend","progress","load","error"),u=$i(),l=new XMLHttpRequest,s=null,c=null,f=0;function d(e){var t,r=l.status;if(!r&&function(e){var t=e.responseType;return t&&"text"!==t?e.response:e.responseText}(l)||r>=200&&r<300||304===r){if(i)try{t=i.call(n,l)}catch(e){return void a.call("error",n,e)}else t=l;a.call("load",n,t)}else a.call("error",n,e)}if("undefined"==typeof XDomainRequest||"withCredentials"in l||!/^(http(s)?:)?\/\//.test(e)||(l=new XDomainRequest),"onload"in l?l.onload=l.onerror=l.ontimeout=d:l.onreadystatechange=function(e){l.readyState>3&&d(e)},l.onprogress=function(e){a.call("progress",n,e)},n={header:function(e,t){return e=(e+"").toLowerCase(),arguments.length<2?u.get(e):(null==t?u.remove(e):u.set(e,t+""),n)},mimeType:function(e){return arguments.length?(r=null==e?null:e+"",n):r},responseType:function(e){return arguments.length?(o=e,n):o},timeout:function(e){return arguments.length?(f=+e,n):f},user:function(e){return arguments.length<1?s:(s=null==e?null:e+"",n)},password:function(e){return arguments.length<1?c:(c=null==e?null:e+"",n)},response:function(e){return i=e,n},get:function(e,t){return n.send("GET",e,t)},post:function(e,t){return n.send("POST",e,t)},send:function(t,i,d){return l.open(t,e,!0,s,c),null==r||u.has("accept")||u.set("accept",r+",*/*"),l.setRequestHeader&&u.each(function(e,t){l.setRequestHeader(t,e)}),null!=r&&l.overrideMimeType&&l.overrideMimeType(r),null!=o&&(l.responseType=o),f>0&&(l.timeout=f),null==d&&"function"==typeof i&&(d=i,i=null),null!=d&&1===d.length&&(d=function(e){return function(t,n){e(null==t?n:null)}}(d)),null!=d&&n.on("error",d).on("load",function(e){d(null,e)}),a.call("beforesend",n,l),l.send(null==i?null:i),n},abort:function(){return l.abort(),n},on:function(){var e=a.on.apply(a,arguments);return e===a?n:e}},null!=t){if("function"!=typeof t)throw new Error("invalid callback: "+t);return n.get(t)}return n},Ef=function(e,t){return function(n,r){var i=wf(n).mimeType(e).response(t);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},Sf=Ef("text/html",function(e){return document.createRange().createContextualFragment(e.responseText)}),Tf=Ef("application/json",function(e){return JSON.parse(e.responseText)}),kf=Ef("text/plain",function(e){return e.responseText}),Of=Ef("application/xml",function(e){var t=e.responseXML;if(!t)throw new Error("parse error");return t}),Cf=function(e,t){return function(n,r,i){arguments.length<3&&(i=r,r=null);var o=wf(n).mimeType(e);return o.row=function(e){return arguments.length?o.response(function(e,t){return function(n){return e(n.responseText,t)}}(t,r=e)):r},o.row(r),i?o.get(i):o}},Mf=Cf("text/csv",io),Af=Cf("text/tab-separated-values",so),Nf=Array.prototype,Pf=Nf.map,Rf=Nf.slice,If={name:"implicit"};function Ff(e){var t=$i(),n=[],r=If;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==If)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return e=null==e?[]:Rf.call(e),i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=$i();for(var r,o,a=-1,u=e.length;++a<u;)t.has(o=(r=e[a])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=Rf.call(t),i):e.slice()},i.unknown=function(e){return arguments.length?(r=e,i):r},i.copy=function(){return Ff().domain(n).range(e).unknown(r)},i}function jf(){var e,t,n=Ff().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,u=0,l=0,s=.5;function c(){var n=r().length,c=o[1]<o[0],f=o[c-0],d=o[1-c];e=(d-f)/Math.max(1,n-u+2*l),a&&(e=Math.floor(e)),f+=(d-f-e*(n-u))*s,t=e*(1-u),a&&(f=Math.round(f),t=Math.round(t));var p=v(n).map(function(t){return f+e*t});return i(c?p.reverse():p)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),c()):r()},n.range=function(e){return arguments.length?(o=[+e[0],+e[1]],c()):o.slice()},n.rangeRound=function(e){return o=[+e[0],+e[1]],a=!0,c()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(a=!!e,c()):a},n.padding=function(e){return arguments.length?(u=l=Math.max(0,Math.min(1,e)),c()):u},n.paddingInner=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),c()):u},n.paddingOuter=function(e){return arguments.length?(l=Math.max(0,Math.min(1,e)),c()):l},n.align=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),c()):s},n.copy=function(){return jf().domain(r()).range(o).round(a).paddingInner(u).paddingOuter(l).align(s)},c()}var Df=function(e){return function(){return e}},Uf=function(e){return+e},zf=[0,1];function Lf(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:Df(t)}function Vf(e,t,n,r){var i=e[0],o=e[1],a=t[0],u=t[1];return o<i?(i=n(o,i),a=r(u,a)):(i=n(i,o),a=r(a,u)),function(e){return a(i(e))}}function qf(e,t,n,r){var o=Math.min(e.length,t.length)-1,a=new Array(o),u=new Array(o),l=-1;for(e[o]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++l<o;)a[l]=n(e[l],e[l+1]),u[l]=r(t[l],t[l+1]);return function(t){var n=i(e,t,1,o)-1;return u[n](a[n](t))}}function Bf(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp())}function Wf(e,t){var n,r,i,o=zf,a=zf,u=xn,l=!1;function s(){return n=Math.min(o.length,a.length)>2?qf:Vf,r=i=null,c}function c(t){return(r||(r=n(o,a,l?function(e){return function(t,n){var r=e(t=+t,n=+n);return function(e){return e<=t?0:e>=n?1:r(e)}}}(e):e,u)))(+t)}return c.invert=function(e){return(i||(i=n(a,o,Lf,l?function(e){return function(t,n){var r=e(t=+t,n=+n);return function(e){return e<=0?t:e>=1?n:r(e)}}}(t):t)))(+e)},c.domain=function(e){return arguments.length?(o=Pf.call(e,Uf),s()):o.slice()},c.range=function(e){return arguments.length?(a=Rf.call(e),s()):a.slice()},c.rangeRound=function(e){return a=Rf.call(e),u=wn,s()},c.clamp=function(e){return arguments.length?(l=!!e,s()):l},c.interpolate=function(e){return arguments.length?(u=e,s()):u},s()}var Yf=function(t,n,r){var i,o=t[0],a=t[t.length-1],u=w(o,a,null==n?10:n);switch((r=Uo(null==r?",f":r)).type){case"s":var l=Math.max(Math.abs(o),Math.abs(a));return null!=r.precision||isNaN(i=Ho(u,l))||(r.precision=i),e.formatPrefix(r,l);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=$o(u,Math.max(Math.abs(o),Math.abs(a))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=Yo(u))||(r.precision=i-2*("%"===r.type))}return e.format(r)};function Hf(e){var t=e.domain;return e.ticks=function(e){var n=t();return _(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){return Yf(t(),e,n)},e.nice=function(n){null==n&&(n=10);var r,i=t(),o=0,a=i.length-1,u=i[o],l=i[a];return l<u&&(r=u,u=l,l=r,r=o,o=a,a=r),(r=x(u,l,n))>0?(u=Math.floor(u/r)*r,l=Math.ceil(l/r)*r,r=x(u,l,n)):r<0&&(u=Math.ceil(u*r)/r,l=Math.floor(l*r)/r,r=x(u,l,n)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(l/r)*r,t(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(l*r)/r,t(i)),e},e}var $f=function(e,t){var n,r=0,i=(e=e.slice()).length-1,o=e[r],a=e[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),e[r]=t.floor(o),e[i]=t.ceil(a),e};function Kf(e,t){return(t=Math.log(t/e))?function(n){return Math.log(n/e)/t}:Df(t)}function Xf(e,t){return e<0?function(n){return-Math.pow(-t,n)*Math.pow(-e,1-n)}:function(n){return Math.pow(t,n)*Math.pow(e,1-n)}}function Gf(e){return isFinite(e)?+("1e"+e):e<0?0:e}function Qf(e){return 10===e?Gf:e===Math.E?Math.exp:function(t){return Math.pow(e,t)}}function Zf(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),function(t){return Math.log(t)/e})}function Jf(e){return function(t){return-e(-t)}}function ed(e,t){return e<0?-Math.pow(-e,t):Math.pow(e,t)}function td(){var e=1,t=Wf(function(t,n){return(n=ed(n,e)-(t=ed(t,e)))?function(r){return(ed(r,e)-t)/n}:Df(n)},function(t,n){return n=ed(n,e)-(t=ed(t,e)),function(r){return ed(t+n*r,1/e)}}),n=t.domain;return t.exponent=function(t){return arguments.length?(e=+t,n(n())):e},t.copy=function(){return Bf(t,td().exponent(e))},Hf(t)}var nd=new Date,rd=new Date;function id(e,t,n,r){function i(t){return e(t=new Date(+t)),t}return i.floor=i,i.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},i.round=function(e){var t=i(e),n=i.ceil(e);return e-t<n-e?t:n},i.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},i.range=function(n,r,o){var a=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return a;do{a.push(new Date(+n))}while(t(n,o),e(n),n<r);return a},i.filter=function(n){return id(function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)},function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););})},n&&(i.count=function(t,r){return nd.setTime(+t),rd.setTime(+r),e(nd),e(rd),Math.floor(n(nd,rd))},i.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?i.filter(r?function(t){return r(t)%e==0}:function(t){return i.count(0,t)%e==0}):i:null}),i}var od=id(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});od.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?id(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):od:null};var ad=od.range,ud=6e4,ld=6048e5,sd=id(function(e){e.setTime(1e3*Math.floor(e/1e3))},function(e,t){e.setTime(+e+1e3*t)},function(e,t){return(t-e)/1e3},function(e){return e.getUTCSeconds()}),cd=sd.range,fd=id(function(e){e.setTime(Math.floor(e/ud)*ud)},function(e,t){e.setTime(+e+t*ud)},function(e,t){return(t-e)/ud},function(e){return e.getMinutes()}),dd=fd.range,pd=id(function(e){var t=e.getTimezoneOffset()*ud%36e5;t<0&&(t+=36e5),e.setTime(36e5*Math.floor((+e-t)/36e5)+t)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getHours()}),hd=pd.range,md=id(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*ud)/864e5},function(e){return e.getDate()-1}),vd=md.range;function yd(e){return id(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*ud)/ld})}var gd=yd(0),bd=yd(1),_d=yd(2),xd=yd(3),wd=yd(4),Ed=yd(5),Sd=yd(6),Td=gd.range,kd=bd.range,Od=_d.range,Cd=xd.range,Md=wd.range,Ad=Ed.range,Nd=Sd.range,Pd=id(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()}),Rd=Pd.range,Id=id(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()});Id.every=function(e){return isFinite(e=Math.floor(e))&&e>0?id(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};var Fd=Id.range,jd=id(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*ud)},function(e,t){return(t-e)/ud},function(e){return e.getUTCMinutes()}),Dd=jd.range,Ud=id(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getUTCHours()}),zd=Ud.range,Ld=id(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/864e5},function(e){return e.getUTCDate()-1}),Vd=Ld.range;function qd(e){return id(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/ld})}var Bd=qd(0),Wd=qd(1),Yd=qd(2),Hd=qd(3),$d=qd(4),Kd=qd(5),Xd=qd(6),Gd=Bd.range,Qd=Wd.range,Zd=Yd.range,Jd=Hd.range,ep=$d.range,tp=Kd.range,np=Xd.range,rp=id(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()}),ip=rp.range,op=id(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()});op.every=function(e){return isFinite(e=Math.floor(e))&&e>0?id(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var ap=op.range;function up(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function lp(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function sp(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}function cp(e){var t=e.dateTime,n=e.date,r=e.time,i=e.periods,o=e.days,a=e.shortDays,u=e.months,l=e.shortMonths,s=gp(i),c=bp(i),f=gp(o),d=bp(o),p=gp(a),h=bp(a),m=gp(u),v=bp(u),y=gp(l),g=bp(l),b={a:function(e){return a[e.getDay()]},A:function(e){return o[e.getDay()]},b:function(e){return l[e.getMonth()]},B:function(e){return u[e.getMonth()]},c:null,d:Ip,e:Ip,H:Fp,I:jp,j:Dp,L:Up,m:zp,M:Lp,p:function(e){return i[+(e.getHours()>=12)]},S:Vp,U:qp,w:Bp,W:Wp,x:null,X:null,y:Yp,Y:Hp,Z:$p,"%":lh},_={a:function(e){return a[e.getUTCDay()]},A:function(e){return o[e.getUTCDay()]},b:function(e){return l[e.getUTCMonth()]},B:function(e){return u[e.getUTCMonth()]},c:null,d:Kp,e:Kp,H:Xp,I:Gp,j:Qp,L:Zp,m:Jp,M:eh,p:function(e){return i[+(e.getUTCHours()>=12)]},S:th,U:nh,w:rh,W:ih,x:null,X:null,y:oh,Y:ah,Z:uh,"%":lh},x={a:function(e,t,n){var r=p.exec(t.slice(n));return r?(e.w=h[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=y.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=m.exec(t.slice(n));return r?(e.m=v[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return S(e,t,n,r)},d:Op,e:Op,H:Mp,I:Mp,j:Cp,L:Pp,m:kp,M:Ap,p:function(e,t,n){var r=s.exec(t.slice(n));return r?(e.p=c[r[0].toLowerCase()],n+r[0].length):-1},S:Np,U:xp,w:_p,W:wp,x:function(e,t,r){return S(e,n,t,r)},X:function(e,t,n){return S(e,r,t,n)},y:Sp,Y:Ep,Z:Tp,"%":Rp};function w(e,t){return function(n){var r,i,o,a=[],u=-1,l=0,s=e.length;for(n instanceof Date||(n=new Date(+n));++u<s;)37===e.charCodeAt(u)&&(a.push(e.slice(l,u)),null!=(i=dp[r=e.charAt(++u)])?r=e.charAt(++u):i="e"===r?" ":"0",(o=t[r])&&(r=o(n,i)),a.push(r),l=u+1);return a.push(e.slice(l,u)),a.join("")}}function E(e,t){return function(n){var r=sp(1900),i=S(r,e,n+="",0);if(i!=n.length)return null;if("p"in r&&(r.H=r.H%12+12*r.p),"W"in r||"U"in r){"w"in r||(r.w="W"in r?1:0);var o="Z"in r?lp(sp(r.y)).getUTCDay():t(sp(r.y)).getDay();r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(o+5)%7:r.w+7*r.U-(o+6)%7}return"Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,lp(r)):t(r)}}function S(e,t,n,r){for(var i,o,a=0,u=t.length,l=n.length;a<u;){if(r>=l)return-1;if(37===(i=t.charCodeAt(a++))){if(i=t.charAt(a++),!(o=x[i in dp?t.charAt(a++):i])||(r=o(e,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return b.x=w(n,b),b.X=w(r,b),b.c=w(t,b),_.x=w(n,_),_.X=w(r,_),_.c=w(t,_),{format:function(e){var t=w(e+="",b);return t.toString=function(){return e},t},parse:function(e){var t=E(e+="",up);return t.toString=function(){return e},t},utcFormat:function(e){var t=w(e+="",_);return t.toString=function(){return e},t},utcParse:function(e){var t=E(e,lp);return t.toString=function(){return e},t}}}var fp,dp={"-":"",_:" ",0:"0"},pp=/^\s*\d+/,hp=/^%/,mp=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;function vp(e,t,n){var r=e<0?"-":"",i=(r?-e:e)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(t)+i:i)}function yp(e){return e.replace(mp,"\\$&")}function gp(e){return new RegExp("^(?:"+e.map(yp).join("|")+")","i")}function bp(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function _p(e,t,n){var r=pp.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function xp(e,t,n){var r=pp.exec(t.slice(n));return r?(e.U=+r[0],n+r[0].length):-1}function wp(e,t,n){var r=pp.exec(t.slice(n));return r?(e.W=+r[0],n+r[0].length):-1}function Ep(e,t,n){var r=pp.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function Sp(e,t,n){var r=pp.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Tp(e,t,n){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function kp(e,t,n){var r=pp.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function Op(e,t,n){var r=pp.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function Cp(e,t,n){var r=pp.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function Mp(e,t,n){var r=pp.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function Ap(e,t,n){var r=pp.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function Np(e,t,n){var r=pp.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function Pp(e,t,n){var r=pp.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function Rp(e,t,n){var r=hp.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function Ip(e,t){return vp(e.getDate(),t,2)}function Fp(e,t){return vp(e.getHours(),t,2)}function jp(e,t){return vp(e.getHours()%12||12,t,2)}function Dp(e,t){return vp(1+md.count(Id(e),e),t,3)}function Up(e,t){return vp(e.getMilliseconds(),t,3)}function zp(e,t){return vp(e.getMonth()+1,t,2)}function Lp(e,t){return vp(e.getMinutes(),t,2)}function Vp(e,t){return vp(e.getSeconds(),t,2)}function qp(e,t){return vp(gd.count(Id(e),e),t,2)}function Bp(e){return e.getDay()}function Wp(e,t){return vp(bd.count(Id(e),e),t,2)}function Yp(e,t){return vp(e.getFullYear()%100,t,2)}function Hp(e,t){return vp(e.getFullYear()%1e4,t,4)}function $p(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+vp(t/60|0,"0",2)+vp(t%60,"0",2)}function Kp(e,t){return vp(e.getUTCDate(),t,2)}function Xp(e,t){return vp(e.getUTCHours(),t,2)}function Gp(e,t){return vp(e.getUTCHours()%12||12,t,2)}function Qp(e,t){return vp(1+Ld.count(op(e),e),t,3)}function Zp(e,t){return vp(e.getUTCMilliseconds(),t,3)}function Jp(e,t){return vp(e.getUTCMonth()+1,t,2)}function eh(e,t){return vp(e.getUTCMinutes(),t,2)}function th(e,t){return vp(e.getUTCSeconds(),t,2)}function nh(e,t){return vp(Bd.count(op(e),e),t,2)}function rh(e){return e.getUTCDay()}function ih(e,t){return vp(Wd.count(op(e),e),t,2)}function oh(e,t){return vp(e.getUTCFullYear()%100,t,2)}function ah(e,t){return vp(e.getUTCFullYear()%1e4,t,4)}function uh(){return"+0000"}function lh(){return"%"}function sh(t){return fp=cp(t),e.timeFormat=fp.format,e.timeParse=fp.parse,e.utcFormat=fp.utcFormat,e.utcParse=fp.utcParse,fp}sh({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ch=Date.prototype.toISOString?function(e){return e.toISOString()}:e.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ"),fh=+new Date("2000-01-01T00:00:00.000Z")?function(e){var t=new Date(e);return isNaN(t)?null:t}:e.utcParse("%Y-%m-%dT%H:%M:%S.%LZ"),dh=1e3,ph=60*dh,hh=60*ph,mh=24*hh,vh=7*mh,yh=30*mh,gh=365*mh;function bh(e){return new Date(e)}function _h(e){return e instanceof Date?+e:+new Date(+e)}function xh(e,t,r,i,o,a,u,l,s){var c=Wf(Lf,vn),f=c.invert,d=c.domain,p=s(".%L"),h=s(":%S"),m=s("%I:%M"),v=s("%I %p"),y=s("%a %d"),g=s("%b %d"),b=s("%B"),_=s("%Y"),x=[[u,1,dh],[u,5,5*dh],[u,15,15*dh],[u,30,30*dh],[a,1,ph],[a,5,5*ph],[a,15,15*ph],[a,30,30*ph],[o,1,hh],[o,3,3*hh],[o,6,6*hh],[o,12,12*hh],[i,1,mh],[i,2,2*mh],[r,1,vh],[t,1,yh],[t,3,3*yh],[e,1,gh]];function E(n){return(u(n)<n?p:a(n)<n?h:o(n)<n?m:i(n)<n?v:t(n)<n?r(n)<n?y:g:e(n)<n?b:_)(n)}function S(t,r,i,o){if(null==t&&(t=10),"number"==typeof t){var a=Math.abs(i-r)/t,u=n(function(e){return e[2]}).right(x,a);u===x.length?(o=w(r/gh,i/gh,t),t=e):u?(u=x[a/x[u-1][2]<x[u][2]/a?u-1:u],o=u[1],t=u[0]):(o=w(r,i,t),t=l)}return null==o?t:t.every(o)}return c.invert=function(e){return new Date(f(e))},c.domain=function(e){return arguments.length?d(Pf.call(e,_h)):d().map(bh)},c.ticks=function(e,t){var n,r=d(),i=r[0],o=r[r.length-1],a=o<i;return a&&(n=i,i=o,o=n),n=(n=S(e,i,o,t))?n.range(i,o+1):[],a?n.reverse():n},c.tickFormat=function(e,t){return null==t?E:s(t)},c.nice=function(e,t){var n=d();return(e=S(e,n[0],n[n.length-1],t))?d($f(n,e)):c},c.copy=function(){return Bf(c,xh(e,t,r,i,o,a,u,l,s))},c}var wh=function(e){return e.match(/.{6}/g).map(function(e){return"#"+e})},Eh=wh("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Sh=wh("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),Th=wh("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),kh=wh("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Oh=qn(Xt(300,.5,0),Xt(-240,.5,1)),Ch=qn(Xt(-100,.75,.35),Xt(80,1.5,.8)),Mh=qn(Xt(260,.75,.35),Xt(80,1.5,.8)),Ah=Xt();function Nh(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}var Ph=Nh(wh("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Rh=Nh(wh("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ih=Nh(wh("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Fh=Nh(wh("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),jh=function(e){return function(){return e}},Dh=Math.abs,Uh=Math.atan2,zh=Math.cos,Lh=Math.max,Vh=Math.min,qh=Math.sin,Bh=Math.sqrt,Wh=1e-12,Yh=Math.PI,Hh=Yh/2,$h=2*Yh;function Kh(e){return e>=1?Hh:e<=-1?-Hh:Math.asin(e)}function Xh(e){return e.innerRadius}function Gh(e){return e.outerRadius}function Qh(e){return e.startAngle}function Zh(e){return e.endAngle}function Jh(e){return e&&e.padAngle}function em(e,t,n,r,i,o,a){var u=e-n,l=t-r,s=(a?o:-o)/Bh(u*u+l*l),c=s*l,f=-s*u,d=e+c,p=t+f,h=n+c,m=r+f,v=(d+h)/2,y=(p+m)/2,g=h-d,b=m-p,_=g*g+b*b,x=i-o,w=d*m-h*p,E=(b<0?-1:1)*Bh(Lh(0,x*x*_-w*w)),S=(w*b-g*E)/_,T=(-w*g-b*E)/_,k=(w*b+g*E)/_,O=(-w*g+b*E)/_,C=S-v,M=T-y,A=k-v,N=O-y;return C*C+M*M>A*A+N*N&&(S=k,T=O),{cx:S,cy:T,x01:-c,y01:-f,x11:S*(i/x-1),y11:T*(i/x-1)}}function tm(e){this._context=e}tm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var nm=function(e){return new tm(e)};function rm(e){return e[0]}function im(e){return e[1]}var om=function(){var e=rm,t=im,n=jh(!0),r=null,i=nm,o=null;function a(a){var u,l,s,c=a.length,f=!1;for(null==r&&(o=i(s=Li())),u=0;u<=c;++u)!(u<c&&n(l=a[u],u,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+e(l,u,a),+t(l,u,a));if(s)return o=null,s+""||null}return a.x=function(t){return arguments.length?(e="function"==typeof t?t:jh(+t),a):e},a.y=function(e){return arguments.length?(t="function"==typeof e?e:jh(+e),a):t},a.defined=function(e){return arguments.length?(n="function"==typeof e?e:jh(!!e),a):n},a.curve=function(e){return arguments.length?(i=e,null!=r&&(o=i(r)),a):i},a.context=function(e){return arguments.length?(null==e?r=o=null:o=i(r=e),a):r},a},am=function(){var e=rm,t=null,n=jh(0),r=im,i=jh(!0),o=null,a=nm,u=null;function l(l){var s,c,f,d,p,h=l.length,m=!1,v=new Array(h),y=new Array(h);for(null==o&&(u=a(p=Li())),s=0;s<=h;++s){if(!(s<h&&i(d=l[s],s,l))===m)if(m=!m)c=s,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),f=s-1;f>=c;--f)u.point(v[f],y[f]);u.lineEnd(),u.areaEnd()}m&&(v[s]=+e(d,s,l),y[s]=+n(d,s,l),u.point(t?+t(d,s,l):v[s],r?+r(d,s,l):y[s]))}if(p)return u=null,p+""||null}function s(){return om().defined(i).curve(a).context(o)}return l.x=function(n){return arguments.length?(e="function"==typeof n?n:jh(+n),t=null,l):e},l.x0=function(t){return arguments.length?(e="function"==typeof t?t:jh(+t),l):e},l.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:jh(+e),l):t},l.y=function(e){return arguments.length?(n="function"==typeof e?e:jh(+e),r=null,l):n},l.y0=function(e){return arguments.length?(n="function"==typeof e?e:jh(+e),l):n},l.y1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:jh(+e),l):r},l.lineX0=l.lineY0=function(){return s().x(e).y(n)},l.lineY1=function(){return s().x(e).y(r)},l.lineX1=function(){return s().x(t).y(n)},l.defined=function(e){return arguments.length?(i="function"==typeof e?e:jh(!!e),l):i},l.curve=function(e){return arguments.length?(a=e,null!=o&&(u=a(o)),l):a},l.context=function(e){return arguments.length?(null==e?o=u=null:u=a(o=e),l):o},l},um=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},lm=function(e){return e},sm=fm(nm);function cm(e){this._curve=e}function fm(e){function t(t){return new cm(e(t))}return t._curve=e,t}function dm(e){var t=e.curve;return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e.curve=function(e){return arguments.length?t(fm(e)):t()._curve},e}cm.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}};var pm=function(){return dm(om().curve(sm))},hm=function(){var e=am().curve(sm),t=e.curve,n=e.lineX0,r=e.lineX1,i=e.lineY0,o=e.lineY1;return e.angle=e.x,delete e.x,e.startAngle=e.x0,delete e.x0,e.endAngle=e.x1,delete e.x1,e.radius=e.y,delete e.y,e.innerRadius=e.y0,delete e.y0,e.outerRadius=e.y1,delete e.y1,e.lineStartAngle=function(){return dm(n())},delete e.lineX0,e.lineEndAngle=function(){return dm(r())},delete e.lineX1,e.lineInnerRadius=function(){return dm(i())},delete e.lineY0,e.lineOuterRadius=function(){return dm(o())},delete e.lineY1,e.curve=function(e){return arguments.length?t(fm(e)):t()._curve},e},mm=function(e,t){return[(t=+t)*Math.cos(e-=Math.PI/2),t*Math.sin(e)]},vm=Array.prototype.slice;function ym(e){return e.source}function gm(e){return e.target}function bm(e){var t=ym,n=gm,r=rm,i=im,o=null;function a(){var a,u=vm.call(arguments),l=t.apply(this,u),s=n.apply(this,u);if(o||(o=a=Li()),e(o,+r.apply(this,(u[0]=l,u)),+i.apply(this,u),+r.apply(this,(u[0]=s,u)),+i.apply(this,u)),a)return o=null,a+""||null}return a.source=function(e){return arguments.length?(t=e,a):t},a.target=function(e){return arguments.length?(n=e,a):n},a.x=function(e){return arguments.length?(r="function"==typeof e?e:jh(+e),a):r},a.y=function(e){return arguments.length?(i="function"==typeof e?e:jh(+e),a):i},a.context=function(e){return arguments.length?(o=null==e?null:e,a):o},a}function _m(e,t,n,r,i){e.moveTo(t,n),e.bezierCurveTo(t=(t+r)/2,n,t,i,r,i)}function xm(e,t,n,r,i){e.moveTo(t,n),e.bezierCurveTo(t,n=(n+i)/2,r,n,r,i)}function wm(e,t,n,r,i){var o=mm(t,n),a=mm(t,n=(n+i)/2),u=mm(r,n),l=mm(r,i);e.moveTo(o[0],o[1]),e.bezierCurveTo(a[0],a[1],u[0],u[1],l[0],l[1])}var Em={draw:function(e,t){var n=Math.sqrt(t/Yh);e.moveTo(n,0),e.arc(0,0,n,0,$h)}},Sm={draw:function(e,t){var n=Math.sqrt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},Tm=Math.sqrt(1/3),km=2*Tm,Om={draw:function(e,t){var n=Math.sqrt(t/km),r=n*Tm;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},Cm=Math.sin(Yh/10)/Math.sin(7*Yh/10),Mm=Math.sin($h/10)*Cm,Am=-Math.cos($h/10)*Cm,Nm={draw:function(e,t){var n=Math.sqrt(.8908130915292852*t),r=Mm*n,i=Am*n;e.moveTo(0,-n),e.lineTo(r,i);for(var o=1;o<5;++o){var a=$h*o/5,u=Math.cos(a),l=Math.sin(a);e.lineTo(l*n,-u*n),e.lineTo(u*r-l*i,l*r+u*i)}e.closePath()}},Pm={draw:function(e,t){var n=Math.sqrt(t),r=-n/2;e.rect(r,r,n,n)}},Rm=Math.sqrt(3),Im={draw:function(e,t){var n=-Math.sqrt(t/(3*Rm));e.moveTo(0,2*n),e.lineTo(-Rm*n,-n),e.lineTo(Rm*n,-n),e.closePath()}},Fm=-.5,jm=Math.sqrt(3)/2,Dm=1/Math.sqrt(12),Um=3*(Dm/2+1),zm={draw:function(e,t){var n=Math.sqrt(t/Um),r=n/2,i=n*Dm,o=r,a=n*Dm+n,u=-o,l=a;e.moveTo(r,i),e.lineTo(o,a),e.lineTo(u,l),e.lineTo(Fm*r-jm*i,jm*r+Fm*i),e.lineTo(Fm*o-jm*a,jm*o+Fm*a),e.lineTo(Fm*u-jm*l,jm*u+Fm*l),e.lineTo(Fm*r+jm*i,Fm*i-jm*r),e.lineTo(Fm*o+jm*a,Fm*a-jm*o),e.lineTo(Fm*u+jm*l,Fm*l-jm*u),e.closePath()}},Lm=[Em,Sm,Om,Pm,Nm,Im,zm],Vm=function(){};function qm(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function Bm(e){this._context=e}function Wm(e){this._context=e}function Ym(e){this._context=e}function Hm(e,t){this._basis=new Bm(e),this._beta=t}Bm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:qm(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:qm(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},Wm.prototype={areaStart:Vm,areaEnd:Vm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:qm(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},Ym.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:qm(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},Hm.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r,i=e[0],o=t[0],a=e[n]-i,u=t[n]-o,l=-1;++l<=n;)r=l/n,this._basis.point(this._beta*e[l]+(1-this._beta)*(i+r*a),this._beta*t[l]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}};var $m=function e(t){function n(e){return 1===t?new Bm(e):new Hm(e,t)}return n.beta=function(t){return e(+t)},n}(.85);function Km(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function Xm(e,t){this._context=e,this._k=(1-t)/6}Xm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Km(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:Km(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Gm=function e(t){function n(e){return new Xm(e,t)}return n.tension=function(t){return e(+t)},n}(0);function Qm(e,t){this._context=e,this._k=(1-t)/6}Qm.prototype={areaStart:Vm,areaEnd:Vm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Km(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Zm=function e(t){function n(e){return new Qm(e,t)}return n.tension=function(t){return e(+t)},n}(0);function Jm(e,t){this._context=e,this._k=(1-t)/6}Jm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Km(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var ev=function e(t){function n(e){return new Jm(e,t)}return n.tension=function(t){return e(+t)},n}(0);function tv(e,t,n){var r=e._x1,i=e._y1,o=e._x2,a=e._y2;if(e._l01_a>Wh){var u=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,l=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*u-e._x0*e._l12_2a+e._x2*e._l01_2a)/l,i=(i*u-e._y0*e._l12_2a+e._y2*e._l01_2a)/l}if(e._l23_a>Wh){var s=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,c=3*e._l23_a*(e._l23_a+e._l12_a);o=(o*s+e._x1*e._l23_2a-t*e._l12_2a)/c,a=(a*s+e._y1*e._l23_2a-n*e._l12_2a)/c}e._context.bezierCurveTo(r,i,o,a,e._x2,e._y2)}function nv(e,t){this._context=e,this._alpha=t}nv.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:tv(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var rv=function e(t){function n(e){return t?new nv(e,t):new Xm(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function iv(e,t){this._context=e,this._alpha=t}iv.prototype={areaStart:Vm,areaEnd:Vm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:tv(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var ov=function e(t){function n(e){return t?new iv(e,t):new Qm(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function av(e,t){this._context=e,this._alpha=t}av.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:tv(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var uv=function e(t){function n(e){return t?new av(e,t):new Jm(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function lv(e){this._context=e}function sv(e){return e<0?-1:1}function cv(e,t,n){var r=e._x1-e._x0,i=t-e._x1,o=(e._y1-e._y0)/(r||i<0&&-0),a=(n-e._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(sv(o)+sv(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function fv(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function dv(e,t,n){var r=e._x0,i=e._y0,o=e._x1,a=e._y1,u=(o-r)/3;e._context.bezierCurveTo(r+u,i+u*t,o-u,a-u*n,o,a)}function pv(e){this._context=e}function hv(e){this._context=new mv(e)}function mv(e){this._context=e}function vv(e){this._context=e}function yv(e){var t,n,r=e.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=e[0]+2*e[1],t=1;t<r-1;++t)i[t]=1,o[t]=4,a[t]=4*e[t]+2*e[t+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=i[t]/o[t-1],o[t]-=n,a[t]-=n*a[t-1];for(i[r-1]=a[r-1]/o[r-1],t=r-2;t>=0;--t)i[t]=(a[t]-i[t+1])/o[t];for(o[r-1]=(e[r]+i[r-1])/2,t=0;t<r-1;++t)o[t]=2*e[t+1]-i[t+1];return[i,o]}function gv(e,t){this._context=e,this._t=t}lv.prototype={areaStart:Vm,areaEnd:Vm,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}},pv.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:dv(this,this._t0,fv(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,dv(this,fv(this,n=cv(this,e,t)),n);break;default:dv(this,this._t0,n=cv(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(hv.prototype=Object.create(pv.prototype)).point=function(e,t){pv.prototype.point.call(this,t,e)},mv.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,i,o){this._context.bezierCurveTo(t,e,r,n,o,i)}},vv.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=yv(e),i=yv(t),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],e[a],t[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}},gv.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}};var bv=function(e,t){if((i=e.length)>1)for(var n,r,i,o=1,a=e[t[0]],u=a.length;o<i;++o)for(r=a,a=e[t[o]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},_v=function(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n};function xv(e,t){return e[t]}var wv=function(e){var t=e.map(Ev);return _v(e).sort(function(e,n){return t[e]-t[n]})};function Ev(e){for(var t,n=0,r=-1,i=e.length;++r<i;)(t=+e[r][1])&&(n+=t);return n}var Sv=function(e){return function(){return e}};function Tv(e){return e[0]}function kv(e){return e[1]}function Ov(){this._=null}function Cv(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function Mv(e,t){var n=t,r=t.R,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Av(e,t){var n=t,r=t.L,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Nv(e){for(;e.L;)e=e.L;return e}function Pv(e,t,n,r){var i=[null,null],o=ey.push(i)-1;return i.left=e,i.right=t,n&&Iv(i,e,t,n),r&&Iv(i,t,e,r),Zv[e.index].halfedges.push(o),Zv[t.index].halfedges.push(o),i}function Rv(e,t,n){var r=[t,n];return r.left=e,r}function Iv(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function Fv(e,t,n,r,i){var o,a=e[0],u=e[1],l=a[0],s=a[1],c=u[0],f=u[1],d=0,p=1,h=c-l,m=f-s;if(o=t-l,h||!(o>0)){if(o/=h,h<0){if(o<d)return;o<p&&(p=o)}else if(h>0){if(o>p)return;o>d&&(d=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>p)return;o>d&&(d=o)}else if(h>0){if(o<d)return;o<p&&(p=o)}if(o=n-s,m||!(o>0)){if(o/=m,m<0){if(o<d)return;o<p&&(p=o)}else if(m>0){if(o>p)return;o>d&&(d=o)}if(o=i-s,m||!(o<0)){if(o/=m,m<0){if(o>p)return;o>d&&(d=o)}else if(m>0){if(o<d)return;o<p&&(p=o)}return!(d>0||p<1)||(d>0&&(e[0]=[l+d*h,s+d*m]),p<1&&(e[1]=[l+p*h,s+p*m]),!0)}}}}}function jv(e,t,n,r,i){var o=e[1];if(o)return!0;var a,u,l=e[0],s=e.left,c=e.right,f=s[0],d=s[1],p=c[0],h=c[1],m=(f+p)/2,v=(d+h)/2;if(h===d){if(m<t||m>=r)return;if(f>p){if(l){if(l[1]>=i)return}else l=[m,n];o=[m,i]}else{if(l){if(l[1]<n)return}else l=[m,i];o=[m,n]}}else if(u=v-(a=(f-p)/(h-d))*m,a<-1||a>1)if(f>p){if(l){if(l[1]>=i)return}else l=[(n-u)/a,n];o=[(i-u)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-u)/a,i];o=[(n-u)/a,n]}else if(d<h){if(l){if(l[0]>=r)return}else l=[t,a*t+u];o=[r,a*r+u]}else{if(l){if(l[0]<t)return}else l=[r,a*r+u];o=[t,a*t+u]}return e[0]=l,e[1]=o,!0}function Dv(e,t){var n=e.site,r=t.left,i=t.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=t[1],i=t[0]):(r=t[0],i=t[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Uv(e,t){return t[+(t.left!==e.site)]}function zv(e,t){return t[+(t.left===e.site)]}Ov.prototype={constructor:Ov,insert:function(e,t){var n,r,i;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=Nv(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)r=n.U,n===r.L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.R&&(Mv(this,n),n=(e=n).U),n.C=!1,r.C=!0,Av(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.L&&(Av(this,n),n=(e=n).U),n.C=!1,r.C=!0,Mv(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,i=e.U,o=e.L,a=e.R;if(n=o?a?Nv(a):o:a,i?i.L===e?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=e.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=e.U,e=n.R,i.L=e,n.R=a,a.U=n):(n.U=i,i=n,e=n.R)):(r=e.C,e=n),e&&(e.U=i),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===i.L){if((t=i.R).C&&(t.C=!1,i.C=!0,Mv(this,i),t=i.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,Av(this,t),t=i.R),t.C=i.C,i.C=t.R.C=!1,Mv(this,i),e=this._;break}}else if((t=i.L).C&&(t.C=!1,i.C=!0,Av(this,i),t=i.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,Mv(this,t),t=i.L),t.C=i.C,i.C=t.L.C=!1,Av(this,i),e=this._;break}t.C=!0,e=i,i=i.U}while(!e.C);e&&(e.C=!1)}}};var Lv,Vv=[];function qv(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,i=e.site,o=n.site;if(r!==o){var a=i[0],u=i[1],l=r[0]-a,s=r[1]-u,c=o[0]-a,f=o[1]-u,d=2*(l*f-s*c);if(!(d>=-ny)){var p=l*l+s*s,h=c*c+f*f,m=(f*p-s*h)/d,v=(l*h-c*p)/d,y=Vv.pop()||new function(){Cv(this),this.x=this.y=this.arc=this.site=this.cy=null};y.arc=e,y.site=i,y.x=m+a,y.y=(y.cy=v+u)+Math.sqrt(m*m+v*v),e.circle=y;for(var g=null,b=Jv._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){g=b.P;break}b=b.L}else{if(!b.R){g=b;break}b=b.R}Jv.insert(g,y),g||(Lv=y)}}}}function Bv(e){var t=e.circle;t&&(t.P||(Lv=t.N),Jv.remove(t),Vv.push(t),Cv(t),e.circle=null)}var Wv=[];function Yv(e){var t=Wv.pop()||new function(){Cv(this),this.edge=this.site=this.circle=null};return t.site=e,t}function Hv(e){Bv(e),Qv.remove(e),Wv.push(e),Cv(e)}function $v(e){var t=e.circle,n=t.x,r=t.cy,i=[n,r],o=e.P,a=e.N,u=[e];Hv(e);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<ty&&Math.abs(r-l.circle.cy)<ty;)o=l.P,u.unshift(l),Hv(l),l=o;u.unshift(l),Bv(l);for(var s=a;s.circle&&Math.abs(n-s.circle.x)<ty&&Math.abs(r-s.circle.cy)<ty;)a=s.N,u.push(s),Hv(s),s=a;u.push(s),Bv(s);var c,f=u.length;for(c=1;c<f;++c)s=u[c],l=u[c-1],Iv(s.edge,l.site,s.site,i);l=u[0],(s=u[f-1]).edge=Pv(l.site,s.site,null,i),qv(l),qv(s)}function Kv(e){for(var t,n,r,i,o=e[0],a=e[1],u=Qv._;u;)if((r=Xv(u,a)-o)>ty)u=u.L;else{if(!((i=o-Gv(u,a))>ty)){r>-ty?(t=u.P,n=u):i>-ty?(t=u,n=u.N):t=n=u;break}if(!u.R){t=u;break}u=u.R}!function(e){Zv[e.index]={site:e,halfedges:[]}}(e);var l=Yv(e);if(Qv.insert(t,l),t||n){if(t===n)return Bv(t),n=Yv(t.site),Qv.insert(l,n),l.edge=n.edge=Pv(t.site,l.site),qv(t),void qv(n);if(n){Bv(t),Bv(n);var s=t.site,c=s[0],f=s[1],d=e[0]-c,p=e[1]-f,h=n.site,m=h[0]-c,v=h[1]-f,y=2*(d*v-p*m),g=d*d+p*p,b=m*m+v*v,_=[(v*g-p*b)/y+c,(d*b-m*g)/y+f];Iv(n.edge,s,h,_),l.edge=Pv(s,e,null,_),n.edge=Pv(e,h,null,_),qv(t),qv(n)}else l.edge=Pv(t.site,l.site)}}function Xv(e,t){var n=e.site,r=n[0],i=n[1],o=i-t;if(!o)return r;var a=e.P;if(!a)return-1/0;var u=(n=a.site)[0],l=n[1],s=l-t;if(!s)return u;var c=u-r,f=1/o-1/s,d=c/s;return f?(-d+Math.sqrt(d*d-2*f*(c*c/(-2*s)-l+s/2+i-o/2)))/f+r:(r+u)/2}function Gv(e,t){var n=e.N;if(n)return Xv(n,t);var r=e.site;return r[1]===t?r[0]:1/0}var Qv,Zv,Jv,ey,ty=1e-6,ny=1e-12;function ry(e,t){return t[1]-e[1]||t[0]-e[0]}function iy(e,t){var n,r,i,o=e.sort(ry).pop();for(ey=[],Zv=new Array(e.length),Qv=new Ov,Jv=new Ov;;)if(i=Lv,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Kv(o),n=o[0],r=o[1]),o=e.pop();else{if(!i)break;$v(i.arc)}if(function(){for(var e,t,n,r,i=0,o=Zv.length;i<o;++i)if((e=Zv[i])&&(r=(t=e.halfedges).length)){var a=new Array(r),u=new Array(r);for(n=0;n<r;++n)a[n]=n,u[n]=Dv(e,ey[t[n]]);for(a.sort(function(e,t){return u[t]-u[e]}),n=0;n<r;++n)u[n]=t[a[n]];for(n=0;n<r;++n)t[n]=u[n]}}(),t){var a=+t[0][0],u=+t[0][1],l=+t[1][0],s=+t[1][1];!function(e,t,n,r){for(var i,o=ey.length;o--;)jv(i=ey[o],e,t,n,r)&&Fv(i,e,t,n,r)&&(Math.abs(i[0][0]-i[1][0])>ty||Math.abs(i[0][1]-i[1][1])>ty)||delete ey[o]}(a,u,l,s),function(e,t,n,r){var i,o,a,u,l,s,c,f,d,p,h,m,v=Zv.length,y=!0;for(i=0;i<v;++i)if(o=Zv[i]){for(a=o.site,l=o.halfedges,u=l.length;u--;)ey[l[u]]||l.splice(u,1);for(u=0,s=l.length;u<s;)p=zv(o,ey[l[u]]),h=p[0],m=p[1],c=Uv(o,ey[l[++u%s]]),f=c[0],d=c[1],(Math.abs(h-f)>ty||Math.abs(m-d)>ty)&&(l.splice(u,0,ey.push(Rv(a,p,Math.abs(h-e)<ty&&r-m>ty?[e,Math.abs(f-e)<ty?d:r]:Math.abs(m-r)<ty&&n-h>ty?[Math.abs(d-r)<ty?f:n,r]:Math.abs(h-n)<ty&&m-t>ty?[n,Math.abs(f-n)<ty?d:t]:Math.abs(m-t)<ty&&h-e>ty?[Math.abs(d-t)<ty?f:e,t]:null))-1),++s);s&&(y=!1)}if(y){var g,b,_,x=1/0;for(i=0,y=null;i<v;++i)(o=Zv[i])&&(a=o.site,g=a[0]-e,b=a[1]-t,(_=g*g+b*b)<x&&(x=_,y=o));if(y){var w=[e,t],E=[e,r],S=[n,r],T=[n,t];y.halfedges.push(ey.push(Rv(a=y.site,w,E))-1,ey.push(Rv(a,E,S))-1,ey.push(Rv(a,S,T))-1,ey.push(Rv(a,T,w))-1)}}for(i=0;i<v;++i)(o=Zv[i])&&(o.halfedges.length||delete Zv[i])}(a,u,l,s)}this.edges=ey,this.cells=Zv,Qv=Jv=ey=Zv=null}iy.prototype={constructor:iy,polygons:function(){var e=this.edges;return this.cells.map(function(t){var n=t.halfedges.map(function(n){return Uv(t,e[n])});return n.data=t.site.data,n})},triangles:function(){var e=[],t=this.edges;return this.cells.forEach(function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,u,l,s,c=n.site,f=-1,d=t[i[o-1]],p=d.left===c?d.right:d.left;++f<o;)a=p,d=t[i[f]],p=d.left===c?d.right:d.left,a&&p&&r<a.index&&r<p.index&&(l=a,s=p,((u=c)[0]-s[0])*(l[1]-u[1])-(u[0]-l[0])*(s[1]-u[1])<0)&&e.push([c.data,a.data,p.data])}),e},links:function(){return this.edges.filter(function(e){return e.right}).map(function(e){return{source:e.left.data,target:e.right.data}})},find:function(e,t,n){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var l=e-i.site[0],s=t-i.site[1],c=l*l+s*s;do{i=o.cells[r=a],a=null,i.halfedges.forEach(function(n){var r=o.edges[n],u=r.left;if(u!==i.site&&u||(u=r.right)){var l=e-u[0],s=t-u[1],f=l*l+s*s;f<c&&(c=f,a=u.index)}})}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}};var oy=function(e){return function(){return e}};function ay(e,t,n){this.k=e,this.x=t,this.y=n}ay.prototype={constructor:ay,scale:function(e){return 1===e?this:new ay(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new ay(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var uy=new ay(1,0,0);function ly(e){return e.__zoom||uy}function sy(){e.event.stopImmediatePropagation()}ly.prototype=ay.prototype;var cy=function(){e.event.preventDefault(),e.event.stopImmediatePropagation()};function fy(){return!e.event.button}function dy(){var e,t,n=this;return n instanceof SVGElement?(n=n.ownerSVGElement||n,e=n.width.baseVal.value,t=n.height.baseVal.value):(e=n.clientWidth,t=n.clientHeight),[[0,0],[e,t]]}function py(){return this.__zoom||uy}function hy(){return-e.event.deltaY*(e.event.deltaMode?120:1)/500}function my(){return"ontouchstart"in this}e.version="4.10.0",e.bisect=i,e.bisectRight=i,e.bisectLeft=o,e.ascending=t,e.bisector=n,e.cross=function(e,t,n){var r,i,o,u,l=e.length,s=t.length,c=new Array(l*s);for(null==n&&(n=a),r=o=0;r<l;++r)for(u=e[r],i=0;i<s;++i,++o)c[o]=n(u,t[i]);return c},e.descending=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},e.deviation=s,e.extent=c,e.histogram=function(){var e=m,t=c,n=E;function r(r){var o,a,u=r.length,l=new Array(u);for(o=0;o<u;++o)l[o]=e(r[o],o,r);var s=t(l),c=s[0],f=s[1],d=n(l,c,f);Array.isArray(d)||(d=w(c,f,d),d=v(Math.ceil(c/d)*d,Math.floor(f/d)*d,d));for(var p=d.length;d[0]<=c;)d.shift(),--p;for(;d[p-1]>f;)d.pop(),--p;var h,m=new Array(p+1);for(o=0;o<=p;++o)(h=m[o]=[]).x0=o>0?d[o-1]:c,h.x1=o<p?d[o]:f;for(o=0;o<u;++o)a=l[o],c<=a&&a<=f&&m[i(d,a,0,p)].push(r[o]);return m}return r.value=function(t){return arguments.length?(e="function"==typeof t?t:h(t),r):e},r.domain=function(e){return arguments.length?(t="function"==typeof e?e:h([e[0],e[1]]),r):t},r.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?h(d.call(e)):h(e),r):n},r},e.thresholdFreedmanDiaconis=function(e,n,r){return e=p.call(e,u).sort(t),Math.ceil((r-n)/(2*(S(e,.75)-S(e,.25))*Math.pow(e.length,-1/3)))},e.thresholdScott=function(e,t,n){return Math.ceil((n-t)/(3.5*s(e)*Math.pow(e.length,-1/3)))},e.thresholdSturges=E,e.max=function(e,t){var n,r,i=e.length,o=-1;if(null==t){for(;++o<i;)if(null!=(n=e[o])&&n>=n)for(r=n;++o<i;)null!=(n=e[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=t(e[o],o,e))&&n>=n)for(r=n;++o<i;)null!=(n=t(e[o],o,e))&&n>r&&(r=n);return r},e.mean=function(e,t){var n,r=e.length,i=r,o=-1,a=0;if(null==t)for(;++o<r;)isNaN(n=u(e[o]))?--i:a+=n;else for(;++o<r;)isNaN(n=u(t(e[o],o,e)))?--i:a+=n;if(i)return a/i},e.median=function(e,n){var r,i=e.length,o=-1,a=[];if(null==n)for(;++o<i;)isNaN(r=u(e[o]))||a.push(r);else for(;++o<i;)isNaN(r=u(n(e[o],o,e)))||a.push(r);return S(a.sort(t),.5)},e.merge=T,e.min=k,e.pairs=function(e,t){null==t&&(t=a);for(var n=0,r=e.length-1,i=e[0],o=new Array(r<0?0:r);n<r;)o[n]=t(i,i=e[++n]);return o},e.permute=function(e,t){for(var n=t.length,r=new Array(n);n--;)r[n]=e[t[n]];return r},e.quantile=S,e.range=v,e.scan=function(e,n){if(r=e.length){var r,i,o=0,a=0,u=e[a];for(null==n&&(n=t);++o<r;)(n(i=e[o],u)<0||0!==n(u,u))&&(u=i,a=o);return 0===n(u,u)?a:void 0}},e.shuffle=function(e,t,n){for(var r,i,o=(null==n?e.length:n)-(t=null==t?0:+t);o;)i=Math.random()*o--|0,r=e[o+t],e[o+t]=e[i+t],e[i+t]=r;return e},e.sum=function(e,t){var n,r=e.length,i=-1,o=0;if(null==t)for(;++i<r;)(n=+e[i])&&(o+=n);else for(;++i<r;)(n=+t(e[i],i,e))&&(o+=n);return o},e.ticks=_,e.tickIncrement=x,e.tickStep=w,e.transpose=O,e.variance=l,e.zip=function(){return O(arguments)},e.axisTop=function(e){return z(N,e)},e.axisRight=function(e){return z(P,e)},e.axisBottom=function(e){return z(R,e)},e.axisLeft=function(e){return z(I,e)},e.brush=function(){return Oi(vi)},e.brushX=function(){return Oi(hi)},e.brushY=function(){return Oi(mi)},e.brushSelection=function(e){var t=e.__brush;return t?t.dim.output(t.selection):null},e.chord=function(){var e=0,t=null,n=null,r=null;function i(i){var o,a,u,l,s,c,f=i.length,d=[],p=v(f),h=[],m=[],y=m.groups=new Array(f),g=new Array(f*f);for(o=0,s=-1;++s<f;){for(a=0,c=-1;++c<f;)a+=i[s][c];d.push(a),h.push(v(f)),o+=a}for(t&&p.sort(function(e,n){return t(d[e],d[n])}),n&&h.forEach(function(e,t){e.sort(function(e,r){return n(i[t][e],i[t][r])})}),o=Ri(0,Pi-e*f)/o,l=o?e:Pi/f,a=0,s=-1;++s<f;){for(u=a,c=-1;++c<f;){var b=p[s],_=h[b][c],x=i[b][_],w=a,E=a+=x*o;g[_*f+b]={index:b,subindex:_,startAngle:w,endAngle:E,value:x}}y[b]={index:b,startAngle:u,endAngle:a,value:d[b]},a+=l}for(s=-1;++s<f;)for(c=s-1;++c<f;){var S=g[c*f+s],T=g[s*f+c];(S.value||T.value)&&m.push(S.value<T.value?{source:T,target:S}:{source:S,target:T})}return r?m.sort(r):m}return i.padAngle=function(t){return arguments.length?(e=Ri(0,t),i):e},i.sortGroups=function(e){return arguments.length?(t=e,i):t},i.sortSubgroups=function(e){return arguments.length?(n=e,i):n},i.sortChords=function(e){return arguments.length?(null==e?r=null:(t=e,r=function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)})._=e,i):r&&r._;var t},i},e.ribbon=function(){var e=Vi,t=qi,n=Bi,r=Wi,i=Yi,o=null;function a(){var a,u=Ii.call(arguments),l=e.apply(this,u),s=t.apply(this,u),c=+n.apply(this,(u[0]=l,u)),f=r.apply(this,u)-Ni,d=i.apply(this,u)-Ni,p=c*Ci(f),h=c*Mi(f),m=+n.apply(this,(u[0]=s,u)),v=r.apply(this,u)-Ni,y=i.apply(this,u)-Ni;if(o||(o=a=Li()),o.moveTo(p,h),o.arc(0,0,c,f,d),f===v&&d===y||(o.quadraticCurveTo(0,0,m*Ci(v),m*Mi(v)),o.arc(0,0,m,v,y)),o.quadraticCurveTo(0,0,p,h),o.closePath(),a)return o=null,a+""||null}return a.radius=function(e){return arguments.length?(n="function"==typeof e?e:Fi(+e),a):n},a.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:Fi(+e),a):r},a.endAngle=function(e){return arguments.length?(i="function"==typeof e?e:Fi(+e),a):i},a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(e){return arguments.length?(t=e,a):t},a.context=function(e){return arguments.length?(o=null==e?null:e,a):o},a},e.nest=function(){var e,t,n,r=[],i=[];function o(n,i,a,u){if(i>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var l,s,c,f=-1,d=n.length,p=r[i++],h=$i(),m=a();++f<d;)(c=h.get(l=p(s=n[f])+""))?c.push(s):h.set(l,[s]);return h.each(function(e,t){u(m,t,o(e,i,a,u))}),m}return n={object:function(e){return o(e,0,Ki,Xi)},map:function(e){return o(e,0,Gi,Qi)},entries:function(e){return function e(n,o){if(++o>r.length)return n;var a,u=i[o-1];return null!=t&&o>=r.length?a=n.entries():(a=[],n.each(function(t,n){a.push({key:n,values:e(t,o)})})),null!=u?a.sort(function(e,t){return u(e.key,t.key)}):a}(o(e,0,Gi,Qi),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return i[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}},e.set=eo,e.map=$i,e.keys=function(e){var t=[];for(var n in e)t.push(n);return t},e.values=function(e){var t=[];for(var n in e)t.push(e[n]);return t},e.entries=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t},e.color=pt,e.rgb=yt,e.hsl=_t,e.lab=Rt,e.hcl=zt,e.cubehelix=Xt,e.dispatch=V,e.drag=function(){var t,n,r,i,o=$e,a=Ke,u=Xe,l={},s=V("start","drag","end"),c=0,f=0;function d(e){e.on("mousedown.drag",p).filter(Ge).on("touchstart.drag",v).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!i&&o.apply(this,arguments)){var u=b("mouse",a.apply(this,arguments),fe,this,arguments);u&&(ze(e.event.view).on("mousemove.drag",h,!0).on("mouseup.drag",m,!0),Be(e.event.view),Ve(),r=!1,t=e.event.clientX,n=e.event.clientY,u("start"))}}function h(){if(qe(),!r){var i=e.event.clientX-t,o=e.event.clientY-n;r=i*i+o*o>f}l.mouse("drag")}function m(){ze(e.event.view).on("mousemove.drag mouseup.drag",null),We(e.event.view,r),qe(),l.mouse("end")}function v(){if(o.apply(this,arguments)){var t,n,r=e.event.changedTouches,i=a.apply(this,arguments),u=r.length;for(t=0;t<u;++t)(n=b(r[t].identifier,i,Le,this,arguments))&&(Ve(),n("start"))}}function y(){var t,n,r=e.event.changedTouches,i=r.length;for(t=0;t<i;++t)(n=l[r[t].identifier])&&(qe(),n("drag"))}function g(){var t,n,r=e.event.changedTouches,o=r.length;for(i&&clearTimeout(i),i=setTimeout(function(){i=null},500),t=0;t<o;++t)(n=l[r[t].identifier])&&(Ve(),n("end"))}function b(t,n,r,i,o){var a,f,p,h=r(n,t),m=s.copy();if(le(new He(d,"beforestart",a,t,c,h[0],h[1],0,0,m),function(){return null!=(e.event.subject=a=u.apply(i,o))&&(f=a.x-h[0]||0,p=a.y-h[1]||0,!0)}))return function e(u){var s,v=h;switch(u){case"start":l[t]=e,s=c++;break;case"end":delete l[t],--c;case"drag":h=r(n,t),s=c}le(new He(d,u,a,t,s,h[0]+f,h[1]+p,h[0]-v[0],h[1]-v[1],m),m.apply,m,[u,i,o])}}return d.filter=function(e){return arguments.length?(o="function"==typeof e?e:Ye(!!e),d):o},d.container=function(e){return arguments.length?(a="function"==typeof e?e:Ye(e),d):a},d.subject=function(e){return arguments.length?(u="function"==typeof e?e:Ye(e),d):u},d.on=function(){var e=s.on.apply(s,arguments);return e===s?d:e},d.clickDistance=function(e){return arguments.length?(f=(e=+e)*e,d):Math.sqrt(f)},d},e.dragDisable=Be,e.dragEnable=We,e.dsvFormat=no,e.csvParse=io,e.csvParseRows=oo,e.csvFormat=ao,e.csvFormatRows=uo,e.tsvParse=so,e.tsvParseRows=co,e.tsvFormat=fo,e.tsvFormatRows=po,e.easeLinear=function(e){return+e},e.easeQuad=Mr,e.easeQuadIn=function(e){return e*e},e.easeQuadOut=function(e){return e*(2-e)},e.easeQuadInOut=Mr,e.easeCubic=Ar,e.easeCubicIn=function(e){return e*e*e},e.easeCubicOut=function(e){return--e*e*e+1},e.easeCubicInOut=Ar,e.easePoly=Rr,e.easePolyIn=Nr,e.easePolyOut=Pr,e.easePolyInOut=Rr,e.easeSin=jr,e.easeSinIn=function(e){return 1-Math.cos(e*Fr)},e.easeSinOut=function(e){return Math.sin(e*Fr)},e.easeSinInOut=jr,e.easeExp=Dr,e.easeExpIn=function(e){return Math.pow(2,10*e-10)},e.easeExpOut=function(e){return 1-Math.pow(2,-10*e)},e.easeExpInOut=Dr,e.easeCircle=Ur,e.easeCircleIn=function(e){return 1-Math.sqrt(1-e*e)},e.easeCircleOut=function(e){return Math.sqrt(1- --e*e)},e.easeCircleInOut=Ur,e.easeBounce=Xr,e.easeBounceIn=function(e){return 1-Xr(1-e)},e.easeBounceOut=Xr,e.easeBounceInOut=function(e){return((e*=2)<=1?1-Xr(1-e):Xr(e-1)+1)/2},e.easeBack=Zr,e.easeBackIn=Gr,e.easeBackOut=Qr,e.easeBackInOut=Zr,e.easeElastic=ti,e.easeElasticIn=ei,e.easeElasticOut=ti,e.easeElasticInOut=ni,e.forceCenter=function(e,t){var n;function r(){var r,i,o=n.length,a=0,u=0;for(r=0;r<o;++r)i=n[r],a+=i.x,u+=i.y;for(a=a/o-e,u=u/o-t,r=0;r<o;++r)(i=n[r]).x-=a,i.y-=u}return null==e&&(e=0),null==t&&(t=0),r.initialize=function(e){n=e},r.x=function(t){return arguments.length?(e=+t,r):e},r.y=function(e){return arguments.length?(t=+e,r):t},r},e.forceCollide=function(e){var t,n,r=1,i=1;function o(){for(var e,o,u,l,s,c,f,d=t.length,p=0;p<i;++p)for(o=_o(t,So,To).visitAfter(a),e=0;e<d;++e)u=t[e],c=n[u.index],f=c*c,l=u.x+u.vx,s=u.y+u.vy,o.visit(h);function h(e,t,n,i,o){var a=e.data,d=e.r,p=c+d;if(!a)return t>l+p||i<l-p||n>s+p||o<s-p;if(a.index>u.index){var h=l-a.x-a.vx,m=s-a.y-a.vy,v=h*h+m*m;v<p*p&&(0===h&&(h=mo(),v+=h*h),0===m&&(m=mo(),v+=m*m),v=(p-(v=Math.sqrt(v)))/v*r,u.vx+=(h*=v)*(p=(d*=d)/(f+d)),u.vy+=(m*=v)*p,a.vx-=h*(p=1-p),a.vy-=m*p)}}}function a(e){if(e.data)return e.r=n[e.data.index];for(var t=e.r=0;t<4;++t)e[t]&&e[t].r>e.r&&(e.r=e[t].r)}function u(){if(t){var r,i,o=t.length;for(n=new Array(o),r=0;r<o;++r)i=t[r],n[i.index]=+e(i,r,t)}}return"function"!=typeof e&&(e=ho(null==e?1:+e)),o.initialize=function(e){t=e,u()},o.iterations=function(e){return arguments.length?(i=+e,o):i},o.strength=function(e){return arguments.length?(r=+e,o):r},o.radius=function(t){return arguments.length?(e="function"==typeof t?t:ho(+t),u(),o):e},o},e.forceLink=function(e){var t,n,r,i,o,a=ko,u=function(e){return 1/Math.min(i[e.source.index],i[e.target.index])},l=ho(30),s=1;function c(r){for(var i=0,a=e.length;i<s;++i)for(var u,l,c,f,d,p,h,m=0;m<a;++m)u=e[m],l=u.source,c=u.target,f=c.x+c.vx-l.x-l.vx||mo(),d=c.y+c.vy-l.y-l.vy||mo(),p=((p=Math.sqrt(f*f+d*d))-n[m])/p*r*t[m],f*=p,d*=p,c.vx-=f*(h=o[m]),c.vy-=d*h,l.vx+=f*(h=1-h),l.vy+=d*h}function f(){if(r){var u,l,s=r.length,c=e.length,f=$i(r,a);for(u=0,i=new Array(s);u<c;++u)(l=e[u]).index=u,"object"!=typeof l.source&&(l.source=Oo(f,l.source)),"object"!=typeof l.target&&(l.target=Oo(f,l.target)),i[l.source.index]=(i[l.source.index]||0)+1,i[l.target.index]=(i[l.target.index]||0)+1;for(u=0,o=new Array(c);u<c;++u)l=e[u],o[u]=i[l.source.index]/(i[l.source.index]+i[l.target.index]);t=new Array(c),d(),n=new Array(c),p()}}function d(){if(r)for(var n=0,i=e.length;n<i;++n)t[n]=+u(e[n],n,e)}function p(){if(r)for(var t=0,i=e.length;t<i;++t)n[t]=+l(e[t],t,e)}return null==e&&(e=[]),c.initialize=function(e){r=e,f()},c.links=function(t){return arguments.length?(e=t,f(),c):e},c.id=function(e){return arguments.length?(a=e,c):a},c.iterations=function(e){return arguments.length?(s=+e,c):s},c.strength=function(e){return arguments.length?(u="function"==typeof e?e:ho(+e),d(),c):u},c.distance=function(e){return arguments.length?(l="function"==typeof e?e:ho(+e),p(),c):l},c},e.forceManyBody=function(){var e,t,n,r,i=ho(-30),o=1,a=1/0,u=.81;function l(r){var i,o=e.length,a=_o(e,Co,Mo).visitAfter(c);for(n=r,i=0;i<o;++i)t=e[i],a.visit(f)}function s(){if(e){var t,n,o=e.length;for(r=new Array(o),t=0;t<o;++t)n=e[t],r[n.index]=+i(n,t,e)}}function c(e){var t,n,i,o,a,u=0;if(e.length){for(i=o=a=0;a<4;++a)(t=e[a])&&(n=t.value)&&(u+=n,i+=n*t.x,o+=n*t.y);e.x=i/u,e.y=o/u}else{(t=e).x=t.data.x,t.y=t.data.y;do{u+=r[t.data.index]}while(t=t.next)}e.value=u}function f(e,i,l,s){if(!e.value)return!0;var c=e.x-t.x,f=e.y-t.y,d=s-i,p=c*c+f*f;if(d*d/u<p)return p<a&&(0===c&&(c=mo(),p+=c*c),0===f&&(f=mo(),p+=f*f),p<o&&(p=Math.sqrt(o*p)),t.vx+=c*e.value*n/p,t.vy+=f*e.value*n/p),!0;if(!(e.length||p>=a)){(e.data!==t||e.next)&&(0===c&&(c=mo(),p+=c*c),0===f&&(f=mo(),p+=f*f),p<o&&(p=Math.sqrt(o*p)));do{e.data!==t&&(d=r[e.data.index]*n/p,t.vx+=c*d,t.vy+=f*d)}while(e=e.next)}}return l.initialize=function(t){e=t,s()},l.strength=function(e){return arguments.length?(i="function"==typeof e?e:ho(+e),s(),l):i},l.distanceMin=function(e){return arguments.length?(o=e*e,l):Math.sqrt(o)},l.distanceMax=function(e){return arguments.length?(a=e*e,l):Math.sqrt(a)},l.theta=function(e){return arguments.length?(u=e*e,l):Math.sqrt(u)},l},e.forceSimulation=function(e){var t,n=1,r=.001,i=1-Math.pow(r,1/300),o=0,a=.6,u=$i(),l=tr(c),s=V("tick","end");function c(){f(),s.call("tick",t),n<r&&(l.stop(),s.call("end",t))}function f(){var t,r,l=e.length;for(n+=(o-n)*i,u.each(function(e){e(n)}),t=0;t<l;++t)null==(r=e[t]).fx?r.x+=r.vx*=a:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=a:(r.y=r.fy,r.vy=0)}function d(){for(var t,n=0,r=e.length;n<r;++n){if((t=e[n]).index=n,isNaN(t.x)||isNaN(t.y)){var i=No*Math.sqrt(n),o=n*Po;t.x=i*Math.cos(o),t.y=i*Math.sin(o)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function p(t){return t.initialize&&t.initialize(e),t}return null==e&&(e=[]),d(),t={tick:f,restart:function(){return l.restart(c),t},stop:function(){return l.stop(),t},nodes:function(n){return arguments.length?(e=n,d(),u.each(p),t):e},alpha:function(e){return arguments.length?(n=+e,t):n},alphaMin:function(e){return arguments.length?(r=+e,t):r},alphaDecay:function(e){return arguments.length?(i=+e,t):+i},alphaTarget:function(e){return arguments.length?(o=+e,t):o},velocityDecay:function(e){return arguments.length?(a=1-e,t):1-a},force:function(e,n){return arguments.length>1?(null==n?u.remove(e):u.set(e,p(n)),t):u.get(e)},find:function(t,n,r){var i,o,a,u,l,s=0,c=e.length;for(null==r?r=1/0:r*=r,s=0;s<c;++s)(a=(i=t-(u=e[s]).x)*i+(o=n-u.y)*o)<r&&(l=u,r=a);return l},on:function(e,n){return arguments.length>1?(s.on(e,n),t):s.on(e)}}},e.forceX=function(e){var t,n,r,i=ho(.1);function o(e){for(var i,o=0,a=t.length;o<a;++o)(i=t[o]).vx+=(r[o]-i.x)*n[o]*e}function a(){if(t){var o,a=t.length;for(n=new Array(a),r=new Array(a),o=0;o<a;++o)n[o]=isNaN(r[o]=+e(t[o],o,t))?0:+i(t[o],o,t)}}return"function"!=typeof e&&(e=ho(null==e?0:+e)),o.initialize=function(e){t=e,a()},o.strength=function(e){return arguments.length?(i="function"==typeof e?e:ho(+e),a(),o):i},o.x=function(t){return arguments.length?(e="function"==typeof t?t:ho(+t),a(),o):e},o},e.forceY=function(e){var t,n,r,i=ho(.1);function o(e){for(var i,o=0,a=t.length;o<a;++o)(i=t[o]).vy+=(r[o]-i.y)*n[o]*e}function a(){if(t){var o,a=t.length;for(n=new Array(a),r=new Array(a),o=0;o<a;++o)n[o]=isNaN(r[o]=+e(t[o],o,t))?0:+i(t[o],o,t)}}return"function"!=typeof e&&(e=ho(null==e?0:+e)),o.initialize=function(e){t=e,a()},o.strength=function(e){return arguments.length?(i="function"==typeof e?e:ho(+e),a(),o):i},o.y=function(t){return arguments.length?(e="function"==typeof t?t:ho(+t),a(),o):e},o},e.formatDefaultLocale=Wo,e.formatLocale=Bo,e.formatSpecifier=Uo,e.precisionFixed=Yo,e.precisionPrefix=Ho,e.precisionRound=$o,e.geoArea=function(e){return Va.reset(),za(e,qa),2*Va},e.geoBounds=function(e){var t,n,r,i,o,a,u;if(Ia=Ra=-(Na=Pa=1/0),eu=[],za(e,ru),n=eu.length){for(eu.sort(du),t=1,r=eu[0],o=[r];t<n;++t)i=eu[t],pu(r,i[0])||pu(r,i[1])?(fu(r[0],i[1])>fu(r[0],r[1])&&(r[1]=i[1]),fu(i[0],r[1])>fu(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,n=o.length-1,t=0,r=o[n];t<=n;r=i,++t)i=o[t],(u=fu(r[1],i[0]))>a&&(a=u,Na=i[0],Ra=r[1])}return eu=tu=null,Na===1/0||Pa===1/0?[[NaN,NaN],[NaN,NaN]]:[[Na,Pa],[Ra,Ia]]},e.geoCentroid=function(e){hu=mu=vu=yu=gu=bu=_u=xu=wu=Eu=Su=0,za(e,Au);var t=wu,n=Eu,r=Su,i=t*t+n*n+r*r;return i<1e-12&&(t=bu,n=_u,r=xu,mu<Zo&&(t=vu,n=yu,r=gu),(i=t*t+n*n+r*r)<1e-12)?[NaN,NaN]:[ua(n,t)*ra,ga(r/ma(i))*ra]},e.geoCircle=function(){var e,t,n=Vu([0,0]),r=Vu(90),i=Vu(6),o={point:function(n,r){e.push(n=t(n,r)),n[0]*=ra,n[1]*=ra}};function a(){var a=n.apply(this,arguments),u=r.apply(this,arguments)*ia,l=i.apply(this,arguments)*ia;return e=[],t=Wu(-a[0]*ia,-a[1]*ia,0).invert,Xu(o,u,l,1),a={type:"Polygon",coordinates:[e]},e=t=null,a}return a.center=function(e){return arguments.length?(n="function"==typeof e?e:Vu([+e[0],+e[1]]),a):n},a.radius=function(e){return arguments.length?(r="function"==typeof e?e:Vu(+e),a):r},a.precision=function(e){return arguments.length?(i="function"==typeof e?e:Vu(+e),a):i},a},e.geoClipExtent=function(){var e,t,n,r=0,i=0,o=960,a=500;return n={stream:function(n){return e&&t===n?e:e=ol(r,i,o,a)(t=n)},extent:function(u){return arguments.length?(r=+u[0][0],i=+u[0][1],o=+u[1][0],a=+u[1][1],e=t=null,n):[[r,i],[o,a]]}}},e.geoContains=function(e,t){return(e&&_l.hasOwnProperty(e.type)?_l[e.type]:wl)(e,t)},e.geoDistance=bl,e.geoGraticule=Al,e.geoGraticule10=function(){return Al()()},e.geoInterpolate=function(e,t){var n=e[0]*ia,r=e[1]*ia,i=t[0]*ia,o=t[1]*ia,a=la(r),u=pa(r),l=la(o),s=pa(o),c=a*la(n),f=a*pa(n),d=l*la(i),p=l*pa(i),h=2*ga(ma(ba(o-r)+a*l*ba(i-n))),m=pa(h),v=h?function(e){var t=pa(e*=h)/m,n=pa(h-e)/m,r=n*c+t*d,i=n*f+t*p,o=n*u+t*s;return[ua(i,r)*ra,ua(o,ma(r*r+i*i))*ra]}:function(){return[n*ra,r*ra]};return v.distance=h,v},e.geoLength=vl,e.geoPath=function(e,t){var n,r,i=4.5;function o(e){return e&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),za(e,n(r))),r.result()}return o.area=function(e){return za(e,n(Ul)),Ul.result()},o.measure=function(e){return za(e,n(Ss)),Ss.result()},o.bounds=function(e){return za(e,n(Ql)),Ql.result()},o.centroid=function(e){return za(e,n(us)),us.result()},o.projection=function(t){return arguments.length?(n=null==t?(e=null,Fl):(e=t).stream,o):e},o.context=function(e){return arguments.length?(r=null==e?(t=null,new Os):new ys(t=e),"function"!=typeof i&&r.pointRadius(i),o):t},o.pointRadius=function(e){return arguments.length?(i="function"==typeof e?e:(r.pointRadius(+e),+e),o):i},o.projection(e).context(t)},e.geoAlbers=$s,e.geoAlbersUsa=function(){var e,t,n,r,i,o,a=$s(),u=Hs().rotate([154,0]).center([-2,58.5]).parallels([55,65]),l=Hs().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(e,t){o=[e,t]}};function c(e){var t=e[0],a=e[1];return o=null,n.point(t,a),o||(r.point(t,a),o)||(i.point(t,a),o)}function f(){return e=t=null,c}return c.invert=function(e){var t=a.scale(),n=a.translate(),r=(e[0]-n[0])/t,i=(e[1]-n[1])/t;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?u:i>=.166&&i<.234&&r>=-.214&&r<-.115?l:a).invert(e)},c.stream=function(n){return e&&t===n?e:(r=[a.stream(t=n),u.stream(n),l.stream(n)],i=r.length,e={point:function(e,t){for(var n=-1;++n<i;)r[n].point(e,t)},sphere:function(){for(var e=-1;++e<i;)r[e].sphere()},lineStart:function(){for(var e=-1;++e<i;)r[e].lineStart()},lineEnd:function(){for(var e=-1;++e<i;)r[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<i;)r[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<i;)r[e].polygonEnd()}});var r,i},c.precision=function(e){return arguments.length?(a.precision(e),u.precision(e),l.precision(e),f()):a.precision()},c.scale=function(e){return arguments.length?(a.scale(e),u.scale(.35*e),l.scale(e),c.translate(a.translate())):a.scale()},c.translate=function(e){if(!arguments.length)return a.translate();var t=a.scale(),o=+e[0],c=+e[1];return n=a.translate(e).clipExtent([[o-.455*t,c-.238*t],[o+.455*t,c+.238*t]]).stream(s),r=u.translate([o-.307*t,c+.201*t]).clipExtent([[o-.425*t+Zo,c+.12*t+Zo],[o-.214*t-Zo,c+.234*t-Zo]]).stream(s),i=l.translate([o-.205*t,c+.212*t]).clipExtent([[o-.214*t+Zo,c+.166*t+Zo],[o-.115*t-Zo,c+.234*t-Zo]]).stream(s),f()},c.fitExtent=function(e,t){return js(c,e,t)},c.fitSize=function(e,t){return Ds(c,e,t)},c.scale(1070)},e.geoAzimuthalEqualArea=function(){return qs(Gs).scale(124.75).clipAngle(179.999)},e.geoAzimuthalEqualAreaRaw=Gs,e.geoAzimuthalEquidistant=function(){return qs(Qs).scale(79.4188).clipAngle(179.999)},e.geoAzimuthalEquidistantRaw=Qs,e.geoConicConformal=function(){return Ws(tc).scale(109.5).parallels([30,30])},e.geoConicConformalRaw=tc,e.geoConicEqualArea=Hs,e.geoConicEqualAreaRaw=Ys,e.geoConicEquidistant=function(){return Ws(rc).scale(131.154).center([0,13.9389])},e.geoConicEquidistantRaw=rc,e.geoEquirectangular=function(){return qs(nc).scale(152.63)},e.geoEquirectangularRaw=nc,e.geoGnomonic=function(){return qs(ic).scale(144.049).clipAngle(60)},e.geoGnomonicRaw=ic,e.geoIdentity=function(){var e,t,n,r,i,o,a=1,u=0,l=0,s=1,c=1,f=Fl,d=null,p=Fl;function h(){return r=i=null,o}return o={stream:function(e){return r&&i===e?r:r=f(p(i=e))},clipExtent:function(r){return arguments.length?(p=null==r?(d=e=t=n=null,Fl):ol(d=+r[0][0],e=+r[0][1],t=+r[1][0],n=+r[1][1]),h()):null==d?null:[[d,e],[t,n]]},scale:function(e){return arguments.length?(f=oc((a=+e)*s,a*c,u,l),h()):a},translate:function(e){return arguments.length?(f=oc(a*s,a*c,u=+e[0],l=+e[1]),h()):[u,l]},reflectX:function(e){return arguments.length?(f=oc(a*(s=e?-1:1),a*c,u,l),h()):s<0},reflectY:function(e){return arguments.length?(f=oc(a*s,a*(c=e?-1:1),u,l),h()):c<0},fitExtent:function(e,t){return js(o,e,t)},fitSize:function(e,t){return Ds(o,e,t)}}},e.geoProjection=qs,e.geoProjectionMutator=Bs,e.geoMercator=function(){return Js(Zs).scale(961/na)},e.geoMercatorRaw=Zs,e.geoOrthographic=function(){return qs(ac).scale(249.5).clipAngle(90+Zo)},e.geoOrthographicRaw=ac,e.geoStereographic=function(){return qs(uc).scale(250).clipAngle(142)},e.geoStereographicRaw=uc,e.geoTransverseMercator=function(){var e=Js(lc),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90]).scale(159.155)},e.geoTransverseMercatorRaw=lc,e.geoRotation=Ku,e.geoStream=za,e.geoTransform=function(e){return{stream:Is(e)}},e.cluster=function(){var e=sc,t=1,n=1,r=!1;function i(i){var o,a=0;i.eachAfter(function(t){var n=t.children;n?(t.x=function(e){return e.reduce(cc,0)/e.length}(n),t.y=function(e){return 1+e.reduce(fc,0)}(n)):(t.x=o?a+=e(t,o):0,t.y=0,o=t)});var u=function(e){for(var t;t=e.children;)e=t[0];return e}(i),l=function(e){for(var t;t=e.children;)e=t[t.length-1];return e}(i),s=u.x-e(u,l)/2,c=l.x+e(l,u)/2;return i.eachAfter(r?function(e){e.x=(e.x-i.x)*t,e.y=(i.y-e.y)*n}:function(e){e.x=(e.x-s)/(c-s)*t,e.y=(1-(i.y?e.y/i.y:1))*n})}return i.separation=function(t){return arguments.length?(e=t,i):e},i.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],i):r?null:[t,n]},i.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],i):r?[t,n]:null},i},e.hierarchy=pc,e.pack=function(){var e=null,t=1,n=1,r=Rc;function i(i){return i.x=t/2,i.y=n/2,e?i.eachBefore(jc(e)).eachAfter(Dc(r,.5)).eachBefore(Uc(1)):i.eachBefore(jc(Fc)).eachAfter(Dc(Rc,1)).eachAfter(Dc(r,i.r/Math.min(t,n))).eachBefore(Uc(Math.min(t,n)/(2*i.r))),i}return i.radius=function(t){return arguments.length?(e=null==(n=t)?null:Pc(n),i):e;var n},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(e){return arguments.length?(r="function"==typeof e?e:Ic(+e),i):r},i},e.packSiblings=function(e){return Nc(e),e},e.packEnclose=bc,e.partition=function(){var e=1,t=1,n=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=n,i.x1=e,i.y1=t/o,i.eachBefore(function(e,t){return function(r){r.children&&Lc(r,r.x0,e*(r.depth+1)/t,r.x1,e*(r.depth+2)/t);var i=r.x0,o=r.y0,a=r.x1-n,u=r.y1-n;a<i&&(i=a=(i+a)/2),u<o&&(o=u=(o+u)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=u}}(t,o)),r&&i.eachBefore(zc),i}return i.round=function(e){return arguments.length?(r=!!e,i):r},i.size=function(n){return arguments.length?(e=+n[0],t=+n[1],i):[e,t]},i.padding=function(e){return arguments.length?(n=+e,i):n},i},e.stratify=function(){var e=Wc,t=Yc;function n(n){var r,i,o,a,u,l,s,c=n.length,f=new Array(c),d={};for(i=0;i<c;++i)r=n[i],u=f[i]=new yc(r),null!=(l=e(r,i,n))&&(l+="")&&(s=Vc+(u.id=l),d[s]=s in d?Bc:u);for(i=0;i<c;++i)if(u=f[i],null!=(l=t(n[i],i,n))&&(l+="")){if(!(a=d[Vc+l]))throw new Error("missing: "+l);if(a===Bc)throw new Error("ambiguous: "+l);a.children?a.children.push(u):a.children=[u],u.parent=a}else{if(o)throw new Error("multiple roots");o=u}if(!o)throw new Error("no root");if(o.parent=qc,o.eachBefore(function(e){e.depth=e.parent.depth+1,--c}).eachBefore(vc),o.parent=null,c>0)throw new Error("cycle");return o}return n.id=function(t){return arguments.length?(e=Pc(t),n):e},n.parentId=function(e){return arguments.length?(t=Pc(e),n):t},n},e.tree=function(){var e=Hc,t=1,n=1,r=null;function i(i){var l=function(e){for(var t,n,r,i,o,a=new Qc(e,0),u=[a];t=u.pop();)if(r=t._.children)for(t.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(n=t.children[i]=new Qc(r[i],i)),n.parent=t;return(a.parent=new Qc(null,0)).children=[a],a}(i);if(l.eachAfter(o),l.parent.m=-l.z,l.eachBefore(a),r)i.eachBefore(u);else{var s=i,c=i,f=i;i.eachBefore(function(e){e.x<s.x&&(s=e),e.x>c.x&&(c=e),e.depth>f.depth&&(f=e)});var d=s===c?1:e(s,c)/2,p=d-s.x,h=t/(c.x+d+p),m=n/(f.depth||1);i.eachBefore(function(e){e.x=(e.x+p)*h,e.y=e.depth*m})}return i}function o(t){var n=t.children,r=t.parent.children,i=t.i?r[t.i-1]:null;if(n){!function(e){for(var t,n=0,r=0,i=e.children,o=i.length;--o>=0;)(t=i[o]).z+=n,t.m+=n,n+=t.s+(r+=t.c)}(t);var o=(n[0].z+n[n.length-1].z)/2;i?(t.z=i.z+e(t._,i._),t.m=t.z-o):t.z=o}else i&&(t.z=i.z+e(t._,i._));t.parent.A=function(t,n,r){if(n){for(var i,o=t,a=t,u=n,l=o.parent.children[0],s=o.m,c=a.m,f=u.m,d=l.m;u=Kc(u),o=$c(o),u&&o;)l=$c(l),(a=Kc(a)).a=t,(i=u.z+f-o.z-s+e(u._,o._))>0&&(Xc(Gc(u,t,r),t,i),s+=i,c+=i),f+=u.m,s+=o.m,d+=l.m,c+=a.m;u&&!Kc(a)&&(a.t=u,a.m+=f-c),o&&!$c(l)&&(l.t=o,l.m+=s-d,r=t)}return r}(t,i,t.parent.A||r[0])}function a(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function u(e){e.x*=t,e.y=e.depth*n}return i.separation=function(t){return arguments.length?(e=t,i):e},i.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],i):r?null:[t,n]},i.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],i):r?[t,n]:null},i},e.treemap=function(){var e=tf,t=!1,n=1,r=1,i=[0],o=Rc,a=Rc,u=Rc,l=Rc,s=Rc;function c(e){return e.x0=e.y0=0,e.x1=n,e.y1=r,e.eachBefore(f),i=[0],t&&e.eachBefore(zc),e}function f(t){var n=i[t.depth],r=t.x0+n,c=t.y0+n,f=t.x1-n,d=t.y1-n;f<r&&(r=f=(r+f)/2),d<c&&(c=d=(c+d)/2),t.x0=r,t.y0=c,t.x1=f,t.y1=d,t.children&&(n=i[t.depth+1]=o(t)/2,r+=s(t)-n,c+=a(t)-n,f-=u(t)-n,d-=l(t)-n,f<r&&(r=f=(r+f)/2),d<c&&(c=d=(c+d)/2),e(t,r,c,f,d))}return c.round=function(e){return arguments.length?(t=!!e,c):t},c.size=function(e){return arguments.length?(n=+e[0],r=+e[1],c):[n,r]},c.tile=function(t){return arguments.length?(e=Pc(t),c):e},c.padding=function(e){return arguments.length?c.paddingInner(e).paddingOuter(e):c.paddingInner()},c.paddingInner=function(e){return arguments.length?(o="function"==typeof e?e:Ic(+e),c):o},c.paddingOuter=function(e){return arguments.length?c.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):c.paddingTop()},c.paddingTop=function(e){return arguments.length?(a="function"==typeof e?e:Ic(+e),c):a},c.paddingRight=function(e){return arguments.length?(u="function"==typeof e?e:Ic(+e),c):u},c.paddingBottom=function(e){return arguments.length?(l="function"==typeof e?e:Ic(+e),c):l},c.paddingLeft=function(e){return arguments.length?(s="function"==typeof e?e:Ic(+e),c):s},c},e.treemapBinary=function(e,t,n,r,i){var o,a,u=e.children,l=u.length,s=new Array(l+1);for(s[0]=a=o=0;o<l;++o)s[o+1]=a+=u[o].value;!function e(t,n,r,i,o,a,l){if(t>=n-1){var c=u[t];return c.x0=i,c.y0=o,c.x1=a,void(c.y1=l)}for(var f=s[t],d=r/2+f,p=t+1,h=n-1;p<h;){var m=p+h>>>1;s[m]<d?p=m+1:h=m}d-s[p-1]<s[p]-d&&t+1<p&&--p;var v=s[p]-f,y=r-v;if(a-i>l-o){var g=(i*y+a*v)/r;e(t,p,v,i,o,g,l),e(p,n,y,g,o,a,l)}else{var b=(o*y+l*v)/r;e(t,p,v,i,o,a,b),e(p,n,y,i,b,a,l)}}(0,l,e.value,t,n,r,i)},e.treemapDice=Lc,e.treemapSlice=Zc,e.treemapSliceDice=function(e,t,n,r,i){(1&e.depth?Zc:Lc)(e,t,n,r,i)},e.treemapSquarify=tf,e.treemapResquarify=nf,e.interpolate=xn,e.interpolateArray=hn,e.interpolateBasis=Zt,e.interpolateBasisClosed=Jt,e.interpolateDate=mn,e.interpolateNumber=vn,e.interpolateObject=yn,e.interpolateRound=wn,e.interpolateString=_n,e.interpolateTransformCss=On,e.interpolateTransformSvg=Cn,e.interpolateZoom=Nn,e.interpolateRgb=an,e.interpolateRgbBasis=dn,e.interpolateRgbBasisClosed=pn,e.interpolateHsl=Rn,e.interpolateHslLong=In,e.interpolateLab=function(e,t){var n=on((e=Rt(e)).l,(t=Rt(t)).l),r=on(e.a,t.a),i=on(e.b,t.b),o=on(e.opacity,t.opacity);return function(t){return e.l=n(t),e.a=r(t),e.b=i(t),e.opacity=o(t),e+""}},e.interpolateHcl=jn,e.interpolateHclLong=Dn,e.interpolateCubehelix=Vn,e.interpolateCubehelixLong=qn,e.quantize=function(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n},e.path=Li,e.polygonArea=function(e){for(var t,n=-1,r=e.length,i=e[r-1],o=0;++n<r;)t=i,i=e[n],o+=t[1]*i[0]-t[0]*i[1];return o/2},e.polygonCentroid=function(e){for(var t,n,r=-1,i=e.length,o=0,a=0,u=e[i-1],l=0;++r<i;)t=u,u=e[r],l+=n=t[0]*u[1]-u[0]*t[1],o+=(t[0]+u[0])*n,a+=(t[1]+u[1])*n;return[o/(l*=3),a/l]},e.polygonHull=function(e){if((n=e.length)<3)return null;var t,n,r=new Array(n),i=new Array(n);for(t=0;t<n;++t)r[t]=[+e[t][0],+e[t][1],t];for(r.sort(of),t=0;t<n;++t)i[t]=[r[t][0],-r[t][1]];var o=af(r),a=af(i),u=a[0]===o[0],l=a[a.length-1]===o[o.length-1],s=[];for(t=o.length-1;t>=0;--t)s.push(e[r[o[t]][2]]);for(t=+u;t<a.length-l;++t)s.push(e[r[a[t]][2]]);return s},e.polygonContains=function(e,t){for(var n,r,i=e.length,o=e[i-1],a=t[0],u=t[1],l=o[0],s=o[1],c=!1,f=0;f<i;++f)o=e[f],n=o[0],(r=o[1])>u!=s>u&&a<(l-n)*(u-r)/(s-r)+n&&(c=!c),l=n,s=r;return c},e.polygonLength=function(e){for(var t,n,r=-1,i=e.length,o=e[i-1],a=o[0],u=o[1],l=0;++r<i;)t=a,n=u,o=e[r],a=o[0],u=o[1],t-=a,n-=u,l+=Math.sqrt(t*t+n*n);return l},e.quadtree=_o,e.queue=hf,e.randomUniform=vf,e.randomNormal=yf,e.randomLogNormal=gf,e.randomBates=_f,e.randomIrwinHall=bf,e.randomExponential=xf,e.request=wf,e.html=Sf,e.json=Tf,e.text=kf,e.xml=Of,e.csv=Mf,e.tsv=Af,e.scaleBand=jf,e.scalePoint=function(){return function e(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return e(n())},t}(jf().paddingInner(1))},e.scaleIdentity=function e(){var t=[0,1];function n(e){return+e}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=Pf.call(e,Uf),n):t.slice()},n.copy=function(){return e().domain(t)},Hf(n)},e.scaleLinear=function e(){var t=Wf(Lf,vn);return t.copy=function(){return Bf(t,e())},Hf(t)},e.scaleLog=function t(){var n=Wf(Kf,Xf).domain([1,10]),r=n.domain,i=10,o=Zf(10),a=Qf(10);function u(){return o=Zf(i),a=Qf(i),r()[0]<0&&(o=Jf(o),a=Jf(a)),n}return n.base=function(e){return arguments.length?(i=+e,u()):i},n.domain=function(e){return arguments.length?(r(e),u()):r()},n.ticks=function(e){var t,n=r(),u=n[0],l=n[n.length-1];(t=l<u)&&(d=u,u=l,l=d);var s,c,f,d=o(u),p=o(l),h=null==e?10:+e,m=[];if(!(i%1)&&p-d<h){if(d=Math.round(d)-1,p=Math.round(p)+1,u>0){for(;d<p;++d)for(c=1,s=a(d);c<i;++c)if(!((f=s*c)<u)){if(f>l)break;m.push(f)}}else for(;d<p;++d)for(c=i-1,s=a(d);c>=1;--c)if(!((f=s*c)<u)){if(f>l)break;m.push(f)}}else m=_(d,p,Math.min(p-d,h)).map(a);return t?m.reverse():m},n.tickFormat=function(t,r){if(null==r&&(r=10===i?".0e":","),"function"!=typeof r&&(r=e.format(r)),t===1/0)return r;null==t&&(t=10);var u=Math.max(1,i*t/n.ticks().length);return function(e){var t=e/a(Math.round(o(e)));return t*i<i-.5&&(t*=i),t<=u?r(e):""}},n.nice=function(){return r($f(r(),{floor:function(e){return a(Math.floor(o(e)))},ceil:function(e){return a(Math.ceil(o(e)))}}))},n.copy=function(){return Bf(n,t().base(i))},n},e.scaleOrdinal=Ff,e.scaleImplicit=If,e.scalePow=td,e.scaleSqrt=function(){return td().exponent(.5)},e.scaleQuantile=function e(){var n=[],r=[],o=[];function a(){var e=0,t=Math.max(1,r.length);for(o=new Array(t-1);++e<t;)o[e-1]=S(n,e/t);return u}function u(e){if(!isNaN(e=+e))return r[i(o,e)]}return u.invertExtent=function(e){var t=r.indexOf(e);return t<0?[NaN,NaN]:[t>0?o[t-1]:n[0],t<o.length?o[t]:n[n.length-1]]},u.domain=function(e){if(!arguments.length)return n.slice();n=[];for(var r,i=0,o=e.length;i<o;++i)null==(r=e[i])||isNaN(r=+r)||n.push(r);return n.sort(t),a()},u.range=function(e){return arguments.length?(r=Rf.call(e),a()):r.slice()},u.quantiles=function(){return o.slice()},u.copy=function(){return e().domain(n).range(r)},u},e.scaleQuantize=function e(){var t=0,n=1,r=1,o=[.5],a=[0,1];function u(e){if(e<=e)return a[i(o,e,0,r)]}function l(){var e=-1;for(o=new Array(r);++e<r;)o[e]=((e+1)*n-(e-r)*t)/(r+1);return u}return u.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],l()):[t,n]},u.range=function(e){return arguments.length?(r=(a=Rf.call(e)).length-1,l()):a.slice()},u.invertExtent=function(e){var i=a.indexOf(e);return i<0?[NaN,NaN]:i<1?[t,o[0]]:i>=r?[o[r-1],n]:[o[i-1],o[i]]},u.copy=function(){return e().domain([t,n]).range(a)},Hf(u)},e.scaleThreshold=function e(){var t=[.5],n=[0,1],r=1;function o(e){if(e<=e)return n[i(t,e,0,r)]}return o.domain=function(e){return arguments.length?(t=Rf.call(e),r=Math.min(t.length,n.length-1),o):t.slice()},o.range=function(e){return arguments.length?(n=Rf.call(e),r=Math.min(t.length,n.length-1),o):n.slice()},o.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},o.copy=function(){return e().domain(t).range(n)},o},e.scaleTime=function(){return xh(Id,Pd,gd,md,pd,fd,sd,od,e.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},e.scaleUtc=function(){return xh(op,rp,Bd,Ld,Ud,jd,sd,od,e.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},e.schemeCategory10=Eh,e.schemeCategory20b=Sh,e.schemeCategory20c=Th,e.schemeCategory20=kh,e.interpolateCubehelixDefault=Oh,e.interpolateRainbow=function(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return Ah.h=360*e-100,Ah.s=1.5-1.5*t,Ah.l=.8-.9*t,Ah+""},e.interpolateWarm=Ch,e.interpolateCool=Mh,e.interpolateViridis=Ph,e.interpolateMagma=Rh,e.interpolateInferno=Ih,e.interpolatePlasma=Fh,e.scaleSequential=function e(t){var n=0,r=1,i=!1;function o(e){var o=(e-n)/(r-n);return t(i?Math.max(0,Math.min(1,o)):o)}return o.domain=function(e){return arguments.length?(n=+e[0],r=+e[1],o):[n,r]},o.clamp=function(e){return arguments.length?(i=!!e,o):i},o.interpolator=function(e){return arguments.length?(t=e,o):t},o.copy=function(){return e(t).domain([n,r]).clamp(i)},Hf(o)},e.creator=K,e.local=G,e.matcher=te,e.mouse=fe,e.namespace=$,e.namespaces=H,e.select=ze,e.selectAll=function(e){return"string"==typeof e?new De([document.querySelectorAll(e)],[document.documentElement]):new De([null==e?[]:e],je)},e.selection=Ue,e.selector=pe,e.selectorAll=me,e.style=Ee,e.touch=Le,e.touches=function(e,t){null==t&&(t=se().touches);for(var n=0,r=t?t.length:0,i=new Array(r);n<r;++n)i[n]=ce(e,t[n]);return i},e.window=we,e.customEvent=le,e.arc=function(){var e=Xh,t=Gh,n=jh(0),r=null,i=Qh,o=Zh,a=Jh,u=null;function l(){var l,s,c,f=+e.apply(this,arguments),d=+t.apply(this,arguments),p=i.apply(this,arguments)-Hh,h=o.apply(this,arguments)-Hh,m=Dh(h-p),v=h>p;if(u||(u=l=Li()),d<f&&(s=d,d=f,f=s),d>Wh)if(m>$h-Wh)u.moveTo(d*zh(p),d*qh(p)),u.arc(0,0,d,p,h,!v),f>Wh&&(u.moveTo(f*zh(h),f*qh(h)),u.arc(0,0,f,h,p,v));else{var y,g,b=p,_=h,x=p,w=h,E=m,S=m,T=a.apply(this,arguments)/2,k=T>Wh&&(r?+r.apply(this,arguments):Bh(f*f+d*d)),O=Vh(Dh(d-f)/2,+n.apply(this,arguments)),C=O,M=O;if(k>Wh){var A=Kh(k/f*qh(T)),N=Kh(k/d*qh(T));(E-=2*A)>Wh?(x+=A*=v?1:-1,w-=A):(E=0,x=w=(p+h)/2),(S-=2*N)>Wh?(b+=N*=v?1:-1,_-=N):(S=0,b=_=(p+h)/2)}var P=d*zh(b),R=d*qh(b),I=f*zh(w),F=f*qh(w);if(O>Wh){var j=d*zh(_),D=d*qh(_),U=f*zh(x),z=f*qh(x);if(m<Yh){var L=E>Wh?function(e,t,n,r,i,o,a,u){var l=n-e,s=r-t,c=a-i,f=u-o,d=(c*(t-o)-f*(e-i))/(f*l-c*s);return[e+d*l,t+d*s]}(P,R,U,z,j,D,I,F):[I,F],V=P-L[0],q=R-L[1],B=j-L[0],W=D-L[1],Y=1/qh(((c=(V*B+q*W)/(Bh(V*V+q*q)*Bh(B*B+W*W)))>1?0:c<-1?Yh:Math.acos(c))/2),H=Bh(L[0]*L[0]+L[1]*L[1]);C=Vh(O,(f-H)/(Y-1)),M=Vh(O,(d-H)/(Y+1))}}S>Wh?M>Wh?(y=em(U,z,P,R,d,M,v),g=em(j,D,I,F,d,M,v),u.moveTo(y.cx+y.x01,y.cy+y.y01),M<O?u.arc(y.cx,y.cy,M,Uh(y.y01,y.x01),Uh(g.y01,g.x01),!v):(u.arc(y.cx,y.cy,M,Uh(y.y01,y.x01),Uh(y.y11,y.x11),!v),u.arc(0,0,d,Uh(y.cy+y.y11,y.cx+y.x11),Uh(g.cy+g.y11,g.cx+g.x11),!v),u.arc(g.cx,g.cy,M,Uh(g.y11,g.x11),Uh(g.y01,g.x01),!v))):(u.moveTo(P,R),u.arc(0,0,d,b,_,!v)):u.moveTo(P,R),f>Wh&&E>Wh?C>Wh?(y=em(I,F,j,D,f,-C,v),g=em(P,R,U,z,f,-C,v),u.lineTo(y.cx+y.x01,y.cy+y.y01),C<O?u.arc(y.cx,y.cy,C,Uh(y.y01,y.x01),Uh(g.y01,g.x01),!v):(u.arc(y.cx,y.cy,C,Uh(y.y01,y.x01),Uh(y.y11,y.x11),!v),u.arc(0,0,f,Uh(y.cy+y.y11,y.cx+y.x11),Uh(g.cy+g.y11,g.cx+g.x11),v),u.arc(g.cx,g.cy,C,Uh(g.y11,g.x11),Uh(g.y01,g.x01),!v))):u.arc(0,0,f,w,x,v):u.lineTo(I,F)}else u.moveTo(0,0);if(u.closePath(),l)return u=null,l+""||null}return l.centroid=function(){var n=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Yh/2;return[zh(r)*n,qh(r)*n]},l.innerRadius=function(t){return arguments.length?(e="function"==typeof t?t:jh(+t),l):e},l.outerRadius=function(e){return arguments.length?(t="function"==typeof e?e:jh(+e),l):t},l.cornerRadius=function(e){return arguments.length?(n="function"==typeof e?e:jh(+e),l):n},l.padRadius=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:jh(+e),l):r},l.startAngle=function(e){return arguments.length?(i="function"==typeof e?e:jh(+e),l):i},l.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:jh(+e),l):o},l.padAngle=function(e){return arguments.length?(a="function"==typeof e?e:jh(+e),l):a},l.context=function(e){return arguments.length?(u=null==e?null:e,l):u},l},e.area=am,e.line=om,e.pie=function(){var e=lm,t=um,n=null,r=jh(0),i=jh($h),o=jh(0);function a(a){var u,l,s,c,f,d=a.length,p=0,h=new Array(d),m=new Array(d),v=+r.apply(this,arguments),y=Math.min($h,Math.max(-$h,i.apply(this,arguments)-v)),g=Math.min(Math.abs(y)/d,o.apply(this,arguments)),b=g*(y<0?-1:1);for(u=0;u<d;++u)(f=m[h[u]=u]=+e(a[u],u,a))>0&&(p+=f);for(null!=t?h.sort(function(e,n){return t(m[e],m[n])}):null!=n&&h.sort(function(e,t){return n(a[e],a[t])}),u=0,s=p?(y-d*b)/p:0;u<d;++u,v=c)l=h[u],f=m[l],c=v+(f>0?f*s:0)+b,m[l]={data:a[l],index:u,value:f,startAngle:v,endAngle:c,padAngle:g};return m}return a.value=function(t){return arguments.length?(e="function"==typeof t?t:jh(+t),a):e},a.sortValues=function(e){return arguments.length?(t=e,n=null,a):t},a.sort=function(e){return arguments.length?(n=e,t=null,a):n},a.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:jh(+e),a):r},a.endAngle=function(e){return arguments.length?(i="function"==typeof e?e:jh(+e),a):i},a.padAngle=function(e){return arguments.length?(o="function"==typeof e?e:jh(+e),a):o},a},e.areaRadial=hm,e.radialArea=hm,e.lineRadial=pm,e.radialLine=pm,e.pointRadial=mm,e.linkHorizontal=function(){return bm(_m)},e.linkVertical=function(){return bm(xm)},e.linkRadial=function(){var e=bm(wm);return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e},e.symbol=function(){var e=jh(Em),t=jh(64),n=null;function r(){var r;if(n||(n=r=Li()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(t){return arguments.length?(e="function"==typeof t?t:jh(t),r):e},r.size=function(e){return arguments.length?(t="function"==typeof e?e:jh(+e),r):t},r.context=function(e){return arguments.length?(n=null==e?null:e,r):n},r},e.symbols=Lm,e.symbolCircle=Em,e.symbolCross=Sm,e.symbolDiamond=Om,e.symbolSquare=Pm,e.symbolStar=Nm,e.symbolTriangle=Im,e.symbolWye=zm,e.curveBasisClosed=function(e){return new Wm(e)},e.curveBasisOpen=function(e){return new Ym(e)},e.curveBasis=function(e){return new Bm(e)},e.curveBundle=$m,e.curveCardinalClosed=Zm,e.curveCardinalOpen=ev,e.curveCardinal=Gm,e.curveCatmullRomClosed=ov,e.curveCatmullRomOpen=uv,e.curveCatmullRom=rv,e.curveLinearClosed=function(e){return new lv(e)},e.curveLinear=nm,e.curveMonotoneX=function(e){return new pv(e)},e.curveMonotoneY=function(e){return new hv(e)},e.curveNatural=function(e){return new vv(e)},e.curveStep=function(e){return new gv(e,.5)},e.curveStepAfter=function(e){return new gv(e,1)},e.curveStepBefore=function(e){return new gv(e,0)},e.stack=function(){var e=jh([]),t=_v,n=bv,r=xv;function i(i){var o,a,u=e.apply(this,arguments),l=i.length,s=u.length,c=new Array(s);for(o=0;o<s;++o){for(var f,d=u[o],p=c[o]=new Array(l),h=0;h<l;++h)p[h]=f=[0,+r(i[h],d,h,i)],f.data=i[h];p.key=d}for(o=0,a=t(c);o<s;++o)c[a[o]].index=o;return n(c,a),c}return i.keys=function(t){return arguments.length?(e="function"==typeof t?t:jh(vm.call(t)),i):e},i.value=function(e){return arguments.length?(r="function"==typeof e?e:jh(+e),i):r},i.order=function(e){return arguments.length?(t=null==e?_v:"function"==typeof e?e:jh(vm.call(e)),i):t},i.offset=function(e){return arguments.length?(n=null==e?bv:e,i):n},i},e.stackOffsetExpand=function(e,t){if((r=e.length)>0){for(var n,r,i,o=0,a=e[0].length;o<a;++o){for(i=n=0;n<r;++n)i+=e[n][o][1]||0;if(i)for(n=0;n<r;++n)e[n][o][1]/=i}bv(e,t)}},e.stackOffsetDiverging=function(e,t){if((u=e.length)>1)for(var n,r,i,o,a,u,l=0,s=e[t[0]].length;l<s;++l)for(o=a=0,n=0;n<u;++n)(i=(r=e[t[n]][l])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):r[0]=o},e.stackOffsetNone=bv,e.stackOffsetSilhouette=function(e,t){if((n=e.length)>0){for(var n,r=0,i=e[t[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<n;++a)u+=e[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}bv(e,t)}},e.stackOffsetWiggle=function(e,t){if((i=e.length)>0&&(r=(n=e[t[0]]).length)>0){for(var n,r,i,o=0,a=1;a<r;++a){for(var u=0,l=0,s=0;u<i;++u){for(var c=e[t[u]],f=c[a][1]||0,d=c[a-1][1]||0,p=(f-d)/2,h=0;h<u;++h){var m=e[t[h]],v=m[a][1]||0,y=m[a-1][1]||0;p+=v-y}l+=f,s+=p*f}n[a-1][1]+=n[a-1][0]=o,l&&(o-=s/l)}n[a-1][1]+=n[a-1][0]=o,bv(e,t)}},e.stackOrderAscending=wv,e.stackOrderDescending=function(e){return wv(e).reverse()},e.stackOrderInsideOut=function(e){var t,n,r=e.length,i=e.map(Ev),o=_v(e).sort(function(e,t){return i[t]-i[e]}),a=0,u=0,l=[],s=[];for(t=0;t<r;++t)n=o[t],a<u?(a+=i[n],l.push(n)):(u+=i[n],s.push(n));return s.reverse().concat(l)},e.stackOrderNone=_v,e.stackOrderReverse=function(e){return _v(e).reverse()},e.timeInterval=id,e.timeMillisecond=od,e.timeMilliseconds=ad,e.utcMillisecond=od,e.utcMilliseconds=ad,e.timeSecond=sd,e.timeSeconds=cd,e.utcSecond=sd,e.utcSeconds=cd,e.timeMinute=fd,e.timeMinutes=dd,e.timeHour=pd,e.timeHours=hd,e.timeDay=md,e.timeDays=vd,e.timeWeek=gd,e.timeWeeks=Td,e.timeSunday=gd,e.timeSundays=Td,e.timeMonday=bd,e.timeMondays=kd,e.timeTuesday=_d,e.timeTuesdays=Od,e.timeWednesday=xd,e.timeWednesdays=Cd,e.timeThursday=wd,e.timeThursdays=Md,e.timeFriday=Ed,e.timeFridays=Ad,e.timeSaturday=Sd,e.timeSaturdays=Nd,e.timeMonth=Pd,e.timeMonths=Rd,e.timeYear=Id,e.timeYears=Fd,e.utcMinute=jd,e.utcMinutes=Dd,e.utcHour=Ud,e.utcHours=zd,e.utcDay=Ld,e.utcDays=Vd,e.utcWeek=Bd,e.utcWeeks=Gd,e.utcSunday=Bd,e.utcSundays=Gd,e.utcMonday=Wd,e.utcMondays=Qd,e.utcTuesday=Yd,e.utcTuesdays=Zd,e.utcWednesday=Hd,e.utcWednesdays=Jd,e.utcThursday=$d,e.utcThursdays=ep,e.utcFriday=Kd,e.utcFridays=tp,e.utcSaturday=Xd,e.utcSaturdays=np,e.utcMonth=rp,e.utcMonths=ip,e.utcYear=op,e.utcYears=ap,e.timeFormatDefaultLocale=sh,e.timeFormatLocale=cp,e.isoFormat=ch,e.isoParse=fh,e.now=Zn,e.timer=tr,e.timerFlush=nr,e.timeout=ar,e.interval=function(e,t,n){var r=new er,i=t;return null==t?(r.restart(e,t,n),r):(t=+t,n=null==n?Zn():+n,r.restart(function o(a){a+=i,r.restart(o,i+=t,n),e(a)},t,n),r)},e.transition=kr,e.active=function(e,t){var n,r,i=e.__transition;if(i)for(r in t=null==t?null:t+"",i)if((n=i[r]).state>cr&&n.name===t)return new Tr([[e]],oi,t,+r);return null},e.interrupt=_r,e.voronoi=function(){var e=Tv,t=kv,n=null;function r(r){return new iy(r.map(function(n,i){var o=[Math.round(e(n,i,r)/ty)*ty,Math.round(t(n,i,r)/ty)*ty];return o.index=i,o.data=n,o}),n)}return r.polygons=function(e){return r(e).polygons()},r.links=function(e){return r(e).links()},r.triangles=function(e){return r(e).triangles()},r.x=function(t){return arguments.length?(e="function"==typeof t?t:Sv(+t),r):e},r.y=function(e){return arguments.length?(t="function"==typeof e?e:Sv(+e),r):t},r.extent=function(e){return arguments.length?(n=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(e){return arguments.length?(n=null==e?null:[[0,0],[+e[0],+e[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},e.zoom=function(){var t,n,r=fy,i=dy,o=hy,a=0,u=1/0,l=-u,s=u,c=l,f=s,d=250,p=Nn,h=[],m=V("start","zoom","end"),v=500,y=150,g=0;function b(e){e.property("__zoom",py).on("wheel.zoom",O).on("mousedown.zoom",C).on("dblclick.zoom",M).filter(my).on("touchstart.zoom",A).on("touchmove.zoom",N).on("touchend.zoom touchcancel.zoom",P).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function _(e,t){return(t=Math.max(a,Math.min(u,t)))===e.k?e:new ay(t,e.x,e.y)}function x(e,t,n){var r=t[0]-n[0]*e.k,i=t[1]-n[1]*e.k;return r===e.x&&i===e.y?e:new ay(e.k,r,i)}function w(e,t){var n=e.invertX(t[0][0])-l,r=e.invertX(t[1][0])-s,i=e.invertY(t[0][1])-c,o=e.invertY(t[1][1])-f;return e.translate(r>n?(n+r)/2:Math.min(0,n)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function E(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function S(e,t,n){e.on("start.zoom",function(){T(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){T(this,arguments).end()}).tween("zoom",function(){var e=arguments,r=T(this,e),o=i.apply(this,e),a=n||E(o),u=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),l=this.__zoom,s="function"==typeof t?t.apply(this,e):t,c=p(l.invert(a).concat(u/l.k),s.invert(a).concat(u/s.k));return function(e){if(1===e)e=s;else{var t=c(e),n=u/t[2];e=new ay(n,a[0]-t[0]*n,a[1]-t[1]*n)}r.zoom(null,e)}})}function T(e,t){for(var n,r=0,i=h.length;r<i;++r)if((n=h[r]).that===e)return n;return new k(e,t)}function k(e,t){this.that=e,this.args=t,this.index=-1,this.active=0,this.extent=i.apply(e,t)}function O(){if(r.apply(this,arguments)){var e=T(this,arguments),t=this.__zoom,n=Math.max(a,Math.min(u,t.k*Math.pow(2,o.apply(this,arguments)))),i=fe(this);if(e.wheel)e.mouse[0][0]===i[0]&&e.mouse[0][1]===i[1]||(e.mouse[1]=t.invert(e.mouse[0]=i)),clearTimeout(e.wheel);else{if(t.k===n)return;e.mouse=[i,t.invert(i)],_r(this),e.start()}cy(),e.wheel=setTimeout(function(){e.wheel=null,e.end()},y),e.zoom("mouse",w(x(_(t,n),e.mouse[0],e.mouse[1]),e.extent))}}function C(){if(!n&&r.apply(this,arguments)){var t=T(this,arguments),i=ze(e.event.view).on("mousemove.zoom",function(){if(cy(),!t.moved){var n=e.event.clientX-a,r=e.event.clientY-u;t.moved=n*n+r*r>g}t.zoom("mouse",w(x(t.that.__zoom,t.mouse[0]=fe(t.that),t.mouse[1]),t.extent))},!0).on("mouseup.zoom",function(){i.on("mousemove.zoom mouseup.zoom",null),We(e.event.view,t.moved),cy(),t.end()},!0),o=fe(this),a=e.event.clientX,u=e.event.clientY;Be(e.event.view),sy(),t.mouse=[o,this.__zoom.invert(o)],_r(this),t.start()}}function M(){if(r.apply(this,arguments)){var t=this.__zoom,n=fe(this),o=t.invert(n),a=t.k*(e.event.shiftKey?.5:2),u=w(x(_(t,a),n,o),i.apply(this,arguments));cy(),d>0?ze(this).transition().duration(d).call(S,u,n):ze(this).call(b.transform,u)}}function A(){if(r.apply(this,arguments)){var n,i,o,a,u=T(this,arguments),l=e.event.changedTouches,s=l.length;for(sy(),i=0;i<s;++i)o=l[i],a=[a=Le(this,l,o.identifier),this.__zoom.invert(a),o.identifier],u.touch0?u.touch1||(u.touch1=a):(u.touch0=a,n=!0);if(t&&(t=clearTimeout(t),!u.touch1))return u.end(),void((a=ze(this).on("dblclick.zoom"))&&a.apply(this,arguments));n&&(t=setTimeout(function(){t=null},v),_r(this),u.start())}}function N(){var n,r,i,o,a=T(this,arguments),u=e.event.changedTouches,l=u.length;for(cy(),t&&(t=clearTimeout(t)),n=0;n<l;++n)r=u[n],i=Le(this,u,r.identifier),a.touch0&&a.touch0[2]===r.identifier?a.touch0[0]=i:a.touch1&&a.touch1[2]===r.identifier&&(a.touch1[0]=i);if(r=a.that.__zoom,a.touch1){var s=a.touch0[0],c=a.touch0[1],f=a.touch1[0],d=a.touch1[1],p=(p=f[0]-s[0])*p+(p=f[1]-s[1])*p,h=(h=d[0]-c[0])*h+(h=d[1]-c[1])*h;r=_(r,Math.sqrt(p/h)),i=[(s[0]+f[0])/2,(s[1]+f[1])/2],o=[(c[0]+d[0])/2,(c[1]+d[1])/2]}else{if(!a.touch0)return;i=a.touch0[0],o=a.touch0[1]}a.zoom("touch",w(x(r,i,o),a.extent))}function P(){var t,r,i=T(this,arguments),o=e.event.changedTouches,a=o.length;for(sy(),n&&clearTimeout(n),n=setTimeout(function(){n=null},v),t=0;t<a;++t)r=o[t],i.touch0&&i.touch0[2]===r.identifier?delete i.touch0:i.touch1&&i.touch1[2]===r.identifier&&delete i.touch1;i.touch1&&!i.touch0&&(i.touch0=i.touch1,delete i.touch1),i.touch0?i.touch0[1]=this.__zoom.invert(i.touch0[0]):i.end()}return b.transform=function(e,t){var n=e.selection?e.selection():e;n.property("__zoom",py),e!==n?S(e,t):n.interrupt().each(function(){T(this,arguments).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()})},b.scaleBy=function(e,t){b.scaleTo(e,function(){return this.__zoom.k*("function"==typeof t?t.apply(this,arguments):t)})},b.scaleTo=function(e,t){b.transform(e,function(){var e=i.apply(this,arguments),n=this.__zoom,r=E(e),o=n.invert(r);return w(x(_(n,"function"==typeof t?t.apply(this,arguments):t),r,o),e)})},b.translateBy=function(e,t,n){b.transform(e,function(){return w(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),i.apply(this,arguments))})},b.translateTo=function(e,t,n){b.transform(e,function(){var e=i.apply(this,arguments),r=this.__zoom,o=E(e);return w(uy.translate(o[0],o[1]).scale(r.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e)})},k.prototype={start:function(){return 1==++this.active&&(this.index=h.push(this)-1,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(h.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(e){le(new function(e,t,n){this.target=e,this.type=t,this.transform=n}(b,e,this.that.__zoom),m.apply,m,[e,this.that,this.args])}},b.wheelDelta=function(e){return arguments.length?(o="function"==typeof e?e:oy(+e),b):o},b.filter=function(e){return arguments.length?(r="function"==typeof e?e:oy(!!e),b):r},b.extent=function(e){return arguments.length?(i="function"==typeof e?e:oy([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),b):i},b.scaleExtent=function(e){return arguments.length?(a=+e[0],u=+e[1],b):[a,u]},b.translateExtent=function(e){return arguments.length?(l=+e[0][0],s=+e[1][0],c=+e[0][1],f=+e[1][1],b):[[l,c],[s,f]]},b.duration=function(e){return arguments.length?(d=+e,b):d},b.interpolate=function(e){return arguments.length?(p=e,b):p},b.on=function(){var e=m.on.apply(m,arguments);return e===m?b:e},b.clickDistance=function(e){return arguments.length?(g=(e=+e)*e,b):Math.sqrt(g)},b},e.zoomTransform=ly,e.zoomIdentity=uy,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=s(n(254)),i=s(n(253)),o=s(n(226)),a=s(n(225)),u=s(n(192)),l=s(n(191));function s(e){return e&&e.__esModule?e:{default:e}}var c={allowsArrayErrors:!0,empty:{},emptyList:[],getIn:i.default,setIn:o.default,deepEqual:a.default,deleteIn:u.default,forEach:function(e,t){return e.forEach(t)},fromJS:function(e){return e},keys:l.default,size:function(e){return e?e.length:0},some:function(e,t){return e.some(t)},splice:r.default,equals:function(e,t){return t.every(function(t){return~e.indexOf(t)})},orderChanged:function(e,t){return t.some(function(t,n){return t!==e[n]})},toJS:function(e){return e}};t.default=c},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return s}),n.d(t,"bindActionCreators",function(){return f}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return p}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(54),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},o={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var i;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,s=t,c=[],f=c,d=!1;function p(){f===c&&(f=c.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1)}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=l(s,e)}finally{d=!1}for(var t=c=f,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:o.INIT}),(i={dispatch:v,subscribe:m,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:o.REPLACE})}})[r.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},i}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a,u=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:o.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,i={},o=0;o<u.length;o++){var s=u[o],c=n[s],f=e[s],d=c(f,t);if(void 0===d){var p=l(s,t);throw new Error(p)}i[s]=d,r=r||d!==f}return r?i:e}}function c(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},i=0;i<n.length;i++){var o=n[i],a=e[o];"function"==typeof a&&(r[o]=c(a,t))}return r}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map(function(e){return e(i)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){d(e,t,n[t])})}return e}({},n,{dispatch:r=p.apply(void 0,o)(n.dispatch)})}}}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(276)},function(e,t,n){(function(e){!function(t){"use strict";function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function i(e,t,n){i.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function o(e,t){o.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function a(e,t){a.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function u(e,t,n){u.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function l(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function s(e){var t=void 0===e?"undefined":w(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function c(e,t,n,r,f,d,p){f=f||[],p=p||[];var h=f.slice(0);if(void 0!==d){if(r){if("function"==typeof r&&r(h,d))return;if("object"===(void 0===r?"undefined":w(r))){if(r.prefilter&&r.prefilter(h,d))return;if(r.normalize){var m=r.normalize(h,d,e,t);m&&(e=m[0],t=m[1])}}}h.push(d)}"regexp"===s(e)&&"regexp"===s(t)&&(e=e.toString(),t=t.toString());var v=void 0===e?"undefined":w(e),y=void 0===t?"undefined":w(t),g="undefined"!==v||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),b="undefined"!==y||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!g&&b)n(new o(h,t));else if(!b&&g)n(new a(h,e));else if(s(e)!==s(t))n(new i(h,e,t));else if("date"===s(e)&&e-t!=0)n(new i(h,e,t));else if("object"===v&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&n(new i(h,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var _;for(e.length,_=0;_<e.length;_++)_>=t.length?n(new u(h,_,new a(void 0,e[_]))):c(e[_],t[_],n,r,h,_,p);for(;_<t.length;)n(new u(h,_,new o(void 0,t[_++])))}else{var x=Object.keys(e),E=Object.keys(t);x.forEach(function(i,o){var a=E.indexOf(i);a>=0?(c(e[i],t[i],n,r,h,i,p),E=l(E,a)):c(e[i],void 0,n,r,h,i,p)}),E.forEach(function(e){c(void 0,t[e],n,r,h,e,p)})}p.length=p.length-1}else e!==t&&("number"===v&&isNaN(e)&&isNaN(t)||n(new i(h,e,t)))}function f(e,t,n,r){return r=r||[],c(e,t,function(e){e&&r.push(e)},n),r.length?r:void 0}function d(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,i=-1,o=n.path?n.path.length-1:0;++i<o;)void 0===r[n.path[i]]&&(r[n.path[i]]="number"==typeof n.path[i]?[]:{}),r=r[n.path[i]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var i,o=t[n],a=r.path.length-1;for(i=0;i<a;i++)o=o[r.path[i]];switch(r.kind){case"A":e(o[r.path[i]],r.index,r.item);break;case"D":delete o[r.path[i]];break;case"E":case"N":o[r.path[i]]=r.rhs}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":t=l(t,n);break;case"E":case"N":t[n]=r.rhs}return t}(n.path?r[n.path[i]]:r,n.index,n.item);break;case"D":delete r[n.path[i]];break;case"E":case"N":r[n.path[i]]=n.rhs}}}function p(e,t,n,r){var i=f(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}i?i.forEach(function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,i=e.rhs,o=e.index,a=e.item;switch(t){case"E":return[n.join("."),r,"→",i];case"N":return[n.join("."),i];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+o+"]",a];default:return[]}}(e);n.log.apply(n,["%c "+T[t].text,function(e){return"color: "+T[e].color+"; font-weight: bold"}(t)].concat(E(r)))}):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function h(e,t,n,r){switch(void 0===e?"undefined":w(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,E(n)):e[r];case"function":return e(t);default:return e}}function m(e,t){var n=t.logger,r=t.actionTransformer,i=t.titleFormatter,o=void 0===i?function(e){var t=e.timestamp,n=e.duration;return function(e,r,i){var o=["action"];return o.push("%c"+String(e.type)),t&&o.push("%c@ "+r),n&&o.push("%c(in "+i.toFixed(2)+" ms)"),o.join(" ")}}(t):i,a=t.collapsed,u=t.colors,l=t.level,s=t.diff,c=void 0===t.titleFormatter;e.forEach(function(i,f){var d=i.started,m=i.startedTime,v=i.action,y=i.prevState,g=i.error,b=i.took,x=i.nextState,w=e[f+1];w&&(x=w.prevState,b=w.started-d);var E=r(v),S="function"==typeof a?a(function(){return x},v,i):a,T=_(m),k=u.title?"color: "+u.title(E)+";":"",O=["color: gray; font-weight: lighter;"];O.push(k),t.timestamp&&O.push("color: gray; font-weight: lighter;"),t.duration&&O.push("color: gray; font-weight: lighter;");var C=o(E,T,b);try{S?u.title&&c?n.groupCollapsed.apply(n,["%c "+C].concat(O)):n.groupCollapsed(C):u.title&&c?n.group.apply(n,["%c "+C].concat(O)):n.group(C)}catch(e){n.log(C)}var M=h(l,E,[y],"prevState"),A=h(l,E,[E],"action"),N=h(l,E,[g,y],"error"),P=h(l,E,[x],"nextState");if(M)if(u.prevState){var R="color: "+u.prevState(y)+"; font-weight: bold";n[M]("%c prev state",R,y)}else n[M]("prev state",y);if(A)if(u.action){var I="color: "+u.action(E)+"; font-weight: bold";n[A]("%c action    ",I,E)}else n[A]("action    ",E);if(g&&N)if(u.error){var F="color: "+u.error(g,y)+"; font-weight: bold;";n[N]("%c error     ",F,g)}else n[N]("error     ",g);if(P)if(u.nextState){var j="color: "+u.nextState(x)+"; font-weight: bold";n[P]("%c next state",j,x)}else n[P]("next state",x);s&&p(y,x,n,S);try{n.groupEnd()}catch(e){n.log("—— log end ——")}})}function v(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},k,e),n=t.logger,r=t.stateTransformer,i=t.errorTransformer,o=t.predicate,a=t.logErrors,u=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var l=[];return function(e){var n=e.getState;return function(e){return function(s){if("function"==typeof o&&!o(n,s))return e(s);var c={};l.push(c),c.started=x.now(),c.startedTime=new Date,c.prevState=r(n()),c.action=s;var f=void 0;if(a)try{f=e(s)}catch(e){c.error=i(e)}else f=e(s);c.took=x.now()-c.started,c.nextState=r(n());var d=t.diff&&"function"==typeof u?u(n,s):t.diff;if(m(l,Object.assign({},t,{diff:d})),l.length=0,c.error)throw c.error;return f}}}}var y,g,b=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},_=function(e){return b(e.getHours(),2)+":"+b(e.getMinutes(),2)+":"+b(e.getSeconds(),2)+"."+b(e.getMilliseconds(),3)},x="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},S=[];y="object"===(void 0===e?"undefined":w(e))&&e?e:"undefined"!=typeof window?window:{},(g=y.DeepDiff)&&S.push(function(){void 0!==g&&y.DeepDiff===f&&(y.DeepDiff=g,g=void 0)}),n(i,r),n(o,r),n(a,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:c,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&c(e,t,function(r){n&&!n(e,t,r)||d(e,t,r)})},enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,i,o=e;for(i=n.path.length-1,r=0;r<i;r++)void 0===o[n.path[r]]&&(o[n.path[r]]={}),o=o[n.path[r]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var i,o=t[n],a=r.path.length-1;for(i=0;i<a;i++)o=o[r.path[i]];switch(r.kind){case"A":e(o[r.path[i]],r.index,r.item);break;case"D":case"E":o[r.path[i]]=r.lhs;break;case"N":delete o[r.path[i]]}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":case"E":t[n]=r.lhs;break;case"N":t=l(t,n)}return t}(o[n.path[r]],n.index,n.item);break;case"D":case"E":o[n.path[r]]=n.lhs;break;case"N":delete o[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==g},enumerable:!0},noConflict:{value:function(){return S&&(S.forEach(function(e){e()}),S=null),f},enumerable:!0}});var T={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},k={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},O=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?v()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=k,t.createLogger=v,t.logger=O,t.default=O,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(40))},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i,o,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,i,o,a,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){var r=n(79),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();e.exports=o},function(e,t,n){e.exports=n(268)()},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";t.__esModule=!0,t.withReduxForm=t.ReduxFormContext=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o=r.createContext(null);t.ReduxFormContext=o;t.withReduxForm=function(e){var t=function(t){var n,a;function u(){return t.apply(this,arguments)||this}return a=t,(n=u).prototype=Object.create(a.prototype),n.prototype.constructor=n,n.__proto__=a,u.prototype.render=function(){var t=this.props,n=t.forwardedRef,a=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(t,["forwardedRef"]);return r.createElement(o.Consumer,{children:function(t){return r.createElement(e,i({_reduxForm:t,ref:n},a))}})},u}(r.Component);return r.forwardRef(function(e,n){return r.createElement(t,i({},e,{forwardedRef:n}))})}},function(e,t,n){var r=n(245),i=n(242);e.exports=function(e,t){var n=i(e,t);return r(n)?n:void 0}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=n(39),i=function(e,t,n){return(0,r.isValidElementType)(e[t])?null:new Error("Invalid prop `"+t+"` supplied to `"+n+"`.")};t.default=i},function(e,t,n){e.exports=n(273)()},function(e,t,n){"use strict";t.__esModule=!0,t.updateSyncErrors=t.updateSyncWarnings=t.untouch=t.unregisterField=t.touch=t.submit=t.stopSubmit=t.stopAsyncValidation=t.startSubmit=t.startAsyncValidation=t.setSubmitSucceeded=t.setSubmitFailed=t.resetSection=t.reset=t.registerField=t.initialize=t.focus=t.destroy=t.clearSubmitErrors=t.clearFields=t.clearAsyncError=t.change=t.blur=t.autofill=t.arrayUnshift=t.arraySwap=t.arraySplice=t.arrayShift=t.arrayRemoveAll=t.arrayRemove=t.arrayPush=t.arrayPop=t.arrayMove=t.arrayInsert=t.actionTypes=t.formPropTypes=t.fieldArrayPropTypes=t.fieldArrayMetaPropTypes=t.fieldArrayFieldsPropTypes=t.fieldPropTypes=t.fieldMetaPropTypes=t.fieldInputPropTypes=t.values=t.reducer=t.reduxForm=t.hasSubmitFailed=t.hasSubmitSucceeded=t.isSubmitting=t.isValid=t.isPristine=t.isInvalid=t.isDirty=t.isAsyncValidating=t.getFormSubmitErrors=t.getFormSyncWarnings=t.getFormAsyncErrors=t.getFormMeta=t.getFormSyncErrors=t.getFormInitialValues=t.getFormValues=t.getFormNames=t.getFormError=t.formValues=t.formValueSelector=t.FieldArray=t.Fields=t.Field=t.propTypes=t.SubmissionError=t.FormSection=t.FormName=t.Form=t.defaultShouldWarn=t.defaultShouldError=t.defaultShouldValidate=t.defaultShouldAsyncValidate=void 0;var r=L(n(89)),i=z(n(53)),o=L(n(88));t.defaultShouldAsyncValidate=o.default;var a=L(n(87));t.defaultShouldValidate=a.default;var u=L(n(86));t.defaultShouldError=u.default;var l=L(n(85));t.defaultShouldWarn=l.default;var s=L(n(269));t.Form=s.default;var c=L(n(264));t.FormName=c.default;var f=L(n(263));t.FormSection=f.default;var d=L(n(262));t.SubmissionError=d.default;var p=z(n(260));t.propTypes=p.default,t.fieldInputPropTypes=p.fieldInputPropTypes,t.fieldMetaPropTypes=p.fieldMetaPropTypes,t.fieldPropTypes=p.fieldPropTypes,t.fieldArrayFieldsPropTypes=p.fieldArrayFieldsPropTypes,t.fieldArrayMetaPropTypes=p.fieldArrayMetaPropTypes,t.fieldArrayPropTypes=p.fieldArrayPropTypes,t.formPropTypes=p.formPropTypes;var h=L(n(259));t.Field=h.default;var m=L(n(190));t.Fields=m.default;var v=L(n(187));t.FieldArray=v.default;var y=L(n(169));t.formValueSelector=y.default;var g=L(n(167));t.formValues=g.default;var b=L(n(163));t.getFormError=b.default;var _=L(n(161));t.getFormNames=_.default;var x=L(n(159));t.getFormValues=x.default;var w=L(n(157));t.getFormInitialValues=w.default;var E=L(n(155));t.getFormSyncErrors=E.default;var S=L(n(153));t.getFormMeta=S.default;var T=L(n(151));t.getFormAsyncErrors=T.default;var k=L(n(149));t.getFormSyncWarnings=k.default;var O=L(n(147));t.getFormSubmitErrors=O.default;var C=L(n(145));t.isAsyncValidating=C.default;var M=L(n(143));t.isDirty=M.default;var A=L(n(141));t.isInvalid=A.default;var N=L(n(138));t.isPristine=N.default;var P=L(n(137));t.isValid=P.default;var R=L(n(136));t.isSubmitting=R.default;var I=L(n(134));t.hasSubmitSucceeded=I.default;var F=L(n(132));t.hasSubmitFailed=F.default;var j=L(n(130));t.reduxForm=j.default;var D=L(n(97));t.reducer=D.default;var U=L(n(94));function z(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function L(e){return e&&e.__esModule?e:{default:e}}t.values=U.default;var V=i;t.actionTypes=V;var q=r.default.arrayInsert;t.arrayInsert=q;var B=r.default.arrayMove;t.arrayMove=B;var W=r.default.arrayPop;t.arrayPop=W;var Y=r.default.arrayPush;t.arrayPush=Y;var H=r.default.arrayRemove;t.arrayRemove=H;var $=r.default.arrayRemoveAll;t.arrayRemoveAll=$;var K=r.default.arrayShift;t.arrayShift=K;var X=r.default.arraySplice;t.arraySplice=X;var G=r.default.arraySwap;t.arraySwap=G;var Q=r.default.arrayUnshift;t.arrayUnshift=Q;var Z=r.default.autofill;t.autofill=Z;var J=r.default.blur;t.blur=J;var ee=r.default.change;t.change=ee;var te=r.default.clearAsyncError;t.clearAsyncError=te;var ne=r.default.clearFields;t.clearFields=ne;var re=r.default.clearSubmitErrors;t.clearSubmitErrors=re;var ie=r.default.destroy;t.destroy=ie;var oe=r.default.focus;t.focus=oe;var ae=r.default.initialize;t.initialize=ae;var ue=r.default.registerField;t.registerField=ue;var le=r.default.reset;t.reset=le;var se=r.default.resetSection;t.resetSection=se;var ce=r.default.setSubmitFailed;t.setSubmitFailed=ce;var fe=r.default.setSubmitSucceeded;t.setSubmitSucceeded=fe;var de=r.default.startAsyncValidation;t.startAsyncValidation=de;var pe=r.default.startSubmit;t.startSubmit=pe;var he=r.default.stopAsyncValidation;t.stopAsyncValidation=he;var me=r.default.stopSubmit;t.stopSubmit=me;var ve=r.default.submit;t.submit=ve;var ye=r.default.touch;t.touch=ye;var ge=r.default.unregisterField;t.unregisterField=ge;var be=r.default.untouch;t.untouch=be;var _e=r.default.updateSyncWarnings;t.updateSyncWarnings=_e;var xe=r.default.updateSyncErrors;t.updateSyncErrors=xe},function(e,t,n){var r=n(36),i=n(252),o=n(251),a="[object Null]",u="[object Undefined]",l=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?u:a:l&&l in Object(e)?i(e):o(e)}},function(e,t,n){var r=n(34),i=n(46);e.exports=function(e){return null!=e&&i(e.length)&&!r(e)}},function(e,t,n){var r=n(37),i=1/0;e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-i?"-0":t}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e,t){var n=e._reduxForm.sectionPrefix;return n?n+"."+t:t};t.default=r},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!==e&&void 0!==e&&this.setState(e)}function i(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!==n&&void 0!==n?n:null}.bind(this))}function o(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,u=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?u="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var l=e.displayName||e.name,s="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+l+" uses "+s+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=i),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=o;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return a}),r.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0},function(e,t,n){var r=n(67);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(200),i=n(199),o=n(198),a=o&&o.isTypedArray,u=a?i(a):r;e.exports=u},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e){var r=n(9),i=n(201),o="object"==typeof t&&t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===o?r.Buffer:void 0,l=(u?u.isBuffer:void 0)||i;e.exports=l}).call(this,n(27)(e))},function(e,t,n){var r=n(202),i=n(14),o=Object.prototype,a=o.hasOwnProperty,u=o.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(e){return i(e)&&a.call(e,"callee")&&!u.call(e,"callee")};e.exports=l},function(e,t,n){var r=n(224),i=n(14);e.exports=function e(t,n,o,a,u){return t===n||(null==t||null==n||!i(t)&&!i(n)?t!=t&&n!=n:r(t,n,o,a,e,u))}},function(e,t,n){var r=n(231);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(21);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(237),i=n(236),o=n(235),a=n(234),u=n(233);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(18),i=n(11),o="[object AsyncFunction]",a="[object Function]",u="[object GeneratorFunction]",l="[object Proxy]";e.exports=function(e){if(!i(e))return!1;var t=r(e);return t==a||t==u||t==o||t==l}},function(e,t,n){var r=n(13)(Object,"create");e.exports=r},function(e,t,n){var r=n(9).Symbol;e.exports=r},function(e,t,n){var r=n(18),i=n(14),o="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||i(e)&&r(e)==o}},function(e,t,n){var r=n(81),i=n(80),o=n(7),a=n(37),u=n(78),l=n(20),s=n(76);e.exports=function(e){return o(e)?r(e,l):a(e)?[e]:i(u(s(e)))}},function(e,t,n){"use strict";e.exports=n(271)},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof e.then}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(139))&&r.__esModule?r:{default:r};var o=function(e){var t=e.getIn,n=e.keys,r=(0,i.default)(e);return function(e,i,o){return void 0===o&&(o=!1),function(a){var u=(i||function(e){return t(e,"form")})(a);if(t(u,e+".syncError"))return!1;if(!o&&t(u,e+".error"))return!1;var l=t(u,e+".syncErrors"),s=t(u,e+".asyncErrors"),c=o?void 0:t(u,e+".submitErrors");if(!l&&!s&&!c)return!0;var f=t(u,e+".registeredFields");return!f||!n(f).filter(function(e){return t(f,"['"+e+"'].count")>0}).some(function(e){return r(t(f,"['"+e+"']"),l,s,c)})}}};t.default=o},function(e,t){e.exports=function(e){return e}},function(e,t,n){var r=n(7),i=n(37),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!i(e))||a.test(e)||!o.test(e)||null!=t&&e in Object(t)}},function(e,t,n){var r=n(24),i=n(184),o=n(182);e.exports=function(e,t){var n={};return t=o(t,3),i(e,function(e,i,o){r(n,i,t(e,i,o))}),n}},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var i=typeof e;return!!(t=null==t?n:t)&&("number"==i||"symbol"!=i&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(72),i=n(71),o=n(19);e.exports=function(e){return o(e)?r(e):i(e)}},function(e,t,n){var r=n(33),i=n(223),o=n(222),a=n(221),u=n(220),l=n(219);function s(e){var t=this.__data__=new r(e);this.size=t.size}s.prototype.clear=i,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=u,s.prototype.set=l,e.exports=s},function(e,t,n){var r=n(13)(n(9),"Map");e.exports=r},function(e,t,n){var r=n(248),i=n(232),o=n(230),a=n(229),u=n(228);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){return!!(e&&e.stopPropagation&&e.preventDefault)};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.UPDATE_SYNC_WARNINGS=t.UPDATE_SYNC_ERRORS=t.UNTOUCH=t.UNREGISTER_FIELD=t.TOUCH=t.SUBMIT=t.STOP_SUBMIT=t.STOP_ASYNC_VALIDATION=t.START_SUBMIT=t.START_ASYNC_VALIDATION=t.SET_SUBMIT_SUCCEEDED=t.SET_SUBMIT_FAILED=t.RESET_SECTION=t.RESET=t.REGISTER_FIELD=t.INITIALIZE=t.FOCUS=t.DESTROY=t.CLEAR_ASYNC_ERROR=t.CLEAR_SUBMIT_ERRORS=t.CLEAR_SUBMIT=t.CLEAR_FIELDS=t.CHANGE=t.BLUR=t.AUTOFILL=t.ARRAY_SWAP=t.ARRAY_UNSHIFT=t.ARRAY_SPLICE=t.ARRAY_SHIFT=t.ARRAY_REMOVE_ALL=t.ARRAY_REMOVE=t.ARRAY_PUSH=t.ARRAY_POP=t.ARRAY_MOVE=t.ARRAY_INSERT=t.prefix=void 0;var r="@@redux-form/";t.prefix=r;t.ARRAY_INSERT="@@redux-form/ARRAY_INSERT";t.ARRAY_MOVE="@@redux-form/ARRAY_MOVE";t.ARRAY_POP="@@redux-form/ARRAY_POP";t.ARRAY_PUSH="@@redux-form/ARRAY_PUSH";t.ARRAY_REMOVE="@@redux-form/ARRAY_REMOVE";t.ARRAY_REMOVE_ALL="@@redux-form/ARRAY_REMOVE_ALL";t.ARRAY_SHIFT="@@redux-form/ARRAY_SHIFT";t.ARRAY_SPLICE="@@redux-form/ARRAY_SPLICE";t.ARRAY_UNSHIFT="@@redux-form/ARRAY_UNSHIFT";t.ARRAY_SWAP="@@redux-form/ARRAY_SWAP";t.AUTOFILL="@@redux-form/AUTOFILL";t.BLUR="@@redux-form/BLUR";t.CHANGE="@@redux-form/CHANGE";t.CLEAR_FIELDS="@@redux-form/CLEAR_FIELDS";t.CLEAR_SUBMIT="@@redux-form/CLEAR_SUBMIT";t.CLEAR_SUBMIT_ERRORS="@@redux-form/CLEAR_SUBMIT_ERRORS";t.CLEAR_ASYNC_ERROR="@@redux-form/CLEAR_ASYNC_ERROR";t.DESTROY="@@redux-form/DESTROY";t.FOCUS="@@redux-form/FOCUS";t.INITIALIZE="@@redux-form/INITIALIZE";t.REGISTER_FIELD="@@redux-form/REGISTER_FIELD";t.RESET="@@redux-form/RESET";t.RESET_SECTION="@@redux-form/RESET_SECTION";t.SET_SUBMIT_FAILED="@@redux-form/SET_SUBMIT_FAILED";t.SET_SUBMIT_SUCCEEDED="@@redux-form/SET_SUBMIT_SUCCEEDED";t.START_ASYNC_VALIDATION="@@redux-form/START_ASYNC_VALIDATION";t.START_SUBMIT="@@redux-form/START_SUBMIT";t.STOP_ASYNC_VALIDATION="@@redux-form/STOP_ASYNC_VALIDATION";t.STOP_SUBMIT="@@redux-form/STOP_SUBMIT";t.SUBMIT="@@redux-form/SUBMIT";t.TOUCH="@@redux-form/TOUCH";t.UNREGISTER_FIELD="@@redux-form/UNREGISTER_FIELD";t.UNTOUCH="@@redux-form/UNTOUCH";t.UPDATE_SYNC_ERRORS="@@redux-form/UPDATE_SYNC_ERRORS";t.UPDATE_SYNC_WARNINGS="@@redux-form/UPDATE_SYNC_WARNINGS"},function(e,t,n){"use strict";(function(e,r){var i,o=n(91);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(o.a)(i);t.a=a}).call(this,n(40),n(270)(e))},function(e,t,n){"use strict";var r=n(39),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={};a[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var u=Object.defineProperty,l=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,c=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var p=f(n);p&&p!==d&&e(t,p,r)}var h=l(n);s&&(h=h.concat(s(n)));for(var m=a[t.$$typeof]||i,v=a[n.$$typeof]||i,y=0;y<h.length;++y){var g=h[y];if(!(o[g]||r&&r[g]||v&&v[g]||m&&m[g])){var b=c(n,g);try{u(t,g,b)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(52))&&r.__esModule?r:{default:r};var o=function(e){var t=(0,i.default)(e);return t&&e.preventDefault(),t};t.default=o},function(e,t,n){var r=n(72),i=n(115),o=n(19);e.exports=function(e){return o(e)?r(e,!0):i(e)}},function(e,t){e.exports=function(e,t){if("__proto__"!=t)return e[t]}},function(e,t,n){var r=n(70)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(24),i=n(21);e.exports=function(e,t,n){(void 0===n||i(e[t],n))&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.deepEqual,n=e.empty,r=e.getIn;return function(e,i){return function(o){for(var a=(i||function(e){return r(e,"form")})(o),u=arguments.length,l=new Array(u>1?u-1:0),s=1;s<u;s++)l[s-1]=arguments[s];if(l&&l.length)return l.every(function(n){var i=r(a,e+".initial."+n),o=r(a,e+".values."+n);return t(i,o)});var c=r(a,e+".initial")||n,f=r(a,e+".values")||c;return t(c,f)}}};t.default=r},function(e,t,n){var r=n(7),i=n(44),o=n(78),a=n(76);e.exports=function(e,t){return r(e)?e:i(e,t)?[e]:o(a(e))}},function(e,t,n){var r=n(62),i=n(20);e.exports=function(e,t){for(var n=0,o=(t=r(t,e)).length;null!=e&&n<o;)e=e[i(t[n++])];return n&&n==o?e:void 0}},function(e,t){e.exports=function(e,t){return function(n){return null!=n&&n[e]===t&&(void 0!==t||e in Object(n))}}},function(e,t,n){var r=n(11);e.exports=function(e){return e==e&&!r(e)}},function(e,t,n){var r=n(183)();e.exports=r},function(e,t,n){var r=n(13),i=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(75))&&r.__esModule?r:{default:r};var o=function(e,t,n,r,i,o){if(o)return e===t},a=function(e,t,n){var r=(0,i.default)(e.props,t,o),a=(0,i.default)(e.state,n,o);return!r||!a};t.default=a},function(e,t,n){var r=n(196),i=n(50),o=n(195),a=n(194),u=n(193),l=n(18),s=n(77),c=s(r),f=s(i),d=s(o),p=s(a),h=s(u),m=l;(r&&"[object DataView]"!=m(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=m(new i)||o&&"[object Promise]"!=m(o.resolve())||a&&"[object Set]"!=m(new a)||u&&"[object WeakMap]"!=m(new u))&&(m=function(e){var t=l(e),n="[object Object]"==t?e.constructor:void 0,r=n?s(n):"";if(r)switch(r){case c:return"[object DataView]";case f:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=m},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(25),i=n(197),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=[];for(var n in Object(e))o.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var r=n(203),i=n(29),o=n(7),a=n(28),u=n(47),l=n(26),s=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=o(e),c=!n&&i(e),f=!n&&!c&&a(e),d=!n&&!c&&!f&&l(e),p=n||c||f||d,h=p?r(e.length,String):[],m=h.length;for(var v in e)!t&&!s.call(e,v)||p&&("length"==v||f&&("offset"==v||"parent"==v)||d&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||u(v,m))||h.push(v);return h}},function(e,t,n){var r=n(9).Uint8Array;e.exports=r},function(e,t,n){var r=n(218),i=n(215),o=n(214),a=1,u=2;e.exports=function(e,t,n,l,s,c){var f=n&a,d=e.length,p=t.length;if(d!=p&&!(f&&p>d))return!1;var h=c.get(e);if(h&&c.get(t))return h==t;var m=-1,v=!0,y=n&u?new r:void 0;for(c.set(e,t),c.set(t,e);++m<d;){var g=e[m],b=t[m];if(l)var _=f?l(b,g,m,t,e,c):l(g,b,m,e,t,c);if(void 0!==_){if(_)continue;v=!1;break}if(y){if(!i(t,function(e,t){if(!o(y,t)&&(g===e||s(g,e,n,l,c)))return y.push(t)})){v=!1;break}}else if(g!==b&&!s(g,b,n,l,c)){v=!1;break}}return c.delete(e),c.delete(t),v}},function(e,t,n){var r=n(30);e.exports=function(e,t,n){var i=(n="function"==typeof n?n:void 0)?n(e,t):void 0;return void 0===i?r(e,t,void 0,n):!!i}},function(e,t,n){var r=n(227);e.exports=function(e){return null==e?"":r(e)}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=n(250)(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(r,function(e,n,r,o){t.push(r?o.replace(i,"$1"):n||e)}),t});e.exports=o},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(40))},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r="undefined"!=typeof window&&window.navigator&&window.navigator.product&&"ReactNative"===window.navigator.product;t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(256)),i=o(n(82));function o(e){return e&&e.__esModule?e:{default:e}}var a=function(e,t){var n=t.name,o=t.parse,a=t.normalize,u=(0,r.default)(e,i.default);return o&&(u=o(u,n)),a&&(u=a(n,u)),u};t.default=a},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}t.__esModule=!0,t.default=void 0;var i=function(e,t,n){var i=e.getIn,o=e.toJS,a=e.deepEqual,u=n.asyncError,l=n.asyncValidating,s=n.onBlur,c=n.onChange,f=n.onDrop,d=n.onDragStart,p=n.dirty,h=n.dispatch,m=n.onFocus,v=n.form,y=n.format,g=n.initial,b=(n.parse,n.pristine),_=n.props,x=n.state,w=n.submitError,E=n.submitFailed,S=n.submitting,T=n.syncError,k=n.syncWarning,O=(n.validate,n.value),C=n._value,M=(n.warn,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(n,["asyncError","asyncValidating","onBlur","onChange","onDrop","onDragStart","dirty","dispatch","onFocus","form","format","initial","parse","pristine","props","state","submitError","submitFailed","submitting","syncError","syncWarning","validate","value","_value","warn"])),A=T||u||w,N=k,P=function(e,n){if(null===n)return e;var r=null==e?"":e;return n?n(e,t):r}(O,y);return{input:function(e,t,n,i){var o=t.value;return"checkbox"===e?r({},t,{checked:!!o}):"radio"===e?r({},t,{checked:i(o,n),value:n}):"select-multiple"===e?r({},t,{value:o||[]}):"file"===e?r({},t,{value:o||void 0}):t}(M.type,{name:t,onBlur:s,onChange:c,onDragStart:d,onDrop:f,onFocus:m,value:P},C,a),meta:r({},o(x),{active:!(!x||!i(x,"active")),asyncValidating:l,autofilled:!(!x||!i(x,"autofilled")),dirty:p,dispatch:h,error:A,form:v,initial:g,warning:N,invalid:!!A,pristine:b,submitting:!!S,submitFailed:!!E,touched:!(!x||!i(x,"touched")),valid:!A,visited:!(!x||!i(x,"visited"))}),custom:r({},M,_)}};t.default=i},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.values,n=e.nextProps,r=e.initialRender,i=e.lastFieldValidatorKeys,o=e.fieldValidatorKeys,a=e.structure;return!!r||!a.deepEqual(t,n&&n.values)||!a.deepEqual(i,o)};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.values,n=e.nextProps,r=e.initialRender,i=e.lastFieldValidatorKeys,o=e.fieldValidatorKeys,a=e.structure;return!!r||!a.deepEqual(t,n&&n.values)||!a.deepEqual(i,o)};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.values,n=e.nextProps,r=e.initialRender,i=e.lastFieldValidatorKeys,o=e.fieldValidatorKeys,a=e.structure;return!!r||!a.deepEqual(t,n&&n.values)||!a.deepEqual(i,o)};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.initialized,n=e.trigger,r=e.pristine;if(!e.syncValidationPasses)return!1;switch(n){case"blur":case"change":return!0;case"submit":return!r||!t;default:return!1}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=n(53);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o={arrayInsert:function(e,t,n,i){return{type:r.ARRAY_INSERT,meta:{form:e,field:t,index:n},payload:i}},arrayMove:function(e,t,n,i){return{type:r.ARRAY_MOVE,meta:{form:e,field:t,from:n,to:i}}},arrayPop:function(e,t){return{type:r.ARRAY_POP,meta:{form:e,field:t}}},arrayPush:function(e,t,n){return{type:r.ARRAY_PUSH,meta:{form:e,field:t},payload:n}},arrayRemove:function(e,t,n){return{type:r.ARRAY_REMOVE,meta:{form:e,field:t,index:n}}},arrayRemoveAll:function(e,t){return{type:r.ARRAY_REMOVE_ALL,meta:{form:e,field:t}}},arrayShift:function(e,t){return{type:r.ARRAY_SHIFT,meta:{form:e,field:t}}},arraySplice:function(e,t,n,i,o){var a={type:r.ARRAY_SPLICE,meta:{form:e,field:t,index:n,removeNum:i}};return void 0!==o&&(a.payload=o),a},arraySwap:function(e,t,n,i){if(n===i)throw new Error("Swap indices cannot be equal");if(n<0||i<0)throw new Error("Swap indices cannot be negative");return{type:r.ARRAY_SWAP,meta:{form:e,field:t,indexA:n,indexB:i}}},arrayUnshift:function(e,t,n){return{type:r.ARRAY_UNSHIFT,meta:{form:e,field:t},payload:n}},autofill:function(e,t,n){return{type:r.AUTOFILL,meta:{form:e,field:t},payload:n}},blur:function(e,t,n,i){return{type:r.BLUR,meta:{form:e,field:t,touch:i},payload:n}},change:function(e,t,n,i,o){return{type:r.CHANGE,meta:{form:e,field:t,touch:i,persistentSubmitErrors:o},payload:n}},clearFields:function(e,t,n){for(var i=arguments.length,o=new Array(i>3?i-3:0),a=3;a<i;a++)o[a-3]=arguments[a];return{type:r.CLEAR_FIELDS,meta:{form:e,keepTouched:t,persistentSubmitErrors:n,fields:o}}},clearSubmit:function(e){return{type:r.CLEAR_SUBMIT,meta:{form:e}}},clearSubmitErrors:function(e){return{type:r.CLEAR_SUBMIT_ERRORS,meta:{form:e}}},clearAsyncError:function(e,t){return{type:r.CLEAR_ASYNC_ERROR,meta:{form:e,field:t}}},destroy:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return{type:r.DESTROY,meta:{form:t}}},focus:function(e,t){return{type:r.FOCUS,meta:{form:e,field:t}}},initialize:function(e,t,n,o){return void 0===o&&(o={}),n instanceof Object&&(o=n,n=!1),{type:r.INITIALIZE,meta:i({form:e,keepDirty:n},o),payload:t}},registerField:function(e,t,n){return{type:r.REGISTER_FIELD,meta:{form:e},payload:{name:t,type:n}}},reset:function(e){return{type:r.RESET,meta:{form:e}}},resetSection:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return{type:r.RESET_SECTION,meta:{form:e,sections:n}}},startAsyncValidation:function(e,t){return{type:r.START_ASYNC_VALIDATION,meta:{form:e,field:t}}},startSubmit:function(e){return{type:r.START_SUBMIT,meta:{form:e}}},stopAsyncValidation:function(e,t){return{type:r.STOP_ASYNC_VALIDATION,meta:{form:e},payload:t,error:!(!t||!Object.keys(t).length)}},stopSubmit:function(e,t){return{type:r.STOP_SUBMIT,meta:{form:e},payload:t,error:!(!t||!Object.keys(t).length)}},submit:function(e){return{type:r.SUBMIT,meta:{form:e}}},setSubmitFailed:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return{type:r.SET_SUBMIT_FAILED,meta:{form:e,fields:n},error:!0}},setSubmitSucceeded:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return{type:r.SET_SUBMIT_SUCCEEDED,meta:{form:e,fields:n},error:!1}},touch:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return{type:r.TOUCH,meta:{form:e,fields:n}}},unregisterField:function(e,t,n){return void 0===n&&(n=!0),{type:r.UNREGISTER_FIELD,meta:{form:e},payload:{name:t,destroyOnUnmount:n}}},untouch:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return{type:r.UNTOUCH,meta:{form:e,fields:n}}},updateSyncErrors:function(e,t,n){return void 0===t&&(t={}),{type:r.UPDATE_SYNC_ERRORS,meta:{form:e},payload:{syncErrors:t,error:n}}},updateSyncWarnings:function(e,t,n){return void 0===t&&(t={}),{type:r.UPDATE_SYNC_WARNINGS,meta:{form:e},payload:{syncWarnings:t,warning:n}}}};t.default=o},function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))i.call(n,s)&&(u[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)o.call(n,a[c])&&(u[a[c]]=n[a[c]])}}return u}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.r(t);const r=new class{constructor(){this.items=[]}register(e){this.items.push(e)}run(){document.querySelectorAll(".react-root,[data-react-root]").forEach(e=>{if(e.getAttribute("data-served"))return;const t=e.getAttribute("data-module"),n=e.getAttribute("data-component"),r=e.getAttribute("data-mode"),i=e.getAttribute("data-data"),o=JSON.parse(e.getAttribute("data-actions"));for(const a in this.items)if(this.items.hasOwnProperty(a)&&(0,this.items[a])(e,t,n,r,i,o))return void e.setAttribute("data-served","1");throw new Error("no match type")})}};var i=n(0),o=n(5),a=n(1),u=n(4),l=n(6),s=n.n(l);const c={dev:!1,filterDelay:1e4},f=e=>({data:e,type:"@@input-connector/ACTION_SET_INITIAL_DATA"}),d=(e,t)=>({key:e,type:"@@input-connector/ACTION_CHANGE_DATA",value:t});class p extends i.Component{componentDidMount(){const{input:e,onSetInitialData:t}=this.props;e.value&&t(JSON.parse(e.value))}componentWillReceiveProps(e){const t={};let n=!1;for(const r in e.data)e.data.hasOwnProperty(r)&&null!==e.data[r]&&(t[r]=e.data[r],n=!0);this.props.input.value=n?JSON.stringify(t):null,this.props.input.dispatchEvent(new Event("change"))}render(){return null}}class h extends i.Component{render(){const e=Object(a.connect)(this.mapStateToProps,this.mapDispatchToProps)(p);return i.createElement(e,{input:this.props.input})}mapDispatchToProps(e){return{onSetInitialData:t=>e(f(t))}}mapStateToProps(e){return{data:e.inputConnector.data}}}const m=(e={data:{}},t)=>{switch(t.type){case"@@input-connector/ACTION_CHANGE_DATA":return((e,t)=>Object.assign({},e,{data:Object.assign({},e.data,{[t.key]:t.value})}))(e,t);case"@@input-connector/ACTION_SET_INITIAL_DATA":return((e,t)=>t.data?Object.assign({},e,{data:t.data}):e)(e,t);default:return e}},v=Object(u.combineReducers)({inputConnector:m});const y=new class{constructor(e){this.data={cs:{},en:{},sk:{}},this.currentLocale="cs",this.data=e,window.location.search.slice(1).split("&").forEach(e=>{const[t,n]=e.split("=");"lang"===t&&this.setLocale(n)})}getCurrentLocale(){return this.currentLocale}setLocale(e){this.currentLocale=e}getAvailableLocales(){return Object.keys(this.data)}getText(e){return this.data[this.currentLocale].hasOwnProperty(e)&&this.data[this.currentLocale][e]?this.data[this.currentLocale][e]:e}getBCP47(){switch(this.currentLocale){case"cs":return"cs-CZ";case"en":return"en-GB"}}}({sk:{"Edit schedule":"",body:"",timeLine:"","Statistic of team ":"",Fetch:"","I want to stay in the hotel %name% from %from% to %to%.":"","Hide schedule":"",timeProgress:"",Price:"",lastUpdated:"","Auto switch":"",bod:"","Used capacity/Total capacity":"","Accommodation price":"","Available filters":"","Number of events":"",successOfSubmitting:"","bodů":"","This function don't turn on id results are projected!":"","turn off":"","Active filters":"","Statistics from single problem":"","Global statistics":"",Date:"","Results of Fyziklani":"","for free":""},cs:{"Edit schedule":"Upravit program",body:"",timeLine:"","Statistic of team ":"Statistiky týmu ",Fetch:"Fetchnout","I want to stay in the hotel %name% from %from% to %to%.":"Chci být ubytován v ubytovacím zařízení %name% od %from% do %to%.","Hide schedule":"Skrýt program",timeProgress:"",Price:"Cena",lastUpdated:"naposledy upraveno","Auto switch":"Automatický přepínač",bod:"","Used capacity/Total capacity":"Již rezervováno/Celková kapacita","Accommodation price":"Cena ubytování","Available filters":"Dostupné filtry","Number of events":"Program akce %s",successOfSubmitting:"úspěšné odevzdání","bodů":"","This function don't turn on id results are projected!":"Tato funkci nezapínej!","turn off":"vypnout","Active filters":"Aktivní filtry","Statistics from single problem":"Statistiky jedné úlohy","Global statistics":"Globální statistiky",Date:"Datum","Results of Fyziklani":"Výsledky Fyziklání","for free":"zdarma"},en:{"Edit schedule":"",body:"",timeLine:"","Statistic of team ":"",Fetch:"","I want to stay in the hotel %name% from %from% to %to%.":"","Hide schedule":"",timeProgress:"",Price:"",lastUpdated:"","Auto switch":"",bod:"","Used capacity/Total capacity":"","Accommodation price":"","Available filters":"","Number of events":"",successOfSubmitting:"","bodů":"","This function don't turn on id results are projected!":"","turn off":"","Active filters":"","Statistics from single problem":"","Global statistics":"",Date:"","Results of Fyziklani":"","for free":""}});class g extends i.Component{render(){const{price:{eur:e,kc:t}}=this.props;return 0==+e&&0==+t?i.createElement("span",null,y.getText("for free")):0==+e?i.createElement("span",null,t," Kč"):i.createElement("span",null,e," €/",t," Kč")}}const b=(e,t)=>{const n={eur:0,kc:0};if(!t)return n;for(const r in t)if(t.hasOwnProperty(r)){const i=e.filter(e=>e.eventAccommodationId===t[r])[0];i&&(n.eur+=+i.price.eur,n.kc+=+i.price.kc)}return n};var _=Object(a.connect)(e=>({accommodation:e.inputConnector.data}),()=>({}))(class extends i.Component{render(){const{accommodationDef:e,accommodation:t}=this.props,n=b(e,t);return i.createElement(i.Fragment,null,i.createElement("p",null,y.getText("Price")),i.createElement(g,{price:n}))}});class x extends i.Component{render(){const{date:e,options:t}=this.props,n=new Date(e);return i.createElement("span",null,n.toLocaleDateString(y.getBCP47(),t))}}var w=Object(a.connect)((e,t)=>{let n=null;return e.inputConnector.data.hasOwnProperty(t.date)&&(n=e.inputConnector.data[t.date]),{value:n}},(e,t)=>({onChange:n=>e(d(t.date,n))}))(class extends i.Component{render(){const{hotels:e,accommodations:t,date:n,onChange:r,value:o}=this.props;if(!t)return null;const a=[];return e.forEach((e,n)=>{const u=t.filter(t=>t.name===e);if(u.length){const e=i.createElement("small",{className:"align-bottom text-muted"},i.createElement(g,{price:u[0].price})),t=i.createElement("small",{className:u[0].capacity===u[0].usedCapacity?"text-danger":""},u[0].capacity,"/",u[0].usedCapacity);u[0].eventAccommodationId===o?a.push(i.createElement("td",{key:n,className:"text-center table-success",onClick:()=>{r(null)}},i.createElement("div",null,i.createElement("span",{className:"text-success fa fa-check"})),i.createElement("div",null,e),i.createElement("div",null,t))):a.push(i.createElement("td",{key:n,className:"text-center table-secondary",onClick:()=>{r(u[0].eventAccommodationId)}},i.createElement("div",null,e),i.createElement("div",null,t)))}else a.push(i.createElement("td",{key:n,className:"table-danger"}))}),i.createElement("tr",null,i.createElement("td",null,i.createElement("label",null,i.createElement(x,{date:n}))),a)}});class E extends i.Component{render(){const e={},t=[],{accommodationDef:n}=this.props;if(!n)return null;n.forEach(n=>{-1===t.indexOf(n.name)&&t.push(n.name),e[n.date]=e[n.date]||[],e[n.date].push(n)});const r=[];for(const n in e)e.hasOwnProperty(n)&&r.push(i.createElement(w,{key:n,hotels:t,date:n,accommodations:e[n]}));return i.createElement(i.Fragment,null,i.createElement("table",{className:"table"},i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,y.getText("Date")),t.map((e,t)=>i.createElement("th",{key:t},e)))),i.createElement("tbody",null,r)),i.createElement(_,{accommodationDef:n}))}}const S=e=>{const t=new Date(e);return{fromDate:t,toDate:new Date(t.getTime()+864e5)}};class T extends i.Component{render(){const{capacity:e,usedCapacity:t}=this.props;return i.createElement("small",{className:"ml-3 "+(e<=t?"text-danger":"")},y.getText("Used capacity/Total capacity"),": ",t,"/",e)}}var k=Object(a.connect)((e,t)=>{const{accommodationItem:n}=t;let r=null;return e.inputConnector.data.hasOwnProperty(n.date)&&(r=e.inputConnector.data[n.date]),{value:r}},e=>({onChange:(t,n)=>e(d(t,n))}))(class extends i.Component{render(){const{accommodationItem:e,value:t,onChange:n}=this.props,{date:r,eventAccommodationId:o,price:a,name:u,capacity:l,usedCapacity:s}=e,{fromDate:c,toDate:f}=S(r),d=y.getText("I want to stay in the hotel %name% from %from% to %to%.").replace("%name%",u).replace("%from%",c.toLocaleDateString(y.getBCP47())).replace("%to%",f.toLocaleDateString(y.getBCP47()));return i.createElement("div",{className:"mb-3"},i.createElement("span",{className:"form-check "+(t?"text-success border-success":"")},i.createElement("span",{className:t?"fa fa-check-square-o":"fa fa-square-o",onClick:()=>{n(r,t?null:o)}}),i.createElement("span",{className:"ml-3"},d)),i.createElement("span",{className:"text-muted"},i.createElement("small",{className:"ml-3"},y.getText("Accommodation price"),": ",i.createElement(g,{price:a})),i.createElement(T,{capacity:l,usedCapacity:s})))}});class O extends i.Component{render(){const{accommodationDef:e}=this.props;1===e.length&&console.warn("You can use single type");const t=[];return e.forEach((e,n)=>{t.push(i.createElement(k,{key:n,accommodationItem:e}))}),i.createElement(i.Fragment,null,t)}}class C extends i.Component{render(){const{accommodationDef:e}=this.props;if(1!==e.length&&e.hasOwnProperty(0))throw new Error("Wrong type of accommodation");return i.createElement(k,{accommodationItem:e[0]})}}class M extends i.Component{render(){const e=c.dev?Object(u.createStore)(v,Object(u.applyMiddleware)(s.a)):Object(u.createStore)(v);return i.createElement(a.Provider,{store:e},i.createElement(i.Fragment,null,i.createElement(h,{input:this.props.input}),this.getComponentByMode()))}getComponentByMode(){switch(this.props.mode){case"matrix":return i.createElement(E,{accommodationDef:this.props.accommodationDef});case"single":return i.createElement(C,{accommodationDef:this.props.accommodationDef});case"multiNights":return i.createElement(O,{accommodationDef:this.props.accommodationDef});case"multiHotels":throw new Error("Not implement");default:throw new Error("no match")}}}var A=n(2);class N extends i.Component{componentDidMount(){this.getAxis()}componentDidUpdate(){this.getAxis()}render(){const{data:e}=this.props;let t=0,n=0;const r={},o=[],a=A.scaleOrdinal(A.schemeCategory10);for(const u in e.teams)if(e.teams.hasOwnProperty(u)&&e.events.hasOwnProperty(u)){const l=e.events[u],s=new Date(l.begin);let c=0;o.push(i.createElement("div",{key:u,className:"list-group-item",style:{color:a(u)}},l.name));const f=e.teams[u].sort((e,t)=>new Date(e.created).getTime()-new Date(t.created).getTime()).map(e=>{c++;const n=(new Date(e.created).getTime()-s.getTime())/864e5;return t=t<n?t:n,{x:n,y:c}});n=n>f.length?n:f.length,r[u]=f}this.yScale=A.scaleLinear().domain([0,n]).range([370,20]),this.xScale=A.scaleLinear().domain([t,0]).range([30,580]);const u=[];for(const e in r)if(r.hasOwnProperty(e)){const t=A.line().x(e=>this.xScale(new Date(e.x))).y(e=>this.yScale(e.y)).curve(A.curveBasis)(r[e]);u.push(i.createElement("path",{key:e,d:t,className:"line",stroke:a(e)}))}return i.createElement("div",{className:"row"},i.createElement("div",{className:"col-8"},i.createElement("svg",{viewBox:"0 0 600 400",className:"chart time-line-histogram"},i.createElement("g",null,u,[],i.createElement("g",{transform:"translate(0,370)",className:"x axis",ref:e=>this.xAxis=e}),i.createElement("g",{transform:"translate(30,0)",className:"x axis",ref:e=>this.yAxis=e})))),i.createElement("div",{className:"col-4"},i.createElement("div",{className:"list-group"},o)))}getAxis(){const e=A.axisBottom(this.xScale);A.select(this.xAxis).call(e);const t=A.axisLeft(this.yScale);A.select(this.yAxis).call(t)}}class P extends i.Component{render(){const{data:e}=this.props;return i.createElement("div",{className:"fyziklani-chart-container"},i.createElement("h3",null,y.getText("Time progress")),i.createElement("div",{className:"row"},i.createElement("div",{className:"col-12"},i.createElement(N,{data:e}))))}}const R="ACTION_SUBMIT_SUCCESS";function I(e,t){return{accessKey:t,data:e,type:R}}const F="ACTION_SUBMIT_FAIL";function j(e,t){return{accessKey:t,error:e,type:F}}const D="ACTION_SUBMIT_START",U=e=>({accessKey:e,type:D});var z=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function u(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,u)}l((r=r.apply(e,t||[])).next())})};function L(e,t,n,r,i,o=null){return z(this,void 0,void 0,function*(){return t(U(e)),function(e,t,n,r=null){return z(this,void 0,void 0,function*(){const i=$;return new Promise((o,a)=>{i.nette.ajax({data:e,error:e=>{n(e),a(e)},method:"POST",success:e=>{t(e),o(e)},url:r})})})}(n,n=>{t(I(n,e)),r(n)},n=>{t(j(n,e)),i(n)},o)})}const V=(e,t,n=null,r)=>{const i={act:"@@fyziklani/results",requestData:null};return n&&(i.requestData=n),L(e,t,i,()=>null,()=>null,r)};var q=Object(a.connect)((e,t)=>{const{accessKey:n}=t;return{error:e.fetchApi.hasOwnProperty(n)?e.fetchApi[n].error:null,isRefreshing:e.downloader.isRefreshing,isSubmitting:!!e.fetchApi.hasOwnProperty(n)&&e.fetchApi[n].submitting,lastUpdated:e.downloader.lastUpdated,refreshDelay:e.downloader.refreshDelay}},(e,t)=>{const{accessKey:n,actions:r}=t;if(!r.hasOwnProperty("refresh"))throw new Error("you need to have refresh URL");const i=r.refresh;return{onFetch:()=>V(n,e,null,i),onWaitForFetch:(t,r)=>((e,t,n,r=null,i)=>setTimeout(()=>V(e,t,r,i),n))(n,e,r,t,i)}})(class extends i.Component{componentDidMount(){const{onFetch:e}=this.props;e()}componentWillReceiveProps(e){const{lastUpdated:t}=this.props;if(t!==e.lastUpdated){const{onWaitForFetch:t,refreshDelay:n,lastUpdated:r}=e;n&&t(r,n)}}render(){const{lastUpdated:e,isRefreshing:t,isSubmitting:n,onFetch:r,error:o}=this.props;return i.createElement("div",{className:"last-update-info bg-white"},i.createElement("span",{className:t?"text-success":"text-danger"},e),n&&i.createElement("i",{className:"fa fa-spinner fa-spin"}),!t&&i.createElement("button",{className:"btn btn-primary btn-sm",onClick:()=>r()},y.getText("Fetch")),o&&i.createElement("span",{className:"text-danger"},o.status," ",o.statusText))}});const B=(e,t)=>{const{accessKey:n}=t;return Object.assign({},e,{[n]:Object.assign({},e[n],{error:null,messages:[],submitting:!0})})},W=(e,t)=>{const{accessKey:n}=t;return Object.assign({},e,{[n]:Object.assign({},e[n],{error:t.error,messages:[{level:"danger",text:t.error.toString()}],submitting:!1})})};const Y={};function H(e=Y,t){switch(t.type){case D:return B(e,t);case F:return W(e,t);case R:return function(e,t){const n=t.data,{accessKey:r}=t;return Object.assign({},e,{[r]:Object.assign({},e[r],{messages:n.messages,submitting:!1})})}(e,t);default:return e}}const K=(e={lastUpdated:null},t)=>{switch(t.type){case R:return((e,t)=>{const{lastUpdated:n,refreshDelay:r}=t.data.responseData;return Object.assign({},e,{isRefreshing:!0,lastUpdated:n,refreshDelay:r})})(e,t);case F:return(e=>Object.assign({},e,{isRefreshing:!1}))(e);default:return e}},X=(e={},t)=>{switch(t.type){case"@@fyziklani/ACTION_SET_HARD_VISIBLE":return((e,t)=>Object.assign({},e,{hardVisible:t.hardVisible}))(e,t);case R:return((e,t)=>{const{isOrg:n}=t.data.responseData;return Object.assign({},e,{isOrg:n,isReady:!0})})(e,t);default:return e}},G=(e={},t)=>{switch(t.type){case R:return((e,t)=>{const{submits:n,tasks:r,teams:i,rooms:o,categories:a}=t.data.responseData;return Object.assign({},e,{categories:a,rooms:o,submits:Object.assign({},e.submits,n),tasks:r,teams:i})})(e,t);default:return e}},Q=(e={},t)=>{switch(t.type){case R:return((e,t)=>{const{times:n,gameEnd:r,gameStart:i,times:{toEnd:o,toStart:a}}=t.data.responseData;return Object.assign({},e,n,{gameEnd:new Date(r),gameStart:new Date(i),inserted:new Date,toEnd:1e3*o,toStart:1e3*a})})(e,t);default:return e}},Z={autoSwitch:!1,filters:[],index:0},J=Object(u.combineReducers)({data:G,downloader:K,fetchApi:H,options:X,tableFilter:(e=Z,t)=>{switch(t.type){case"@@fyziklani/ACTION_ADD_FILTER":return((e,t)=>{const{filter:n}=t,{filters:r}=e,i=r.some(e=>e.same(n)),o=[...r];return i||o.push(n),Object.assign({},e,{filters:[...o]})})(e,t);case"@@fyziklani/ACTION_REMOVE_FILTER":return((e,t)=>{const{filter:n}=t,{filters:r}=e,i=r.filter(e=>!e.same(n));return Object.assign({},e,{filters:[...i]})})(e,t);case"@@fyziklani/ACTION_SET_NEXT_TABLE_FILTER":return(e=>{let{index:t}=e;const{filters:n}=e;return++t>=n.length&&(t=0),Object.assign({},e,{index:t})})(e);case"@@fyziklani/ACTION_SET_AUTO_SWITCH":return((e,t)=>Object.assign({},e,{autoSwitch:t.state}))(e,t);case"@@fyziklani/ACTION_SET_FILTER":return((e,t)=>{const{filter:n}=t,{filters:r}=e;return r.some(e=>e.same(n))?Object.assign({},e,{autoSwitch:!1,filters:[],index:0}):Object.assign({},e,{autoSwitch:!1,filters:[n],index:0})})(e,t);default:return e}},timer:Q});class ee extends i.Component{render(){return i.createElement("div",{className:"load",style:{textAlign:"center"}},i.createElement("img",{src:"/images/fof/logo-animated.svg",style:{width:"50%"}}))}}const te=({toStart:e,toEnd:t},n)=>{const r=(new Date).getTime()-n.getTime();return{currentToEnd:t-r,currentToStart:e-r}};var ne=Object(a.connect)(e=>({hardVisible:e.options.hardVisible,inserted:e.timer.inserted,toEnd:e.timer.toEnd,toStart:e.timer.toStart,visible:e.timer.visible}),null)(class extends i.Component{componentDidMount(){this.timerId=setInterval(()=>this.forceUpdate(),1e3)}componentWillUnmount(){clearInterval(this.timerId)}render(){const{inserted:e,visible:t,toStart:n,toEnd:r,hardVisible:o}=this.props,{currentToStart:a,currentToEnd:u}=te({toStart:n,toEnd:r},e);let l=0;if(a>0)l=a;else{if(!(u>0))return null;l=u}const s=new Date(l),c=s.getUTCHours(),f=s.getUTCMinutes(),d=s.getUTCSeconds();return i.createElement("div",{className:"row clock "+(t||o?"small":"big")},i.createElement("span",{className:"col"},i.createElement("span",{className:"time-value"},c<10?"0"+c:""+c),i.createElement("span",{className:"time-label"},"Hours/Hodin")),i.createElement("span",{className:"col"},i.createElement("span",{className:"time-value"},f<10?"0"+f:""+f),i.createElement("span",{className:"time-label"},"Minutes/Minút")),i.createElement("span",{className:"col"},i.createElement("span",{className:"time-value"},d<10?"0"+d:""+d),i.createElement("span",{className:"time-label"},"Seconds/Sekund")))}});var re=Object(a.connect)(e=>({inserted:e.timer.inserted,toEnd:e.timer.toEnd,toStart:e.timer.toStart,visible:e.timer.visible}),null)(class extends i.Component{constructor(){super(...arguments),this.timerId=null}componentDidMount(){this.timerId=setInterval(()=>this.forceUpdate(),1e3)}componentWillUnmount(){clearInterval(this.timerId)}render(){const{inserted:e,toStart:t,toEnd:n}=this.props,{currentToStart:r,currentToEnd:o}=te({toStart:t,toEnd:n},e);if(0===r||0===o)return i.createElement("div",null);let a="";return a=r>3e5?"Have not begun yet/Ješte nezačalo":r>0?"Will soon begin/Brzo začne":r>-12e4?"Start!":o>0?null:o>-24e4?"Ended/Skončilo":"Waiting for results/Čeká na výsledky",i.createElement("div",{className:"image-wp"},a)}});var ie=Object(a.connect)(e=>({hardVisible:e.options.hardVisible,visible:e.timer.visible}),null)(class extends i.Component{render(){const{visible:e,hardVisible:t}=this.props,n=[];return t&&n.push(i.createElement("div",{key:n.length,className:"alert alert-warning"},"Výsledková listina je určená pouze pro organizátory!!!")),i.createElement(i.Fragment,null,n,e||t?i.createElement("div",null,i.createElement(ne,null),this.props.children):i.createElement("div",{className:this.props.className},i.createElement(ne,null),i.createElement(re,null)))}}),oe=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function u(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,u)}l((r=r.apply(e,t||[])).next())})};var ae=Object(a.connect)(e=>({autoSwitch:e.tableFilter.autoSwitch}),e=>({onSetNextFilter:()=>e({type:"@@fyziklani/ACTION_SET_NEXT_TABLE_FILTER"})}))(class extends i.Component{componentDidMount(){return this.scroll()}render(){return null}scroll(){return oe(this,void 0,void 0,function*(){const{autoSwitch:e}=this.props;if(e){yield window.scroll(0,0),$(document).scrollTop(0);const{onSetNextFilter:e}=this.props,t=$(document).height(),n=$(window).height()-100;for(let e=0;e<=Math.floor(t/n);e++)yield window.scroll(0,e*n),yield new Promise(e=>{setTimeout(()=>{e()},c.filterDelay)});e()}else yield new Promise(e=>{setTimeout(()=>{e()},c.filterDelay)});return this.scroll()})}});class ue extends i.Component{render(){const{submits:e,team:t,tasks:n,visible:r}=this.props;let o=0,a=0;const u=n.map((t,n)=>{const{taskId:r}=t,u=e[r]||null,l=u?u.points:null;return null===l&&0===l||(o++,a+=+l),i.createElement("td",{"data-points":l,key:n},l||null)}),l=o>0?Math.round(a/o*100)/100:"-";return i.createElement("tr",{style:{display:r?"":"none"}},i.createElement("td",null),i.createElement("td",null,t.name),i.createElement("td",{className:"sum"},a),i.createElement("td",null,o),i.createElement("td",null,l),u)}}var le=Object(a.connect)(e=>{const{index:t,filters:n}=e.tableFilter;return{filter:n.hasOwnProperty(t)?n[t]:null,submits:e.data.submits,tasks:e.data.tasks,teams:e.data.teams}},null)(class extends i.Component{constructor(e){super(e),this.table=null}componentDidUpdate(){const e=$(Object(o.findDOMNode)(this.table));try{e.trigger("update"),e.trigger("sorton",[[[2,1],[4,1]]])}catch(e){console.error(e)}}componentDidMount(){$(Object(o.findDOMNode)(this.table)).tablesorter()}render(){const{submits:e,teams:t,tasks:n,filter:r}=this.props,o={};for(const t in e)if(e.hasOwnProperty(t)){const n=e[t],{teamId:r,taskId:i}=n;o[r]=o[r]||{},o[r][i]=n}const a=n.map((e,t)=>i.createElement("th",{key:t,"data-task_label":e.label},e.label));return i.createElement("div",{className:"mb-3"},i.createElement("h1",null,r?r.getHeadline():y.getText("Results of Fyziklani")),i.createElement("table",{ref:e=>{this.table=e},className:"tablesorter table-striped table-hover table table-sm bg-white"},i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null),i.createElement("th",null),i.createElement("th",null,"∑"),i.createElement("th",null,"N"),i.createElement("th",null,"x̄"),a)),i.createElement("tbody",null,t.map((e,t)=>i.createElement(ue,{tasks:n,submits:o[e.teamId]||{},team:e,key:t,visible:!r||r.match(e)})))))}});class se extends i.Component{render(){const{mode:e}=this.props;return i.createElement("div",null,i.createElement(ie,{className:"presentation"===e?"inner-headline":null},i.createElement(le,null)),"presentation"===e&&i.createElement(ae,null))}}var ce=Object(a.connect)(e=>({hardVisible:e.options.hardVisible}),e=>({onHardDisplayChange:t=>e((e=>({hardVisible:e,type:"@@fyziklani/ACTION_SET_HARD_VISIBLE"}))(t))}))(class extends i.Component{render(){const{onHardDisplayChange:e,hardVisible:t}=this.props;return i.createElement("div",{className:"form-group"},i.createElement("label",null,y.getText("Not public results")),i.createElement("button",{className:t?"btn btn-outline-danger":"btn btn-danger",onClick:n=>{n.preventDefault(),e(!t)}},t?y.getText("Turn off"):y.getText("Turn on")),i.createElement("span",{className:"form-text text-danger"},y.getText("This function don't turn on id results are projected!")))}});var fe=Object(a.connect)(e=>({autoSwitch:e.tableFilter.autoSwitch}),e=>({onAutoSwitch:t=>e((e=>({state:e,type:"@@fyziklani/ACTION_SET_AUTO_SWITCH"}))(t))}))(class extends i.Component{render(){const{autoSwitch:e,onAutoSwitch:t}=this.props;return i.createElement(i.Fragment,null,i.createElement("h5",null,y.getText("Auto switch")),i.createElement("button",{className:"btn "+(e?"btn-danger":"btn-success"),onClick:()=>{t(!e)}},e?i.createElement(i.Fragment,null,i.createElement("i",{className:"fa fa-pause mr-3"}),"stop auto switch"):i.createElement(i.Fragment,null,i.createElement("i",{className:"fa fa-play mr-3"}),"run auto switch")))}});class de extends i.Component{render(){const{active:e,onClick:t,onCloseClick:n,filter:r,type:o}=this.props;return i.createElement("a",{href:"#",className:"badge ml-3 "+(e?"badge-success":"badge-"+(o||"secondary")),onClick:()=>{t&&t(r)}},r.getHeadline(),n&&i.createElement("span",{className:"ml-3",onClick:()=>{n(r)}},"×"))}}class pe{constructor({roomId:e,category:t,name:n}){this.category=t,this.roomId=e,this.name=n}match(e){const{roomId:t,category:n}=e;return(!this.category||this.category===n)&&!(this.roomId&&this.roomId!==t)}same(e){return!!e&&(e.roomId===this.roomId&&e.category===this.category&&e.name===this.name)}getHeadline(){return this.name}}const he=(e=[],t=[],n=!0)=>{const r=e.map(e=>new pe({roomId:e.roomId,category:null,name:"Room "+e.name})),i=t.map(e=>new pe({roomId:null,category:e,name:"Category "+e})),o=[];return n&&o.push(new pe({roomId:null,category:null,name:"All"})),o.concat(r).concat(i)};var me=Object(a.connect)(e=>({categories:e.data.categories,filters:e.tableFilter.filters,index:e.tableFilter.index,rooms:e.data.rooms}),e=>({onAddFilter:t=>e((e=>({filter:e,type:"@@fyziklani/ACTION_ADD_FILTER"}))(t)),onRemoveFilter:t=>e((e=>({filter:e,type:"@@fyziklani/ACTION_REMOVE_FILTER"}))(t))}))(class extends i.Component{render(){const{categories:e,filters:t,index:n,rooms:r,onRemoveFilter:o,onAddFilter:a}=this.props,u=he(r,e);return i.createElement(i.Fragment,null,i.createElement("h5",{className:"text-success"},y.getText("Active filters")),i.createElement("div",null,t.map((e,t)=>i.createElement(de,{filter:e,onCloseClick:o,active:t===n}))),i.createElement("hr",null),i.createElement("h5",null,y.getText("Available filters")),i.createElement("div",null,u.filter(e=>!t.some(t=>e.same(t))).map((e,t)=>i.createElement(de,{key:t,filter:e,onClick:a,active:!1,type:"primary"}))))}});var ve=Object(a.connect)(e=>({autoSwitch:e.tableFilter.autoSwitch,isOrg:e.options.isOrg}),null)(class extends i.Component{render(){const{autoSwitch:e,isOrg:t}=this.props;return i.createElement("div",{className:"form-group"},i.createElement("button",{type:"button",className:"btn btn-primary","data-toggle":"modal","data-target":"#fyziklaniResultsOptionModal"},i.createElement("i",{className:"fa fa-gear"})),i.createElement("div",{className:"modal fade",id:"fyziklaniResultsOptionModal",tabIndex:-1,role:"dialog"},i.createElement("div",{className:"modal-dialog",role:"document"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h5",{className:"modal-title"},"Options"),i.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},i.createElement("span",null,"×"))),i.createElement("div",{className:"modal-body"},t&&i.createElement(ce,null),i.createElement("hr",null),i.createElement(fe,null),i.createElement("hr",null),e?i.createElement(me,null):null)))))}});var ye=Object(a.connect)(e=>({categories:e.data.categories,filters:e.tableFilter.filters,isOrg:e.options.isOrg}),e=>({onSetFilter:t=>e((e=>({filter:e,type:"@@fyziklani/ACTION_SET_FILTER"}))(t))}))(class extends i.Component{render(){const{categories:e,filters:t,onSetFilter:n,isOrg:r}=this.props,o=he([],e,!1);return i.createElement(i.Fragment,null,r&&i.createElement(ce,null),o.map((e,r)=>{const o=t.some(t=>e.same(t));return i.createElement(de,{key:r,filter:e,active:o,onClick:n})}))}});class ge extends i.Component{render(){const{mode:e}=this.props;return"presentation"===e?i.createElement(ve,null):i.createElement(ye,null)}}var be=Object(a.connect)(e=>({isReady:e.options.isReady}),null)(class extends i.Component{render(){const{isReady:e,mode:t}=this.props;return e?i.createElement(i.Fragment,null,i.createElement(ge,{mode:t}),i.createElement(se,{mode:t})):i.createElement(ee,null)}});class _e extends i.Component{render(){const e=c.dev?Object(u.createStore)(J,Object(u.applyMiddleware)(s.a)):Object(u.createStore)(J),{mode:t,actions:n}=this.props;return i.createElement(a.Provider,{store:e},i.createElement("div",{className:"fyziklani-results"},i.createElement(q,{accessKey:"@@fyziklani-results",actions:n}),i.createElement(be,{mode:t})))}}const xe="@@drag-n-drop/ACTION_DRAG_START";const we="@@drag-n-drop/ACTION_DRAG_END",Ee="@@drag-n-drop/ACTION_DROP_ITEM";const Se=()=>({type:"ACTION_REMOVE_UPDATED_TEAMS"});const Te={availableTeams:[],updatedTeams:[]},ke=Object(u.combineReducers)({dragNDrop:function(e={data:null},t){switch(t.type){case xe:return function(e,t){const{data:n}=t;return Object.assign({},e,{data:n})}(e,t);case Ee:case we:return function(e){return Object.assign({},e,{data:null})}(e);default:return e}},fetchApi:H,teams:(e=Te,t)=>{switch(t.type){case"ACTION_ADD_TEAMS":return((e,t)=>Object.assign({},e,{availableTeams:t.teams}))(e,t);case Ee:return function(e,t){const{teamId:n,place:{x:r,y:i,roomId:o}}=t.data,a=e.availableTeams.map(e=>e.teamId!==n?e:Object.assign({},e,{roomId:o,x:r,y:i}));return Object.assign({},e,{availableTeams:a})}(e,t);case"ACTION_REMOVE_PLACE":return((e,t)=>{const{teamId:n}=t,r=e.availableTeams.map(e=>e.teamId!==n?e:Object.assign({},e,{roomId:null,x:null,y:null}));return Object.assign({},e,{availableTeams:r})})(e,t);case R:return((e,t)=>Object.assign({},e,{updatedTeams:t.data.responseData.updatedTeams}))(e,t);case"ACTION_REMOVE_UPDATED_TEAMS":return(e=>Object.assign({},e,{updatedTeams:[]}))(e);default:return e}}});class Oe extends i.Component{render(){return i.createElement("div",{className:"container-fluid justify-content-center d-flex align-content-center mt-5"},i.createElement("span",null,"Powered by"),i.createElement("a",{href:"https://reactjs.org/"},i.createElement("img",{src:"/images/react.svg",alt:"react",style:{height:"2rem"}})),i.createElement("a",{href:"https://redux.js.org"},i.createElement("img",{src:"/images/redux.png",alt:"redux",style:{height:"1.75rem"}})),i.createElement("a",{href:"https://www.typescriptlang.org/"},i.createElement("img",{src:"/images/typescript.svg",alt:"typescript",style:{height:"1.5rem"}})))}}var Ce,Me,Ae;var Ne=Object(a.connect)((e,t)=>{const{accessKey:n}=t;return{error:e.fetchApi.hasOwnProperty(n)?e.fetchApi[n].error:null,saving:!!e.fetchApi.hasOwnProperty(n)&&e.fetchApi[n].submitting,teams:e.teams.availableTeams}},(e,t)=>{const{accessKey:n}=t;return{onSaveRouting:t=>(n=n,e=e,Ae=t,L(n,e,{act:"routing-save",requestData:Ae},()=>null,()=>{setTimeout(()=>{e(Se())},5e3)}))}})(class extends i.Component{render(){const{onSaveRouting:e,teams:t,saving:n,error:r}=this.props;return i.createElement("div",null,i.createElement("button",{disabled:n,className:"btn btn-success",onClick:()=>{e(t)}},"Save"),r&&i.createElement("span",{className:"text-danger"},r.statusText))}});var Pe,Re=Object(a.connect)((e,t)=>({isDragged:e.dragNDrop.data&&e.dragNDrop.data.teamId===t.team.teamId,isUpdated:-1!==e.teams.updatedTeams.indexOf(t.team.teamId)}),e=>({onDragEnd:()=>e((()=>({type:we}))()),onDragStart:t=>e((Pe={teamId:t},{data:Pe,type:xe})),onRemovePlace:t=>e((e=>({teamId:e,type:"ACTION_REMOVE_PLACE"}))(t))}))(class extends i.Component{render(){const{onDragStart:e,onDragEnd:t,team:n,onRemovePlace:r,isUpdated:o,isDragged:a}=this.props,u=null!==n.x&&null!==n.y&&null!==n.roomId;return i.createElement("div",{className:"mb-3 "+(u?"col-12":"col-6"),draggable:!0,onDragStart:t=>{t.dataTransfer.setData("text/plain",""),t.dataTransfer.dropEffect="copy",e(n.teamId)},onClick:()=>a?t():e(n.teamId),onDragEnd:t,id:"team"+n.teamId},i.createElement("div",{className:"card "+(a?"text-white bg-primary":"")},i.createElement("div",{className:"card-body card-block"},i.createElement("h6",{className:"card-title fyziklani-headline-red"},n.name,u&&i.createElement("button",{className:"close",onClick:e=>{e.stopPropagation(),r(n.teamId)}},"×")),i.createElement("span",{className:"badge badge-fyziklani"},"Category: ",n.category),i.createElement("small",{className:"text-muted"},n.status),i.createElement("p",null,o&&i.createElement("span",{className:"updated-confirm-text text-center"},"updated")))))}});var Ie=Object(a.connect)(e=>({draggedTeamId:e.dragNDrop.data&&e.dragNDrop.data.hasOwnProperty("teamId")?e.dragNDrop.data.teamId:null,teams:e.teams.availableTeams}),e=>({onDrop:(t,n)=>e(function(e){return{data:e,type:Ee}}({teamId:t,place:n}))}))(class extends i.Component{render(){const{x:e,y:t,onDrop:n,teams:r,draggedTeamId:o,roomId:a}=this.props,u=r&&r.filter(n=>n.x===e&&n.y===t&&n.roomId===a)[0];return i.createElement("td",{onDragOver:e=>{u||e.preventDefault()},onClick:()=>u?null:o?n(o,{x:e,y:t,roomId:a,room:null}):null,onDrop:()=>{n(o,{x:e,y:t,roomId:a,room:null})}},u&&i.createElement(Re,{team:u}))}});class Fe extends i.Component{render(){const{info:e}=this.props,{roomId:t,name:n,x:r,y:o}=e,a=[];for(let e=0;e<o;e++){const n=[];for(let o=0;o<r;o++)n.push(i.createElement(Ie,{key:o,x:o,y:e,roomId:t}));a.push(i.createElement("tr",{key:e},n))}return i.createElement("div",{className:"routing-room"},i.createElement("h2",null,n),i.createElement("table",{className:"table"},i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",{colSpan:r,className:"bg-dark text-center text-white"},"Table"))),i.createElement("tbody",null,a)))}}class je extends i.Component{render(){const{rooms:e}=this.props;return i.createElement("div",null,e.map((e,t)=>i.createElement(Fe,{key:t,info:e})))}}var De=Object(a.connect)(e=>({stateTeams:e.teams.availableTeams}),()=>({}))(class extends i.Component{render(){const{stateTeams:e}=this.props;return i.createElement("div",{className:"row"},e&&e.filter(e=>null===e.x&&null===e.y).map((e,t)=>i.createElement(Re,{team:e,key:t})))}});var Ue=Object(a.connect)(()=>({}),e=>({onAddTeams:t=>e((e=>({teams:e,type:"ACTION_ADD_TEAMS"}))(t))}))(class extends i.Component{componentDidMount(){const{onAddTeams:e,teams:t}=this.props;e(t)}render(){const{rooms:e}=this.props;return i.createElement("div",null,i.createElement("div",{className:"row"},i.createElement("div",{className:"col-lg-8",style:{overflowY:"scroll",maxHeight:"700px"}},i.createElement(je,{rooms:e})),i.createElement("div",{className:"col-lg-4",style:{overflowY:"scroll",maxHeight:"700px"}},i.createElement(De,null))),i.createElement("div",null,i.createElement(Ne,{accessKey:"@@fyziklani/routing"})),i.createElement(Oe,null))}});const ze={showChooser:!0},Le=Object(u.combineReducers)({compactValue:(e=ze,t)=>{switch(t.type){case"ACTION_TOGGLE_CHOOSER":return(e=>Object.assign({},e,{showChooser:!e.showChooser}))(e);case"ACTION_SET_VISIBILITY":return((e,t)=>Object.assign({},e,{showChooser:!t.state}))(e,t);default:return e}},inputConnector:m});class Ve extends i.Component{render(){const{icon:e}=this.props;return i.createElement("div",{className:"row "+this.props.className},i.createElement("div",{className:"col-2 align-items-center d-flex text-center"},e),i.createElement("div",{className:"col-10"},this.props.children))}}var qe=Object(a.connect)((e,t)=>{const{blockName:n}=t;return{value:e.inputConnector.data.hasOwnProperty(n)?e.inputConnector.data[n]:null}},(e,t)=>({setSchedule:n=>e(d(t.blockName,n))}))(class extends i.Component{render(){const{item:e,value:t}=this.props,n=y.getCurrentLocale();if(!e.hasOwnProperty(n))return null;const r=e.id===t,o=e[n];return i.createElement("div",{onClick:()=>{this.props.setSchedule(r?null:e.id)}},i.createElement(Ve,{className:"chooser-container "+(r?"active":""),icon:i.createElement("span",{className:r?"w-100 fa fa-check-square-o":"w-100 fa fa-square-o"})},i.createElement("span",{className:"font-weight-bold"},o.name),o.description&&i.createElement("div",{className:"font-italic"},o.description),i.createElement("div",{className:"small"},i.createElement(g,{price:e.price}))))}});class Be extends i.Component{render(){const{item:e}=this.props,t=y.getCurrentLocale();if(!e.hasOwnProperty(t))return null;const n=e[t];return i.createElement("div",null,i.createElement(Ve,{className:"info-container text-muted",icon:i.createElement("span",{className:"fa fa-info w-100"})},i.createElement("div",null,i.createElement("span",{className:"font-weight-bold"},n.name)),i.createElement("div",{className:"font-italic"},n.description)))}}class We extends i.Component{render(){const{options:e}=this.props,t=new Date(this.props.date);return i.createElement("span",null,t.toLocaleTimeString(y.getBCP47(),e))}}class Ye extends i.Component{render(){const{start:e,end:t}=this.props;return i.createElement("div",{className:"schedule-time h-100 d-flex align-items-center text-center"},i.createElement("div",{className:"w-100"},i.createElement(We,{date:e,options:{hour:"numeric",minute:"numeric"}})," - ",i.createElement(We,{date:t,options:{hour:"numeric",minute:"numeric"}})))}}class He extends i.Component{render(){const{blockData:e,blockName:t}=this.props;let n=null;const{type:r}=e;switch(e.type){case"chooser":n=e.parallels.map((e,n)=>i.createElement("div",{key:n,className:"col-6"},i.createElement(qe,{blockName:t,item:e})));break;case"info":n=i.createElement("div",{className:"col-6"},i.createElement(Be,{blockName:t,item:e.descriptions}));break;default:throw new Error("Unsupported type:"+r)}return i.createElement("div",{className:"schedule-row d-flex justify-space-between row schedule-row-"+e.type},i.createElement("div",{className:"time-block col-2"},i.createElement(Ye,{start:e.date.start,end:e.date.end})),i.createElement("div",{className:"schedule-container col-10 row justify-content-between"},n))}}var $e=Object(a.connect)(e=>({showChooser:e.compactValue.showChooser}),e=>({onSetVisibility:t=>e((e=>({state:e,type:"ACTION_SET_VISIBILITY"}))(t)),onToggleChooser:()=>e({type:"ACTION_TOGGLE_CHOOSER"})}))(class extends i.Component{componentDidMount(){this.props.onSetVisibility(this.props.data.visible)}render(){const{data:{data:e},showChooser:t,label:n,description:r,onToggleChooser:o}=this.props,a=[];let u=null;for(const t in e)if(e.hasOwnProperty(t)){const n=e[t],r=new Date(n.date.start).getDay();u!==r&&a.push(i.createElement("div",{key:r,className:"schedule-row schedule-row-weekday row"},i.createElement("h3",null,i.createElement(x,{date:n.date.start,options:{weekday:"long"}})))),u=r,a.push(i.createElement(He,{key:t,blockData:n,blockName:t}))}return i.createElement("div",{className:"bd-callout bd-callout-fyziklani"},i.createElement("h4",null,n),i.createElement("p",{className:"text-muted mb-3",dangerouslySetInnerHTML:{__html:r}}),t&&i.createElement("div",{className:"schedule-field-container mb-3"},a),i.createElement("div",{className:"text-center"},i.createElement("button",{className:"btn btn-fyziklani btn-block",onClick:e=>{e.preventDefault(),o()}},t?y.getText("Hide schedule"):y.getText("Show schedule"))))}});class Ke extends i.Component{render(){const e=c.dev?Object(u.createStore)(Le,Object(u.applyMiddleware)(s.a)):Object(u.createStore)(Le),{data:t,input:n,label:r,description:o}=this.props;return i.createElement(a.Provider,{store:e},i.createElement(i.Fragment,null,i.createElement(h,{input:n}),i.createElement($e,{description:o,label:r,data:t})))}}const Xe=e=>({taskId:e,type:"@@fyziklani/ACTION_SET_TASK_ID"}),Ge=e=>({teamId:e,type:"ACTION_SET_FIRST_TEAM_ID"}),Qe=e=>({teamId:e,type:"ACTION_SET_SECOND_TEAM_ID"}),Ze=Object(u.combineReducers)({data:G,downloader:K,fetchApi:H,options:X,statistics:(e={aggregationTime:3e5},t)=>{switch(t.type){case"@@fyziklani/ACTION_SET_ACTIVE_POINTS":return((e,t)=>{const{activePoints:n}=t;return Object.assign({},e,{activePoints:n})})(e,t);case"@@fyziklani/ACTION_SET_TASK_ID":return((e,t)=>{const{taskId:n}=t;return Object.assign({},e,{taskId:n})})(e,t);case"ACTION_SET_FIRST_TEAM_ID":return((e,t)=>Object.assign({},e,{firstTeamId:t.teamId}))(e,t);case"ACTION_SET_SECOND_TEAM_ID":return((e,t)=>Object.assign({},e,{secondTeamId:t.teamId}))(e,t);case"ACTION_SET_AGGREGATION_TIME":return((e,t)=>Object.assign({},e,{aggregationTime:t.time}))(e,t);case"ACTION_SET_FROM_DATE":return((e,t)=>Object.assign({},e,{fromDate:t.from}))(e,t);case"ACTION_SET_TO_DATE":return((e,t)=>Object.assign({},e,{toDate:t.to}))(e,t);default:return e}},timer:Q}),Je=e=>{if(e.length<2)return{average:NaN,standardDeviation:NaN};const t=e.reduce((e,t)=>e+=t,0)/e.length,n=e.reduce((e,n)=>{const r=t-n;return e+r*r},0);return{average:t,standardDeviation:Math.sqrt(n/(e.length-1))}},et=(e,t,n=12e4)=>{const r=[];let i=0,o=0;for(const a in e)if(e.hasOwnProperty(a)&&t.hasOwnProperty(a)){const u=e[a],l=t[a],s=Math.abs(u.timestamp-l.timestamp);i++,s<n&&o++,r.push(s)}return{avgNStdDev:Je(r),countTotal:i,countFiltered:o}},tt=(e,t)=>{if(isNaN(e)||isNaN(t))return"NaN";const n=Math.floor(e/36e5);e%=36e5;const r=Math.floor(e/6e4);e%=6e4;const i=Math.floor(e/10)/100;return(n?n+"h ":"")+(r?r+"m ":"")+i+"s +- "+(t?Math.floor(t/10)/100:"")};var nt=Object(a.connect)(e=>({firstTeamId:e.statistics.firstTeamId,secondTeamId:e.statistics.secondTeamId,submits:e.data.submits,tasks:e.data.tasks,teams:e.data.teams}),e=>({onChangeFirstTeam:t=>e(Ge(+t)),onChangeSecondTeam:t=>e(Qe(+t))}))(class extends i.Component{componentDidMount(){$(Object(o.findDOMNode)(this.table)).tablesorter()}render(){const e=A.scaleLinear().domain([0,1e6]).range(["#ff0000","#ffffff"]),{submits:t,teams:n}=this.props,r={};for(const e in t)if(t.hasOwnProperty(e)){const n=t[e],{teamId:i,taskId:o}=n;r[i]=r[i]||{},r[i][o]=Object.assign({},n,{timestamp:new Date(n.created).getTime()})}const o=[];return n.forEach(t=>{n.forEach(n=>{if(n.teamId<=t.teamId)return;const{avgNStdDev:a,countFiltered:u,countTotal:l}=et(r.hasOwnProperty(t.teamId)?r[t.teamId]:{},r.hasOwnProperty(n.teamId)?r[n.teamId]:{});o.push(i.createElement("tr",{key:n.teamId+"__"+t.teamId},i.createElement("td",null,t.name),i.createElement("td",null,n.name),i.createElement("td",{style:{backgroundColor:e(a.average)}},tt(a.average,a.standardDeviation)),i.createElement("td",null,u),i.createElement("td",null,l),i.createElement("td",null,i.createElement("span",{className:"btn btn-primary btn-sm",onClick:()=>{this.props.onChangeFirstTeam(t.teamId),this.props.onChangeSecondTeam(n.teamId)}},"Detail"))))})}),i.createElement("table",{className:"table table-striped tablesorter table-sm",ref:e=>{this.table=e}},i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Team 1"),i.createElement("th",null,"Team 2"),i.createElement("th",null,"AVG"),i.createElement("th",null,"pod 2 min"),i.createElement("th",null,"match"))),i.createElement("tbody",null,o))}});var rt=Object(a.connect)(e=>({firstTeamId:e.statistics.firstTeamId,secondTeamId:e.statistics.secondTeamId,submits:e.data.submits,tasks:e.data.tasks,teams:e.data.teams}),null)(class extends i.Component{render(){const{firstTeamId:e,secondTeamId:t,submits:n,tasks:r}=this.props,o=[],a=[];for(const r in n)if(n.hasOwnProperty(r)){const i=n[r];i.teamId===e?o.push(i):i.teamId===t&&a.push(i)}const u={};for(const e in n)if(n.hasOwnProperty(e)){const t=n[e],{teamId:r,taskId:i}=t;u[r]=u[r]||{},u[r][i]=Object.assign({},t,{timestamp:new Date(t.created).getTime()})}const l=[],s=[];let c=0;const f=u.hasOwnProperty(e)?u[e]:{},d=u.hasOwnProperty(t)?u[t]:{};r.forEach((e,t)=>{const n=f.hasOwnProperty(e.taskId)?f[e.taskId]:null,r=d.hasOwnProperty(e.taskId)?d[e.taskId]:null;let o=0;n&&r&&(c++,o=Math.abs(n.timestamp-r.timestamp),s.push(o)),l.push(i.createElement("tr",{key:t},i.createElement("td",null,e.label),i.createElement("td",null,n?n.created:""),i.createElement("td",null,r?r.created:""),i.createElement("td",null,o?tt(o,0):"")))});const p=Je(s);return i.createElement("div",null,i.createElement("table",{className:"table table-striped table-hover table-sm"},i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Task"),i.createElement("th",null,"čas 1. tímu"),i.createElement("th",null,"čas 2. tímu"),i.createElement("th",null,"delta"))),i.createElement("tbody",null,l)),i.createElement("p",null,i.createElement("span",null,o.length," 1.tým"),i.createElement("span",null,a.length," 2. tým"),i.createElement("span",null,c," oba tímy"),i.createElement("span",null,tt(p.average,p.standardDeviation)," na úlohu")))}});var it=Object(a.connect)(e=>({firstTeamId:e.statistics.firstTeamId,secondTeamId:e.statistics.secondTeamId,teams:e.data.teams}),e=>({onChangeFirstTeam:t=>e(Ge(+t)),onChangeSecondTeam:t=>e(Qe(+t))}))(class extends i.Component{render(){const{teams:e,onChangeFirstTeam:t,onChangeSecondTeam:n,firstTeamId:r,secondTeamId:o}=this.props,a=e.map(e=>i.createElement("option",{key:e.teamId,value:e.teamId},e.name)),u=i.createElement("div",{className:"row"},i.createElement("div",{className:"col-6"},i.createElement("select",{className:"form-control",onChange:e=>{t(+e.target.value)},value:this.props.firstTeamId},i.createElement("option",{value:null},"--select team--"),a)),i.createElement("div",{className:"col-6"},i.createElement("select",{className:"form-control",onChange:e=>{n(+e.target.value)},value:this.props.secondTeamId},i.createElement("option",{value:null},"--select team--"),a))),l=e.filter(e=>e.teamId===r)[0],s=e.filter(e=>e.teamId===o)[0],c=i.createElement("h2",null,y.getText("Correlation  ")+(l&&s?l.name+" VS "+s.name:""));return i.createElement("div",null,c,u,r&&o?i.createElement(rt,null):i.createElement(nt,null))}});var ot=Object(a.connect)(e=>({aggregationTime:e.statistics.aggregationTime,fromDate:e.statistics.fromDate,gameEnd:new Date(e.timer.gameEnd),gameStart:new Date(e.timer.gameStart),taskId:e.statistics.taskId,tasks:e.data.tasks,toDate:e.statistics.toDate}),e=>({onChangeAggregationTime:t=>e((e=>({time:e,type:"ACTION_SET_AGGREGATION_TIME"}))(t)),onChangeTask:t=>e(Xe(+t)),onSetFromDate:t=>e((e=>({from:e,type:"ACTION_SET_FROM_DATE"}))(t)),onSetToDate:t=>e((e=>({to:e,type:"ACTION_SET_TO_DATE"}))(t))}))(class extends i.Component{componentDidMount(){const{onSetFromDate:e,onSetToDate:t,gameEnd:n,gameStart:r}=this.props;e(r),t(n)}render(){const{aggregationTime:e,onSetFromDate:t,onSetToDate:n,onChangeAggregationTime:r,onChangeTask:o,tasks:a,taskId:u,gameStart:l,gameEnd:s,fromDate:c,toDate:f}=this.props;return f&&c?i.createElement(i.Fragment,null,i.createElement("h3",null,y.getText("Options")),i.createElement("div",{className:"row"},i.createElement("div",{className:"col-6"},i.createElement("div",{className:"form-group"},i.createElement("label",null,"Task"),i.createElement("select",{value:u,className:"form-control",onChange:e=>{o(+e.target.value)}},i.createElement("option",{value:null},"--select task--"),a.map(e=>i.createElement("option",{key:e.taskId,value:e.taskId},e.label))))),i.createElement("div",{className:"col-6"},i.createElement("div",{className:"form-group"},i.createElement("label",null,"Aggregation time"),i.createElement("input",{type:"range",max:18e5,min:6e4,value:e,step:6e4,className:"form-control",onChange:e=>{r(+e.target.value)}}),i.createElement("span",{className:"form-text"},e/6e4," min")))),i.createElement("div",{className:"row"},i.createElement("div",{className:"col-6"},i.createElement("div",{className:"form-group"},i.createElement("label",null,"From"),i.createElement("input",{type:"range",className:"form-control",value:c.getTime(),min:l.getTime(),max:f.getTime(),step:6e4,onChange:e=>{t(new Date(+e.target.value))}}),i.createElement("span",{className:"form-text"},i.createElement(We,{date:c.toISOString()})))),i.createElement("div",{className:"col-6"},i.createElement("div",{className:"form-group"},i.createElement("label",null,"To"),i.createElement("input",{type:"range",className:"form-control",value:f.getTime(),min:c.getTime(),max:s.getTime(),step:6e4,onChange:e=>{n(new Date(+e.target.value))}}),i.createElement("span",{className:"form-text"},i.createElement(We,{date:f.toISOString()})))))):null}});const at=e=>{switch(e){case 5:return"limegreen";case 3:return"gold";case 2:return"orange";case 1:return"red";default:return"gray"}};var ut=Object(a.connect)(e=>({submits:e.data.submits,tasks:e.data.tasks}),e=>({onChangeTask:t=>e(Xe(+t))}))(class extends i.Component{render(){const{submits:e,tasks:t,onChangeTask:n,availablePoints:r}=this.props,o={};for(const e of t){const{taskId:t}=e;o[t]=Object.assign({},e,{5:0,3:0,2:0,1:0,total:0})}let a=0;for(const t in e)if(e.hasOwnProperty(t)){const n=e[t],{taskId:r,points:i}=n;o.hasOwnProperty(r)&&(o[r][i]++,o[r].total++,o[r].total>a&&(a=o[r].total))}const u=[];for(const e in o)if(o.hasOwnProperty(e)){const t=o[e];u.push(i.createElement("div",{className:"row",key:e},i.createElement("div",{className:"col-lg-2"},i.createElement("a",{href:"#",onClick:()=>{n(t.taskId)}},t.label+"-")),i.createElement("div",{className:"col-lg-10"},i.createElement("div",{className:"progress"},r.map((e,n)=>i.createElement("div",{className:"progress-bar",key:n,"data-points":e,style:{backgroundColor:at(e),width:t[e]/a*100+"%"}},t[e]))))))}return i.createElement("div",null,u)}});class lt extends i.Component{render(){const{availablePoints:e}=this.props;return i.createElement("div",{className:"fyziklani-chart-container"},i.createElement("h3",null,y.getText("Total solved problem")),i.createElement(ut,{availablePoints:e}))}}var st=Object(a.connect)(null,e=>({onActivePoints:t=>e((e=>({activePoints:e,type:"@@fyziklani/ACTION_SET_ACTIVE_POINTS"}))(+t))}))(class extends i.Component{render(){const{onActivePoints:e,inline:t}=this.props,n=[1,2,3,5].map(n=>{let r="";switch(n){case 1:r=y.getText("bod");break;case 2:case 3:r=y.getText("body");break;default:r=y.getText("bodů")}return i.createElement("div",{key:n,className:t?"legend-item col-3":"w-100 legend-item",onMouseEnter:()=>{e(n)},onMouseLeave:()=>{e(null)}},i.createElement("i",{className:"icon",style:{backgroundColor:at(n)}}),i.createElement("strong",null,n+" "+r))});return i.createElement("div",{className:t?"row col-12":"align-content-center col-lg-4 d-flex flex-wrap"},n)}});function ct(e,t,n=A.curveLinear){const{xScale:r,yScale:i}=e;return A.line().x(e=>r(new Date(e.created))).y(e=>i(e.totalPoints)).curve(n)(t)}var ft=Object(a.connect)(e=>({activePoints:e.statistics.activePoints,aggregationTime:e.statistics.aggregationTime,fromDate:e.statistics.fromDate,gameEnd:new Date(e.timer.gameEnd),gameStart:new Date(e.timer.gameStart),submits:e.data.submits,toDate:e.statistics.toDate}),null)(class extends i.Component{componentDidMount(){this.getAxis()}componentDidUpdate(){this.getAxis()}render(){const e={},{fromDate:t,toDate:n,gameStart:r,gameEnd:o,taskId:a,submits:u,aggregationTime:l,activePoints:s,availablePoints:c}=this.props;for(const t in u)if(u.hasOwnProperty(t)){const n=u[t];if(n.taskId===a&&n.points>0){const t=new Date(n.created).getTime(),r=Math.floor(t/l);e[r]=e[r]||{1:0,2:0,3:0,5:0},e[r][n.points]++}}let f=Math.floor(r.getTime()/l),d=0;for(;f<Math.floor(o.getTime()/l);)if(e[f]=e[f]||{1:0,2:0,3:0,5:0},f++,++d>200)throw Error("Safe counter!!!");let p=0;for(const t in e)if(e.hasOwnProperty(t)){const n=e[t];c.map(e=>{s&&s!==e||(p=p<n[e]?n[e]:p)})}this.yScale=A.scaleLinear().domain([0,p]).range([370,20]),this.xScale=A.scaleTime().domain([t,n]).range([30,580]);const h={xScale:this.xScale,yScale:this.yScale},m={1:[],2:[],3:[],5:[]};for(const t in e)if(e.hasOwnProperty(t)){const n=e[t],r=new Date(+t*l+l/2).toString();c.forEach(e=>{m[e].push({created:r,totalPoints:n[e]})})}return i.createElement("svg",{viewBox:"0 0 600 400",className:"chart time-line-histogram"},i.createElement("g",null,c.map((e,t)=>{if(!s||s===e){const n=[{created:r.toString(),totalPoints:0},...m[e],{created:o.toString(),totalPoints:0}],a=ct(h,n,A.curveMonotoneX),u=function(e,t,n,r=A.curveLinear){const{xScale:i,yScale:o}=e;return A.area().x(e=>i(new Date(e.created))).y0(n).y1(e=>o(e.totalPoints)).curve(r)(t)}(h,n,this.yScale(0),A.curveMonotoneX);return i.createElement("g",{key:t},i.createElement("path",{d:a,className:"line",stroke:at(e)}),i.createElement("path",{d:u,className:"area",fill:at(e)}))}return null}),i.createElement("g",{transform:"translate(0,370)",className:"x axis",ref:e=>this.xAxis=e}),i.createElement("g",{transform:"translate(30,0)",className:"x axis",ref:e=>this.yAxis=e})))}getAxis(){const e=A.axisBottom(this.xScale);A.select(this.xAxis).call(e);const t=A.axisLeft(this.yScale);A.select(this.yAxis).call(t)}});class dt extends i.Component{render(){const{taskId:e,availablePoints:t}=this.props;return i.createElement("div",{className:"fyziklani-chart-container"},i.createElement("h3",null,y.getText("Time histogram")),i.createElement("div",{className:"row"},i.createElement("div",{className:"col-8"},i.createElement(ft,{taskId:e,availablePoints:t})),i.createElement("div",{className:"col-4"},i.createElement(st,{inline:!1}))))}}var pt=Object(a.connect)(e=>({activePoints:e.statistics.activePoints,aggregationTime:e.statistics.aggregationTime,fromDate:e.statistics.fromDate,submits:e.data.submits,toDate:e.statistics.toDate}),null)(class extends i.Component{componentDidMount(){this.getAxis()}componentDidUpdate(){this.getAxis()}render(){const e={},{toDate:t,fromDate:n,taskId:r,submits:o,aggregationTime:a,activePoints:u,availablePoints:l}=this.props;for(const t in o)if(o.hasOwnProperty(t)){const n=o[t];if(n.taskId===r&&n.points>0&&(!u||u===n.points)){const t=new Date(n.created).getTime(),r=Math.floor(t/a);e[r]=e[r]||{1:0,2:0,3:0,5:0},e[r][n.points]++}}let s=0;for(const t in e)if(e.hasOwnProperty(t)){const n=e[t],r=n[1]+n[2]+n[3]+n[5];s=s<r?r:s}this.yScale=A.scaleLinear().domain([0,s]).range([370,20]),this.xScale=A.scaleTime().domain([n,t]).range([30,580]);const c=[];for(const t in e)if(e.hasOwnProperty(t)){const n=e[t],r=+t*a,o=this.xScale(new Date(r))+2,u=this.xScale(new Date(r+a))-2;let s=0;const f=[];l.forEach((e,t)=>{const r=this.yScale(s);s+=n[e];const a=this.yScale(s);f.push(i.createElement("polygon",{key:t,points:[[o,r],[o,a],[u,a],[u,r]].join(" "),fill:at(e)}))}),c.push(i.createElement("g",{key:t},f))}return i.createElement("svg",{viewBox:"0 0 600 400",className:"chart time-histogram"},i.createElement("g",null,c,i.createElement("g",{transform:"translate(0,370)",className:"x axis",ref:e=>this.xAxis=e}),i.createElement("g",{transform:"translate(30,0)",className:"x axis",ref:e=>this.yAxis=e})))}getAxis(){const e=A.axisBottom(this.xScale);A.select(this.xAxis).call(e);const t=A.axisLeft(this.yScale);A.select(this.yAxis).call(t)}});class ht extends i.Component{render(){const{taskId:e,availablePoints:t}=this.props;return i.createElement("div",{className:"fyziklani-chart-container"},i.createElement("h3",null,y.getText("Time histogram")),i.createElement("div",{className:"row"},i.createElement("div",{className:"col-8"},i.createElement(pt,{taskId:e,availablePoints:t})),i.createElement("div",{className:"col-4"},i.createElement(st,{inline:!1}))))}}var mt=Object(a.connect)(e=>({fromDate:e.statistics.fromDate,submits:e.data.submits,teams:e.data.teams,toDate:e.statistics.toDate}),null)(class extends i.Component{componentDidMount(){this.getAxis()}componentDidUpdate(){this.getAxis()}render(){const e=[],{taskId:t,submits:n,teams:r,fromDate:o,toDate:a}=this.props;this.xScale=A.scaleTime().domain([o,a]).range([30,580]);for(const i in n)if(n.hasOwnProperty(i)){const o=n[i];if(o.taskId===t){const t=r.filter(e=>o.teamId===e.teamId);t.length&&e.push(Object.assign({},o,{currentTeam:t[0]}))}}e.sort((e,t)=>new Date(e.created).getTime()-new Date(t.created).getTime());const u=e.filter(e=>{const t=new Date(e.created);return t.getTime()>o.getTime()&&t.getTime()<a.getTime()}).map((e,t)=>{const n=new Date(e.created),r=at(e.points);return i.createElement("g",{style:{opacity:1},key:t},i.createElement("circle",{cx:this.xScale(n),cy:50,r:5,fill:r,stroke:"white",strokeWidth:1},i.createElement("title",null,e.currentTeam.name+"-"+e.created.toString())))});return i.createElement("div",{className:"col-lg-12"},i.createElement("svg",{viewBox:"0 0 600 100",className:"chart time-line"},i.createElement("g",{transform:"translate(0,70)",className:"x axis",ref:e=>this.xAxis=e}),u))}getAxis(){const e=A.axisBottom(this.xScale);A.select(this.xAxis).call(e)}});class vt extends i.Component{constructor(e,t){super(e,t),this.state={from:e.gameStart,to:e.gameEnd}}render(){const{taskId:e}=this.props;return i.createElement("div",{className:"fyziklani-chart-container"},i.createElement("h3",null,y.getText("timeProgress")),i.createElement(mt,{taskId:e}))}}var yt=Object(a.connect)(e=>({taskId:e.statistics.taskId}),null)(class extends i.Component{render(){const{taskId:e}=this.props,t=[5,3,2,1];return i.createElement(i.Fragment,null,i.createElement("h2",null,y.getText("Global statistics")),i.createElement(lt,{availablePoints:t}),i.createElement("h2",null,y.getText("Statistics from single problem")),i.createElement(ot,null),i.createElement("hr",null),e&&i.createElement(i.Fragment,null,i.createElement(vt,{taskId:e,availablePoints:t}),i.createElement("hr",null),i.createElement(ht,{taskId:e,availablePoints:t}),i.createElement("hr",null),i.createElement(dt,{taskId:e,availablePoints:t})))}});var gt=Object(a.connect)(e=>({activePoints:e.statistics.activePoints,gameEnd:new Date(e.timer.gameEnd),gameStart:new Date(e.timer.gameStart),submits:e.data.submits,tasks:e.data.tasks}),null)(class extends i.Component{componentDidMount(){this.getAxis()}componentDidUpdate(){this.getAxis()}render(){const{teamId:e,submits:t,tasks:n,activePoints:r,gameEnd:o,gameStart:a}=this.props,u=[];let l=0;for(const r in t)if(t.hasOwnProperty(r)){const i=t[r],{teamId:o,points:a}=i;if(e===o){const e=n.filter(e=>i.taskId===e.taskId)[0];null!==a&&0!==a&&(l+=+a,u.push(Object.assign({},i,{currentTask:e,totalPoints:l})))}}this.xScale=A.scaleTime().domain([a,o]).range([30,580]),this.yScale=A.scaleLinear().domain([0,l]).range([370,20]);const s=u.map((e,t)=>i.createElement("circle",{key:t,opacity:r&&r!==e.points?"0":"1",r:"7.5",fill:at(e.points),cy:this.yScale(e.totalPoints),cx:this.xScale(new Date(e.created))},i.createElement("title",null,`${e.currentTask.label} - ${new Date(e.created).toLocaleTimeString()}`))),c=[{created:a.toString(),totalPoints:0},...u,{created:o.toString(),totalPoints:l}],f=ct({xScale:this.xScale,yScale:this.yScale},c);return i.createElement("div",{className:"col-lg-8"},i.createElement("svg",{viewBox:"0 0 600 400",className:"chart points-in-time"},i.createElement("g",null,i.createElement("g",{transform:"translate(0,370)",className:"x axis",ref:e=>this.xAxis=e}),i.createElement("g",{transform:"translate(30,0)",className:"x axis",ref:e=>this.yAxis=e}),i.createElement("path",{d:f,className:"line"}),s)))}getAxis(){const e=A.axisBottom(this.xScale);A.select(this.xAxis).call(e);const t=A.axisLeft(this.yScale);A.select(this.yAxis).call(t)}});class bt extends i.Component{render(){const{teamId:e}=this.props;return i.createElement("div",{className:"fyziklani-chart-container"},i.createElement("h3",null,y.getText("Time progress")),i.createElement("div",{className:"row"},i.createElement(gt,{teamId:e}),i.createElement(st,{inline:!1})))}}var _t=Object(a.connect)(e=>({activePoints:e.statistics.activePoints,submits:e.data.submits,teams:e.data.teams}),null)(class extends i.Component{render(){const{submits:e,teamId:t,activePoints:n}=this.props,r=[{points:0,count:0},{points:1,count:0},{points:2,count:0},{points:3,count:0},{points:4,count:0},{points:5,count:0}];let o=0,a=0;for(const n in e)if(e.hasOwnProperty(n)){const i=e[n],{teamId:u,points:l}=i;t===u&&null!==l&&0!==l&&(o++,r[l].count++,a+=+l)}const u=A.arc().innerRadius(0).outerRadius(150),l=(s=r.filter(e=>0!==e.count),A.pie().value(e=>+e.count)(s));var s;const c=l.map((e,t)=>i.createElement("path",{stroke:"white",strokeWidth:"5px",d:u(e),key:t,fill:at(e.data.points),opacity:n&&n!==e.data.points?"0.5":"1"})),f=l.map((e,t)=>i.createElement("g",{key:t},i.createElement("text",{textAnchor:"middle",transform:`translate(${u.centroid(e).toString()})`},Math.floor(100*e.data.count/o),"%"))),d=i.createElement("svg",{viewBox:"0 0 400 400"},i.createElement("g",{transform:"translate(200,200)"},c,f));return i.createElement("div",{className:"col-lg-8"},d)}});class xt extends i.Component{render(){const{teamId:e}=this.props;return i.createElement("div",{className:"fyziklani-chart-container"},i.createElement("h3",null,y.getText("Success of submitting")),i.createElement(_t,{teamId:e}),i.createElement(st,{inline:!1}))}}var wt=Object(a.connect)(e=>({activePoints:e.statistics.activePoints,gameEnd:new Date(e.timer.gameEnd),gameStart:new Date(e.timer.gameStart),submits:e.data.submits,tasks:e.data.tasks}),null)(class extends i.Component{componentDidMount(){this.getAxis()}componentDidUpdate(){this.getAxis()}render(){const{teamId:e,submits:t,tasks:n,gameStart:r,gameEnd:o,activePoints:a}=this.props,{activeTasks:u,teamSubmits:l}=Et(t,n,7,r,e);this.ySize=12*u.length+20,this.xScale=A.scaleTime().domain([r,o]).range([30,580]),this.yScale=A.scaleLinear().domain([0,u.length]).range([20,this.ySize-30]);const s=u.map((e,t)=>{const{taskId:n,from:r}=e,u=l.filter(e=>e.taskId===n)[0],s=u?new Date(u.created):o,c=this.xScale(r),f=this.xScale(s),d=this.yScale(t),p=at(u?u.points:null);let h=!0;return a&&(h=!1,u&&(h=a===u.points)),i.createElement("g",{style:{opacity:h?1:.1},key:t},i.createElement("polyline",{points:`${c},${d} ${f},${d}`,strokeWidth:"2",strokeLinecap:"round",stroke:p}),i.createElement("text",{x:(c+f)/2,y:d-1,fontSize:"10",textAnchor:"middle"},e.label))});return i.createElement("div",{className:"col-lg-12"},i.createElement("svg",{viewBox:`0 0 600 ${this.ySize}`,className:"chart time-line"},i.createElement("g",{transform:`translate(0,${this.ySize-30})`,className:"x axis",ref:e=>this.xAxis=e}),s))}getAxis(){const e=A.axisBottom(this.xScale).tickSizeInner(-this.ySize).tickArguments([A.timeMinute.every(30)]);A.select(this.xAxis).call(e)}});const Et=(e,t,n,r,i)=>{const o=[...t.slice(n)],a=[],u=[];for(let e=0;e<n;e++)u.push(Object.assign({},t[e],{from:r}));for(const t in e)if(e.hasOwnProperty(t)){const n=e[t],{teamId:r,created:l}=n;if(i===r&&null!==n.points&&0!==n.points){a.push(n);const e=o.shift();u.push(Object.assign({},e,{from:new Date(l)}))}}return o.sort((e,t)=>e.taskId-t.taskId),{activeTasks:u,teamSubmits:a}};class St extends i.Component{render(){const{teamId:e}=this.props;return i.createElement("div",{className:"fyziklani-chart-container"},i.createElement("h3",null,y.getText("timeLine")),i.createElement(wt,{teamId:e}),i.createElement(st,{inline:!0}))}}var Tt=Object(a.connect)(e=>({teamId:e.statistics.firstTeamId,teams:e.data.teams}),e=>({onChangeFirstTeam:t=>e(Ge(+t))}))(class extends i.Component{render(){const{teams:e,onChangeFirstTeam:t,teamId:n}=this.props,r=i.createElement("p",null,i.createElement("select",{className:"form-control",onChange:e=>{t(+e.target.value)}},i.createElement("option",{value:null},"--select team--"),e.map(e=>i.createElement("option",{key:e.teamId,value:e.teamId},e.name)))),o=e.filter(e=>e.teamId===n)[0],a=i.createElement("h2",{className:"fyziklani-headline"},y.getText("Statistic of team ")+(o?o.name:""));return i.createElement("div",null,r,n&&i.createElement(i.Fragment,null,a,i.createElement(xt,{teamId:n}),i.createElement("hr",null),i.createElement(bt,{teamId:n}),i.createElement("hr",null),i.createElement(St,{teamId:n})))}});class kt extends i.Component{render(){let e=null;const{mode:t}=this.props;switch(t){case"teams":default:e=i.createElement(Tt,null);break;case"task":e=i.createElement(yt,null);break;case"correlation":e=i.createElement(it,null)}return i.createElement("div",{className:"container"},e,i.createElement(ne,null))}}var Ot=Object(a.connect)(e=>({isOrg:e.options.isOrg,isReady:e.options.isReady}),null)(class extends i.Component{render(){const{isReady:e,mode:t,isOrg:n}=this.props;return e?i.createElement(i.Fragment,null,n&&i.createElement(ce,null),i.createElement(ie,null,i.createElement(kt,{mode:t}))):i.createElement(ee,null)}});class Ct extends i.Component{render(){const e=c.dev?Object(u.createStore)(Ze,Object(u.applyMiddleware)(s.a)):Object(u.createStore)(Ze),{mode:t,actions:n}=this.props;return i.createElement(a.Provider,{store:e},i.createElement("div",{className:"fyziklani-statistics"},i.createElement(q,{accessKey:"@@fyziklani-results",actions:n}),i.createElement(Ot,{mode:t})),i.createElement(Oe,null))}}var Mt=n(17);const At=Object(u.combineReducers)({fetchApi:H,form:Mt.reducer}),Nt=e=>3*(+e[0]+ +e[3]+ +e[6])+7*(+e[1]+ +e[4]+ +e[7])+(+e[2]+ +e[5]+ +e[8]);class Pt extends i.Component{render(){const{meta:{valid:e,error:t}}=this.props;return i.createElement("span",{className:"input-group "+(e?"text-success":"invalid-feedback")},t||"OK")}}class Rt extends i.Component{render(){const{meta:{valid:e},input:t}=this.props;return i.createElement("span",{className:"form-group "+(e?"has-success":"has-error")},i.createElement("input",Object.assign({},t,{maxLength:9,className:"form-control-lg form-control "+(e?"is-valid":"is-invalid"),placeholder:"XXXXXXYYX"})))}}class It extends i.Component{render(){const{valid:e,submitting:t,handleSubmit:n,onSubmit:r,availablePoints:o}=this.props,a=o.map((o,a)=>i.createElement("button",{className:"btn btn-lg "+(e?"btn-success":"btn-outline-secondary"),key:a,type:"button",disabled:!e||t,onClick:n(e=>r(Object.assign({},e,{points:o})))},t?i.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"}):o+". bodu"));return i.createElement("div",{className:"d-flex justify-content-around"},a)}}class Ft extends i.Component{render(){const{code:e,tasks:t,teams:n}=this.props;if(!e)return null;const r=e.length,o="0".repeat(9-r)+e,a=o.match(/^([0-9]+)/),u=n.filter(e=>e.teamId===+a[1])[0],l=o.match(/([a-zA-Z]{2})/);let s=null;return l&&(s=t.filter(e=>e.label===l[1].toUpperCase())[0]),i.createElement("div",null,i.createElement("h3",{className:"fyziklani-headline-color"},"Team"),u?i.createElement("span",{className:"text-success"},u.name):i.createElement("span",{className:"text-danger"},"Invalid team"),i.createElement("h3",{className:"fyziklani-headline-color"},"Task"),s?i.createElement("span",{className:"text-success"},s.name):i.createElement("span",{className:"text-danger"},"Invalid task"))}}var jt=Object(a.connect)((e,t)=>{const n=Object(Mt.formValueSelector)(Dt),{accessKey:r}=t;return{code:n(e,"code"),messages:e.fetchApi.hasOwnProperty(r)?e.fetchApi[r].messages:[]}},null)(class extends i.Component{render(){const{valid:e,submitting:t,handleSubmit:n,onSubmit:r,code:o,tasks:a,teams:u,messages:l,availablePoints:s}=this.props;return i.createElement("div",null,l.map((e,t)=>i.createElement("div",{key:t,className:"alert alert-"+e.level}," ",e.text)),i.createElement("div",{className:"row"},i.createElement("div",{className:"col-6"},i.createElement("h3",{className:"fyziklani-headline-color"},"Task's code"),i.createElement("div",{className:"form-group"},i.createElement(Mt.Field,{name:"code",component:Rt})),i.createElement("div",{className:"form-group"},i.createElement(Mt.Field,{name:"code",component:Pt})),i.createElement(It,{availablePoints:s,valid:e,submitting:t,handleSubmit:n,onSubmit:r})),i.createElement("div",{className:"col-6"},i.createElement(Ft,{code:o,tasks:a,teams:u}))))}});const Dt="codeForm";var Ut=Object(Mt.reduxForm)({form:Dt,validate:(e,t)=>{const n={};if(!e.code)return n.code="Code is empty",n;const r=e.code.length,i="0".repeat(9-r)+e.code,o=i.match(/^([0-9]+)/);t.teams.some(e=>e.teamId===+o[1])||(n.code="Team does not exist");const a=i.match(/([a-zA-Z]{2})/);return a&&(t.tasks.some(e=>e.label===a[1].toUpperCase())||(n.code="Task does not exist")),i.match(/[a-zA-Z]{2}([0-9])/)&&((e=>{const t=e.split("").map(e=>+e.toLocaleUpperCase().replace("A","1").replace("B","2").replace("C","3").replace("D","4").replace("E","5").replace("F","6").replace("G","7").replace("H","8"));return Nt(t)%10==0})(i)||(n.code="Invalid control")),i.match(/([0-9]{6}[a-zA-Z]{2}[0-9])/)||(n.code="Code is too sort"),n}})(class extends i.Component{render(){const{valid:e,submitting:t,handleSubmit:n,onSubmit:r,tasks:o,teams:a,availablePoints:u}=this.props;return i.createElement(Mt.Form,{onSubmit:n(r)},i.createElement(jt,{availablePoints:u,accessKey:zt,tasks:o,teams:a,onSubmit:r,valid:e,submitting:t,handleSubmit:n}))}});const zt="@fyziklani-submit-form";var Lt=Object(a.connect)(()=>({}),(e,t)=>({onSubmit:n=>((e,t,n)=>{const r={act:"submit",requestData:Object.assign({},t,{code:(e=>{const t=e.length;return("0".repeat(9-t)+e).toLocaleUpperCase()})(t.code)})};return L(zt,e,r,()=>{e(Object(Mt.reset)(Dt))},()=>null,n)})(e,n,t.actions.save)}))(class extends i.Component{render(){const{tasks:e,teams:t,onSubmit:n,availablePoints:r}=this.props;return i.createElement("div",{className:"row"},i.createElement("div",{className:"col-lg-12 col-md-12"},i.createElement(Ut,{tasks:e,teams:t,onSubmit:n,availablePoints:r})),i.createElement(Oe,null))}});class Vt extends i.Component{render(){const{tasks:e,teams:t,actions:n,availablePoints:r}=this.props,o=c.dev?Object(u.createStore)(At,Object(u.applyMiddleware)(s.a)):Object(u.createStore)(At);return i.createElement(a.Provider,{store:o},i.createElement(Lt,{tasks:e,teams:t,actions:n,availablePoints:r}))}}const qt=(e,t,n,r,l,f)=>{const d=document.querySelector("#wrap > .container");d&&(d.className=d.className.split(" ").reduce((e,t)=>"container"===t?e+" container-fluid":e+" "+t,""));const p=JSON.parse(l);return o.render(i.createElement(class extends i.Component{render(){const e=c.dev?Object(u.createStore)(ke,Object(u.applyMiddleware)(s.a)):Object(u.createStore)(ke),{teams:t,rooms:n}=this.props;return i.createElement(a.Provider,{store:e},i.createElement(Ue,{teams:t,rooms:n}))}},{teams:p.teams,rooms:p.rooms}),e),!0};r.register((e,t,n,r,a,u)=>{if("fyziklani"!==t)return!1;switch(n){case"routing":return qt(e,0,0,0,a);case"results":return((e,t,n,r,a,u)=>{switch(r){case"presentation":return o.render(i.createElement(_e,{mode:"presentation",actions:u}),e),!0;case"view":return o.render(i.createElement(_e,{mode:"view",actions:u}),e),!0;default:throw Error("Not implement")}})(e,0,0,r,0,u);case"submit-form":return((e,t,n,r,a,u)=>{const l=document.createElement("div"),{tasks:s,teams:c,availablePoints:f}=JSON.parse(a);return e.appendChild(l),o.render(i.createElement(Vt,{tasks:s,teams:c,actions:u,availablePoints:f}),l),!0})(e,0,0,0,a,u);case"statistics":return((e,t,n,r,a,u)=>{switch(r){case"team":case"task":case"correlation":return o.render(i.createElement(Ct,{mode:r,actions:u}),e),!0;default:throw Error("Not implement")}})(e,0,0,r,0,u);case"schedule":return((e,t,n,r,a,u)=>{if(!(e instanceof HTMLInputElement))return!1;const l=JSON.parse(a),s=document.createElement("div");e.parentElement.appendChild(s);const c=e.parentElement.querySelector("span");let f=null;c&&(f=c.innerText,c.style.display="none");const d=e.parentElement.parentElement.querySelector("label");let p=null;return d&&(p=d.innerHTML,d.style.display="none"),e instanceof HTMLInputElement&&(e.style.display="none",o.render(i.createElement(Ke,{mode:r,actions:u,input:e,data:l,description:f,label:p}),s),!0)})(e,0,0,r,a,u);default:throw new Error("not implement")}}),r.register((e,t,n,r,a)=>{if("events"!==t)return!1;if("accommodation"!==n)return!1;const u=JSON.parse(a),l=document.createElement("div");return e.parentElement.appendChild(l),e instanceof HTMLInputElement&&(e.style.display="none",o.render(i.createElement(M,{accommodationDef:u,input:e,mode:r}),l),!0)}),r.register((e,t,n,r,a)=>{if("events"!==t)return!1;if("applications-time-progress"!==n)return!1;const u=JSON.parse(a),l=document.createElement("div");return e.appendChild(l),o.render(i.createElement(P,{data:u}),l),!0}),r.run()},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=n(1);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o=function(e){var t=e.getIn;return function(e){var n=i({prop:"values",getFormState:function(e){return t(e,"form")}},e),o=n.form,a=n.prop,u=n.getFormState;return(0,r.connect)(function(e){var n;return(n={})[a]=t(u(e),o+".values"),n})}};t.default=o},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(93)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(38))&&r.__esModule?r:{default:r};var o=function(e){var t=function(e){return function(t,n){return void 0!==e.getIn(t,n)}},n=e.deepEqual,r=e.empty,o=e.getIn,a=e.deleteIn,u=e.setIn;return function(l){return void 0===l&&(l=t),function t(s,c){if("]"===c[c.length-1]){var f=(0,i.default)(c);return f.pop(),o(s,f.join("."))?u(s,c):s}var d=s;l(e)(s,c)&&(d=a(s,c));var p=c.lastIndexOf(".");if(p>0){var h=c.substring(0,p);if("]"!==h[h.length-1]){var m=o(d,h);if(n(m,r))return t(d,h)}}return d}}};t.default=o},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=u(n(34)),i=n(53),o=u(n(95)),a=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var s=function(e){var t=e.getIn;return function(e,n){var r=null;/^values/.test(n)&&(r=n.replace("values","initial"));var i=!r||void 0===t(e,r);return void 0!==t(e,n)&&i}},c=function(e){return e&&e.type&&e.type.length>i.prefix.length&&e.type.substring(0,i.prefix.length)===i.prefix};var f=function(e){var t,n=e.deepEqual,u=e.empty,f=e.forEach,d=e.getIn,p=e.setIn,h=e.deleteIn,m=e.fromJS,v=e.keys,y=e.size,g=e.some,b=e.splice,_=(0,o.default)(e)(s),x=(0,o.default)(a.default)(s),w=function(e,t,n,r,i,o,a){var u=d(e,t+"."+n);return u||a?p(e,t+"."+n,b(u,r,i,o)):e},E=function(e,t,n,r,i,o,u){var l=d(e,t),s=a.default.getIn(l,n);return s||u?p(e,t,a.default.setIn(l,n,a.default.splice(s,r,i,o))):e},S=["values","fields","submitErrors","asyncErrors"],T=function(e,t,n,r,i){var o=e,a=null!=i?u:void 0;return o=w(o,"values",t,n,r,i,!0),o=w(o,"fields",t,n,r,a),o=E(o,"syncErrors",t,n,r,void 0),o=E(o,"syncWarnings",t,n,r,void 0),o=w(o,"submitErrors",t,n,r,void 0),o=w(o,"asyncErrors",t,n,r,void 0)},k=((t={})[i.ARRAY_INSERT]=function(e,t){var n=t.meta,r=n.field,i=n.index,o=t.payload;return T(e,r,i,0,o)},t[i.ARRAY_MOVE]=function(e,t){var n=t.meta,r=n.field,i=n.from,o=n.to,a=d(e,"values."+r),u=e;return(a?y(a):0)&&S.forEach(function(e){var t=e+"."+r;if(d(u,t)){var n=d(u,t+"["+i+"]");u=p(u,t,b(d(u,t),i,1)),u=p(u,t,b(d(u,t),o,0,n))}}),u},t[i.ARRAY_POP]=function(e,t){var n=t.meta.field,r=d(e,"values."+n),i=r?y(r):0;return i?T(e,n,i-1,1):e},t[i.ARRAY_PUSH]=function(e,t){var n=t.meta.field,r=t.payload,i=d(e,"values."+n),o=i?y(i):0;return T(e,n,o,0,r)},t[i.ARRAY_REMOVE]=function(e,t){var n=t.meta,r=n.field,i=n.index;return T(e,r,i,1)},t[i.ARRAY_REMOVE_ALL]=function(e,t){var n=t.meta.field,r=d(e,"values."+n),i=r?y(r):0;return i?T(e,n,0,i):e},t[i.ARRAY_SHIFT]=function(e,t){var n=t.meta.field;return T(e,n,0,1)},t[i.ARRAY_SPLICE]=function(e,t){var n=t.meta,r=n.field,i=n.index,o=n.removeNum,a=t.payload;return T(e,r,i,o,a)},t[i.ARRAY_SWAP]=function(e,t){var n=t.meta,r=n.field,i=n.indexA,o=n.indexB,a=e;return S.forEach(function(e){var t=d(a,e+"."+r+"["+i+"]"),n=d(a,e+"."+r+"["+o+"]");void 0===t&&void 0===n||(a=p(a,e+"."+r+"["+i+"]",n),a=p(a,e+"."+r+"["+o+"]",t))}),a},t[i.ARRAY_UNSHIFT]=function(e,t){var n=t.meta.field,r=t.payload;return T(e,n,0,0,r)},t[i.AUTOFILL]=function(e,t){var n=t.meta.field,r=t.payload,i=e;return i=_(i,"asyncErrors."+n),i=_(i,"submitErrors."+n),i=p(i,"fields."+n+".autofilled",!0),i=p(i,"values."+n,r)},t[i.BLUR]=function(e,t){var n=t.meta,r=n.field,i=n.touch,o=t.payload,a=e;return void 0===d(a,"initial."+r)&&""===o?a=_(a,"values."+r):void 0!==o&&(a=p(a,"values."+r,o)),r===d(a,"active")&&(a=h(a,"active")),a=h(a,"fields."+r+".active"),i&&(a=p(a,"fields."+r+".touched",!0),a=p(a,"anyTouched",!0)),a},t[i.CHANGE]=function(e,t){var n=t.meta,i=n.field,o=n.touch,a=n.persistentSubmitErrors,u=t.payload,l=e;if(void 0===d(l,"initial."+i)&&""===u)l=_(l,"values."+i);else if((0,r.default)(u)){var s=d(e,"values."+i);l=p(l,"values."+i,u(s,e.values))}else void 0!==u&&(l=p(l,"values."+i,u));return l=_(l,"asyncErrors."+i),a||(l=_(l,"submitErrors."+i)),l=_(l,"fields."+i+".autofilled"),o&&(l=p(l,"fields."+i+".touched",!0),l=p(l,"anyTouched",!0)),l},t[i.CLEAR_SUBMIT]=function(e){return h(e,"triggerSubmit")},t[i.CLEAR_SUBMIT_ERRORS]=function(e){var t=e;return t=_(t,"submitErrors"),t=h(t,"error")},t[i.CLEAR_ASYNC_ERROR]=function(e,t){var n=t.meta.field;return h(e,"asyncErrors."+n)},t[i.CLEAR_FIELDS]=function(e,t){var n=t.meta,r=n.keepTouched,i=n.persistentSubmitErrors,o=e;n.fields.forEach(function(e){o=_(o,"values."+e),o=_(o,"asyncErrors."+e),i||(o=_(o,"submitErrors."+e)),o=_(o,"fields."+e+".autofilled"),r||(o=h(o,"fields."+e+".touched"))});var a=g(v(d(o,"registeredFields")),function(e){return d(o,"fields."+e+".touched")});return o=a?p(o,"anyTouched",!0):h(o,"anyTouched")},t[i.FOCUS]=function(e,t){var n=t.meta.field,r=e,i=d(e,"active");return r=h(r,"fields."+i+".active"),r=p(r,"fields."+n+".visited",!0),r=p(r,"fields."+n+".active",!0),r=p(r,"active",n)},t[i.INITIALIZE]=function(e,t){var r=t.payload,i=t.meta,o=i.keepDirty,a=i.keepSubmitSucceeded,l=i.updateUnregisteredFields,s=i.keepValues,c=m(r),h=u,y=d(e,"warning");y&&(h=p(h,"warning",y));var g=d(e,"syncWarnings");g&&(h=p(h,"syncWarnings",g));var b=d(e,"error");b&&(h=p(h,"error",b));var _=d(e,"syncErrors");_&&(h=p(h,"syncErrors",_));var x=d(e,"registeredFields");x&&(h=p(h,"registeredFields",x));var w=d(e,"values"),E=d(e,"initial"),S=c,T=w;if(o&&x){if(!n(S,E)){var k=function(e){var t=d(E,e),r=d(w,e);if(n(r,t)){var i=d(S,e);d(T,e)!==i&&(T=p(T,e,i))}};l||f(v(x),function(e){return k(e)}),f(v(S),function(e){if(void 0===d(E,e)){var t=d(S,e);T=p(T,e,t)}l&&k(e)})}}else T=S;return s&&(f(v(w),function(e){var t=d(w,e);T=p(T,e,t)}),f(v(E),function(e){var t=d(E,e);S=p(S,e,t)})),a&&d(e,"submitSucceeded")&&(h=p(h,"submitSucceeded",!0)),h=p(h,"values",T),h=p(h,"initial",S)},t[i.REGISTER_FIELD]=function(e,t){var n=t.payload,r=n.name,i=n.type,o="registeredFields['"+r+"']",a=d(e,o);if(a){var u=d(a,"count")+1;a=p(a,"count",u)}else a=m({name:r,type:i,count:1});return p(e,o,a)},t[i.RESET]=function(e){var t=u,n=d(e,"registeredFields");n&&(t=p(t,"registeredFields",n));var r=d(e,"initial");return r&&(t=p(t,"values",r),t=p(t,"initial",r)),t},t[i.RESET_SECTION]=function(e,t){var n=t.meta.sections,r=e;n.forEach(function(t){r=_(r,"asyncErrors."+t),r=_(r,"submitErrors."+t),r=_(r,"fields."+t);var n=d(e,"initial."+t);r=n?p(r,"values."+t,n):_(r,"values."+t)});var i=g(v(d(r,"registeredFields")),function(e){return d(r,"fields."+e+".touched")});return r=i?p(r,"anyTouched",!0):h(r,"anyTouched")},t[i.SUBMIT]=function(e){return p(e,"triggerSubmit",!0)},t[i.START_ASYNC_VALIDATION]=function(e,t){var n=t.meta.field;return p(e,"asyncValidating",n||!0)},t[i.START_SUBMIT]=function(e){return p(e,"submitting",!0)},t[i.STOP_ASYNC_VALIDATION]=function(e,t){var n=t.payload,r=e;if(r=h(r,"asyncValidating"),n&&Object.keys(n).length){var i=n._error,o=l(n,["_error"]);i&&(r=p(r,"error",i)),Object.keys(o).length&&(r=p(r,"asyncErrors",m(o)))}else r=h(r,"error"),r=h(r,"asyncErrors");return r},t[i.STOP_SUBMIT]=function(e,t){var n=t.payload,r=e;if(r=h(r,"submitting"),r=h(r,"submitFailed"),r=h(r,"submitSucceeded"),n&&Object.keys(n).length){var i=n._error,o=l(n,["_error"]);r=i?p(r,"error",i):h(r,"error"),r=Object.keys(o).length?p(r,"submitErrors",m(o)):h(r,"submitErrors"),r=p(r,"submitFailed",!0)}else r=h(r,"error"),r=h(r,"submitErrors");return r},t[i.SET_SUBMIT_FAILED]=function(e,t){var n=t.meta.fields,r=e;return r=p(r,"submitFailed",!0),r=h(r,"submitSucceeded"),r=h(r,"submitting"),n.forEach(function(e){return r=p(r,"fields."+e+".touched",!0)}),n.length&&(r=p(r,"anyTouched",!0)),r},t[i.SET_SUBMIT_SUCCEEDED]=function(e){var t=e;return t=h(t,"submitFailed"),t=p(t,"submitSucceeded",!0)},t[i.TOUCH]=function(e,t){var n=e;return t.meta.fields.forEach(function(e){return n=p(n,"fields."+e+".touched",!0)}),n=p(n,"anyTouched",!0)},t[i.UNREGISTER_FIELD]=function(e,t){var r=t.payload,i=r.name,o=r.destroyOnUnmount,l=e,s="registeredFields['"+i+"']",c=d(l,s);if(!c)return l;var f=d(c,"count")-1;if(f<=0&&o){l=h(l,s),n(d(l,"registeredFields"),u)&&(l=h(l,"registeredFields"));var m=d(l,"syncErrors");m&&(m=x(m,i),l=a.default.deepEqual(m,a.default.empty)?h(l,"syncErrors"):p(l,"syncErrors",m));var v=d(l,"syncWarnings");v&&(v=x(v,i),l=a.default.deepEqual(v,a.default.empty)?h(l,"syncWarnings"):p(l,"syncWarnings",v)),l=_(l,"submitErrors."+i),l=_(l,"asyncErrors."+i)}else c=p(c,"count",f),l=p(l,s,c);return l},t[i.UNTOUCH]=function(e,t){var n=e;t.meta.fields.forEach(function(e){return n=h(n,"fields."+e+".touched")});var r=g(v(d(n,"registeredFields")),function(e){return d(n,"fields."+e+".touched")});return n=r?p(n,"anyTouched",!0):h(n,"anyTouched")},t[i.UPDATE_SYNC_ERRORS]=function(e,t){var n=t.payload,r=n.syncErrors,i=n.error,o=e;return i?(o=p(o,"error",i),o=p(o,"syncError",!0)):(o=h(o,"error"),o=h(o,"syncError")),o=Object.keys(r).length?p(o,"syncErrors",r):h(o,"syncErrors")},t[i.UPDATE_SYNC_WARNINGS]=function(e,t){var n=t.payload,r=n.syncWarnings,i=n.warning,o=e;return o=i?p(o,"warning",i):h(o,"warning"),o=Object.keys(r).length?p(o,"syncWarnings",r):h(o,"syncWarnings")},t);return function e(t){return t.plugin=function(t){var n=this;return e(function(e,r){void 0===e&&(e=u),void 0===r&&(r={type:"NONE"});var i=function(n,i){var o=d(n,i),a=t[i](o,r,d(e,i));return a!==o?p(n,i,a):n},o=n(e,r),a=r&&r.meta&&r.meta.form;return a?t[a]?i(o,a):o:Object.keys(t).reduce(i,o)})},t}(function(e){return function(t,n){void 0===t&&(t=u),void 0===n&&(n={type:"NONE"});var r=n&&n.meta&&n.meta.form;if(!r||!c(n))return t;if(n.type===i.DESTROY&&n.meta&&n.meta.form)return n.meta.form.reduce(function(e,t){return _(e,t)},t);var o=d(t,r),a=e(o,n);return a===o?t:p(t,r,a)}}(function(e,t){void 0===e&&(e=u);var n=k[t.type];return n?n(e,t):e}))};t.default=f},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(96)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";(function(e){t.__esModule=!0,t.default=void 0;var n=function(){var t=e;return!(void 0===t||!t.hot||"function"!=typeof t.hot.status||"apply"!==t.hot.status())};t.default=n}).call(this,n(27)(e))},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){return e.displayName||e.name||"Component"};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(41))&&r.__esModule?r:{default:r};function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var a=function(e){return e&&"SubmissionError"===e.name},u=function(e,t,n,r,u){var l=t.dispatch,s=t.onSubmitFail,c=t.onSubmitSuccess,f=t.startSubmit,d=t.stopSubmit,p=t.setSubmitFailed,h=t.setSubmitSucceeded,m=t.syncErrors,v=t.asyncErrors,y=t.touch,g=t.values,b=t.persistentSubmitErrors;if(y.apply(void 0,u),n||b){var _=function(){var n;try{n=e(g,l,t)}catch(e){var r=a(e)?e.errors:void 0;if(d(r),p.apply(void 0,u),s&&s(r,l,e,t),r||s)return r;throw e}return(0,i.default)(n)?(f(),n.then(function(e){return d(),h(),c&&c(e,l,t),e},function(e){var n=a(e)?e.errors:void 0;if(d(n),p.apply(void 0,u),s&&s(n,l,e,t),n||s)return n;throw e})):(h(),c&&c(n,l,t),n)},x=r&&r();return x?x.then(function(e){if(e)throw e;return _()}).catch(function(e){return p.apply(void 0,u),s&&s(e,l,null,t),Promise.reject(e)}):_()}p.apply(void 0,u);var w=function(e){var t=e.asyncErrors,n=e.syncErrors;return t&&"function"==typeof t.merge?t.merge(n).toJS():o({},t,n)}({asyncErrors:v,syncErrors:m});return s&&s(w,l,null,t),w};t.default=u},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(3))&&r.__esModule?r:{default:r};var o=function(e,t,n,r,i){for(var o=function(e){return Array.isArray(e)?e:[e]}(r),a=0;a<o.length;a++){var u=o[a](e,t,n,i);if(u)return u}},a=function(e,t){var n=t.getIn;return function(t,r){var a={};return Object.keys(e).forEach(function(u){var l=n(t,u),s=o(l,t,r,e[u],u);s&&(a=i.default.setIn(a,u,s))}),a}};t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(56))&&r.__esModule?r:{default:r};var o=function(e){return function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return(0,i.default)(t)?e.apply(void 0,r):e.apply(void 0,[t].concat(r))}};t.default=o},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(41))&&r.__esModule?r:{default:r};var o=function(e,t,n,r){t(r);var o=e();if(!(0,i.default)(o))throw new Error("asyncValidate function passed to reduxForm must return a promise");var a=function(e){return function(t){if(e){if(t&&Object.keys(t).length)return n(t),t;throw n(),new Error("Asynchronous validation promise was rejected without errors.")}return n(),Promise.resolve()}};return o.then(a(!1),a(!0))};t.default=o},function(e,t,n){"use strict";var r=n(39),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={};a[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var u=Object.defineProperty,l=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,c=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var p=f(n);p&&p!==d&&e(t,p,r)}var h=l(n);s&&(h=h.concat(s(n)));for(var m=a[t.$$typeof]||i,v=a[n.$$typeof]||i,y=0;y<h.length;++y){var g=h[y];if(!(o[g]||r&&r[g]||v&&v[g]||m&&m[g])){var b=c(n,g);try{u(t,g,b)}catch(e){}}}return t}return t}},function(e,t,n){var r=n(21),i=n(19),o=n(47),a=n(11);e.exports=function(e,t,n){if(!a(n))return!1;var u=typeof t;return!!("number"==u?i(n)&&o(t,n.length):"string"==u&&t in n)&&r(n[t],e)}},function(e,t){var n=800,r=16,i=Date.now;e.exports=function(e){var t=0,o=0;return function(){var a=i(),u=r-(a-o);if(o=a,u>0){if(++t>=n)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t,n){var r=n(107),i=n(67),o=n(43),a=i?function(e,t){return i(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:o;e.exports=a},function(e,t,n){var r=n(108),i=n(106)(r);e.exports=i},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(110),i=Math.max;e.exports=function(e,t,n){return t=i(void 0===t?e.length-1:t,0),function(){for(var o=arguments,a=-1,u=i(o.length-t,0),l=Array(u);++a<u;)l[a]=o[t+a];a=-1;for(var s=Array(t+1);++a<t;)s[a]=o[a];return s[t]=n(l),r(e,this,s)}}},function(e,t,n){var r=n(43),i=n(111),o=n(109);e.exports=function(e,t){return o(i(e,t,r),e+"")}},function(e,t,n){var r=n(112),i=n(105);e.exports=function(e){return r(function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:void 0,u=o>2?n[2]:void 0;for(a=e.length>3&&"function"==typeof a?(o--,a):void 0,u&&i(n[0],n[1],u)&&(a=o<3?void 0:a,o=1),t=Object(t);++r<o;){var l=n[r];l&&e(t,l,r,a)}return t})}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){var r=n(11),i=n(25),o=n(114),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=i(e),n=[];for(var u in e)("constructor"!=u||!t&&a.call(e,u))&&n.push(u);return n}},function(e,t,n){var r=n(24),i=n(21),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];o.call(e,t)&&i(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(116),i=n(24);e.exports=function(e,t,n,o){var a=!n;n||(n={});for(var u=-1,l=t.length;++u<l;){var s=t[u],c=o?o(n[s],e[s],s,n,e):void 0;void 0===c&&(c=e[s]),a?i(n,s,c):r(n,s,c)}return n}},function(e,t,n){var r=n(117),i=n(57);e.exports=function(e){return r(e,i(e))}},function(e,t,n){var r=n(18),i=n(59),o=n(14),a="[object Object]",u=Function.prototype,l=Object.prototype,s=u.toString,c=l.hasOwnProperty,f=s.call(Object);e.exports=function(e){if(!o(e)||r(e)!=a)return!1;var t=i(e);if(null===t)return!0;var n=c.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&s.call(n)==f}},function(e,t,n){var r=n(19),i=n(14);e.exports=function(e){return i(e)&&r(e)}},function(e,t,n){var r=n(11),i=Object.create,o=function(){function e(){}return function(t){if(!r(t))return{};if(i)return i(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=o},function(e,t,n){var r=n(121),i=n(59),o=n(25);e.exports=function(e){return"function"!=typeof e.constructor||o(e)?{}:r(i(e))}},function(e,t,n){var r=n(73);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){var r=n(123);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){(function(e){var r=n(9),i="object"==typeof t&&t&&!t.nodeType&&t,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=o&&o.exports===i?r.Buffer:void 0,u=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=u?u(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(27)(e))},function(e,t,n){var r=n(60),i=n(125),o=n(124),a=n(80),u=n(122),l=n(29),s=n(7),c=n(120),f=n(28),d=n(34),p=n(11),h=n(119),m=n(26),v=n(58),y=n(118);e.exports=function(e,t,n,g,b,_,x){var w=v(e,n),E=v(t,n),S=x.get(E);if(S)r(e,n,S);else{var T=_?_(w,E,n+"",e,t,x):void 0,k=void 0===T;if(k){var O=s(E),C=!O&&f(E),M=!O&&!C&&m(E);T=E,O||C||M?s(w)?T=w:c(w)?T=a(w):C?(k=!1,T=i(E,!0)):M?(k=!1,T=o(E,!0)):T=[]:h(E)||l(E)?(T=w,l(w)?T=y(w):p(w)&&!d(w)||(T=u(E))):k=!1}k&&(x.set(E,T),b(T,E,g,_,x),x.delete(E)),r(e,n,T)}}},function(e,t,n){var r=n(49),i=n(60),o=n(66),a=n(126),u=n(11),l=n(57),s=n(58);e.exports=function e(t,n,c,f,d){t!==n&&o(n,function(o,l){if(u(o))d||(d=new r),a(t,n,l,c,e,f,d);else{var p=f?f(s(t,l),o,l+"",t,n,d):void 0;void 0===p&&(p=o),i(t,l,p)}},l)}},function(e,t,n){var r=n(127),i=n(113)(function(e,t,n){r(e,t,n)});e.exports=i},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=C(n(128)),i=C(n(45)),o=n(23),a=C(n(104)),u=C(n(8)),l=C(n(41)),s=C(n(10)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),f=n(1),d=n(4),p=C(n(89)),h=C(n(103)),m=C(n(88)),v=C(n(87)),y=C(n(86)),g=C(n(85)),b=C(n(56)),_=C(n(102)),x=C(n(101)),w=C(n(100)),E=C(n(42)),S=C(n(3)),T=C(n(99)),k=C(n(98)),O=n(12);function C(e){return e&&e.__esModule?e:{default:e}}function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function A(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function N(){return(N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function P(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var R=p.default.arrayInsert,I=p.default.arrayMove,F=p.default.arrayPop,j=p.default.arrayPush,D=p.default.arrayRemove,U=p.default.arrayRemoveAll,z=p.default.arrayShift,L=p.default.arraySplice,V=p.default.arraySwap,q=p.default.arrayUnshift,B=p.default.blur,W=p.default.change,Y=p.default.focus,H=P(p.default,["arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","blur","change","focus"]),$={arrayInsert:R,arrayMove:I,arrayPop:F,arrayPush:j,arrayRemove:D,arrayRemoveAll:U,arrayShift:z,arraySplice:L,arraySwap:V,arrayUnshift:q},K=Object.keys(p.default).concat(["array","asyncErrors","initialValues","syncErrors","syncWarnings","values","registeredFields"]),X=function(e){if(!e||"function"!=typeof e)throw new Error("You must either pass handleSubmit() an onSubmit function or pass onSubmit as a prop");return e},G=function(e){var t=e.deepEqual,n=e.empty,p=e.getIn,C=e.setIn,R=e.keys,I=e.fromJS,F=(0,E.default)(e);return function(E){var j=N({touchOnBlur:!0,touchOnChange:!1,persistentSubmitErrors:!1,destroyOnUnmount:!0,shouldAsyncValidate:m.default,shouldValidate:v.default,shouldError:y.default,shouldWarn:g.default,enableReinitialize:!1,keepDirtyOnReinitialize:!1,updateUnregisteredFields:!1,getFormState:function(e){return p(e,"form")},pure:!0,forceUnregisterOnUnmount:!1},E);return function(m){var E=function(n){function i(){for(var t,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return(t=n.call.apply(n,[this].concat(i))||this).wrapped=c.default.createRef(),t.destroyed=!1,t.fieldCounts={},t.fieldValidators={},t.lastFieldValidatorKeys=[],t.fieldWarners={},t.lastFieldWarnerKeys=[],t.innerOnSubmit=void 0,t.submitPromise=void 0,t.getValues=function(){return t.props.values},t.isValid=function(){return t.props.valid},t.isPristine=function(){return t.props.pristine},t.register=function(e,n,r,i){var o=(t.fieldCounts[e]||0)+1;t.fieldCounts[e]=o,t.props.registerField(e,n),r&&(t.fieldValidators[e]=r),i&&(t.fieldWarners[e]=i)},t.unregister=function(e){var n=t.fieldCounts[e];if(1===n?delete t.fieldCounts[e]:null!=n&&(t.fieldCounts[e]=n-1),!t.destroyed){var r=t.props,i=r.destroyOnUnmount,o=r.forceUnregisterOnUnmount,a=r.unregisterField;i||o?(a(e,i),t.fieldCounts[e]||(delete t.fieldValidators[e],delete t.fieldWarners[e],t.lastFieldValidatorKeys=t.lastFieldValidatorKeys.filter(function(t){return t!==e}))):a(e,!1)}},t.getFieldList=function(e){var n=t.props.registeredFields,r=[];if(!n)return r;var i=R(n);return e&&e.excludeFieldArray&&(i=i.filter(function(e){return"FieldArray"!==p(n,"['"+e+"'].type")})),I(i.reduce(function(e,t){return e.push(t),e},r))},t.getValidators=function(){var e={};return Object.keys(t.fieldValidators).forEach(function(n){var r=t.fieldValidators[n]();r&&(e[n]=r)}),e},t.generateValidator=function(){var n=t.getValidators();return Object.keys(n).length?(0,x.default)(n,e):void 0},t.getWarners=function(){var e={};return Object.keys(t.fieldWarners).forEach(function(n){var r=t.fieldWarners[n]();r&&(e[n]=r)}),e},t.generateWarner=function(){var n=t.getWarners();return Object.keys(n).length?(0,x.default)(n,e):void 0},t.asyncValidate=function(e,n,r){var i,o,a=t.props,u=a.asyncBlurFields,l=a.asyncChangeFields,s=a.asyncErrors,c=a.asyncValidate,f=a.dispatch,d=a.initialized,m=a.pristine,v=a.shouldAsyncValidate,y=a.startAsyncValidation,g=a.stopAsyncValidation,b=a.syncErrors,_=a.values,x=!e;if(c){var w=x?_:C(_,e,n),E=x||!p(b,e);if(i=u&&e&&~u.indexOf(e.replace(/\[[0-9]+\]/g,"[]")),o=l&&e&&~l.indexOf(e.replace(/\[[0-9]+\]/g,"[]")),(x||!u&&!l||("blur"===r?i:o))&&v({asyncErrors:s,initialized:d,trigger:x?"submit":r,blurredField:e,pristine:m,syncValidationPasses:E}))return(0,h.default)(function(){return c(w,f,t.props,e)},y,g,e)}},t.submitCompleted=function(e){return delete t.submitPromise,e},t.submitFailed=function(e){throw delete t.submitPromise,e},t.listenToSubmit=function(e){return(0,l.default)(e)?(t.submitPromise=e,e.then(t.submitCompleted,t.submitFailed)):e},t.submit=function(e){var n=t.props,r=n.onSubmit,i=n.blur,o=n.change,a=n.dispatch;return e&&!(0,b.default)(e)?(0,_.default)(function(){return!t.submitPromise&&t.listenToSubmit((0,w.default)(X(e),N({},t.props,(0,d.bindActionCreators)({blur:i,change:o},a)),t.props.validExceptSubmit,t.asyncValidate,t.getFieldList({excludeFieldArray:!0})))}):t.submitPromise?void 0:t.innerOnSubmit&&t.innerOnSubmit!==t.submit?t.innerOnSubmit():t.listenToSubmit((0,w.default)(X(r),N({},t.props,(0,d.bindActionCreators)({blur:i,change:o},a)),t.props.validExceptSubmit,t.asyncValidate,t.getFieldList({excludeFieldArray:!0})))},t.reset=function(){return t.props.reset()},t}A(i,n);var o=i.prototype;return o.initIfNeeded=function(e){var n=this.props.enableReinitialize;if(e){if((n||!e.initialized)&&!t(this.props.initialValues,e.initialValues)){var r=e.initialized&&this.props.keepDirtyOnReinitialize;this.props.initialize(e.initialValues,r,{keepValues:e.keepValues,lastInitialValues:this.props.initialValues,updateUnregisteredFields:e.updateUnregisteredFields})}}else!this.props.initialValues||this.props.initialized&&!n||this.props.initialize(this.props.initialValues,this.props.keepDirtyOnReinitialize,{keepValues:this.props.keepValues,updateUnregisteredFields:this.props.updateUnregisteredFields})},o.updateSyncErrorsIfNeeded=function(e,t,n){var r=this.props,i=r.error,o=r.updateSyncErrors,a=!(n&&Object.keys(n).length||i),u=!(e&&Object.keys(e).length||t);a&&u||S.default.deepEqual(n,e)&&S.default.deepEqual(i,t)||o(e,t)},o.clearSubmitPromiseIfNeeded=function(e){var t=this.props.submitting;this.submitPromise&&t&&!e.submitting&&delete this.submitPromise},o.submitIfNeeded=function(e){var t=this.props,n=t.clearSubmit;!t.triggerSubmit&&e.triggerSubmit&&(n(),this.submit())},o.shouldErrorFunction=function(){var e=this.props,t=e.shouldValidate,n=e.shouldError,r=t!==v.default,i=n!==y.default;return r&&!i?t:n},o.validateIfNeeded=function(t){var n=this.props,i=n.validate,o=n.values,a=this.shouldErrorFunction(),u=this.generateValidator();if(i||u){var l=void 0===t,s=Object.keys(this.getValidators());if(a({values:o,nextProps:t,props:this.props,initialRender:l,lastFieldValidatorKeys:this.lastFieldValidatorKeys,fieldValidatorKeys:s,structure:e})){var c=l||!t?this.props:t,f=(0,r.default)(i&&i(c.values,c)||{},u&&u(c.values,c)||{}),d=f._error,p=P(f,["_error"]);this.lastFieldValidatorKeys=s,this.updateSyncErrorsIfNeeded(p,d,c.syncErrors)}}else this.lastFieldValidatorKeys=[]},o.updateSyncWarningsIfNeeded=function(e,t,n){var r=this.props,i=r.warning,o=r.syncWarnings,a=r.updateSyncWarnings,u=!(o&&Object.keys(o).length||i),l=!(e&&Object.keys(e).length||t);u&&l||S.default.deepEqual(n,e)&&S.default.deepEqual(i,t)||a(e,t)},o.shouldWarnFunction=function(){var e=this.props,t=e.shouldValidate,n=e.shouldWarn,r=t!==v.default,i=n!==g.default;return r&&!i?t:n},o.warnIfNeeded=function(t){var n=this.props,i=n.warn,o=n.values,a=this.shouldWarnFunction(),u=this.generateWarner();if(i||u){var l=void 0===t,s=Object.keys(this.getWarners());if(a({values:o,nextProps:t,props:this.props,initialRender:l,lastFieldValidatorKeys:this.lastFieldWarnerKeys,fieldValidatorKeys:s,structure:e})){var c=l||!t?this.props:t,f=(0,r.default)(i?i(c.values,c):{},u?u(c.values,c):{}),d=f._warning,p=P(f,["_warning"]);this.lastFieldWarnerKeys=s,this.updateSyncWarningsIfNeeded(p,d,c.syncWarnings)}}},o.componentWillMount=function(){(0,k.default)()||(this.initIfNeeded(),this.validateIfNeeded(),this.warnIfNeeded()),(0,u.default)(this.props.shouldValidate,"shouldValidate() is deprecated and will be removed in v9.0.0. Use shouldWarn() or shouldError() instead.")},o.componentWillReceiveProps=function(e){this.initIfNeeded(e),this.validateIfNeeded(e),this.warnIfNeeded(e),this.clearSubmitPromiseIfNeeded(e),this.submitIfNeeded(e);var n=e.onChange,r=e.values,i=e.dispatch;n&&!t(r,this.props.values)&&n(r,i,e,this.props.values)},o.shouldComponentUpdate=function(e){var n=this;if(!this.props.pure)return!0;var r=j.immutableProps,i=void 0===r?[]:r;return!!(this.props.children||e.children||Object.keys(e).some(function(r){return~i.indexOf(r)?n.props[r]!==e[r]:!~K.indexOf(r)&&!t(n.props[r],e[r])}))},o.componentDidMount=function(){(0,k.default)()||(this.initIfNeeded(this.props),this.validateIfNeeded(),this.warnIfNeeded()),(0,u.default)(this.props.shouldValidate,"shouldValidate() is deprecated and will be removed in v9.0.0. Use shouldWarn() or shouldError() instead.")},o.componentWillUnmount=function(){var e=this.props,t=e.destroyOnUnmount,n=e.destroy;t&&!(0,k.default)()&&(this.destroyed=!0,n())},o.render=function(){var e,t,n=this,r=this.props,i=r.anyTouched,o=r.array,a=(r.arrayInsert,r.arrayMove,r.arrayPop,r.arrayPush,r.arrayRemove,r.arrayRemoveAll,r.arrayShift,r.arraySplice,r.arraySwap,r.arrayUnshift,r.asyncErrors,r.asyncValidate,r.asyncValidating),u=r.blur,l=r.change,s=r.clearSubmit,f=r.destroy,h=(r.destroyOnUnmount,r.forceUnregisterOnUnmount,r.dirty),v=r.dispatch,y=(r.enableReinitialize,r.error),g=(r.focus,r.form),b=(r.getFormState,r.immutableProps,r.initialize),_=r.initialized,x=r.initialValues,w=r.invalid,E=(r.keepDirtyOnReinitialize,r.keepValues,r.updateUnregisteredFields,r.pristine),S=r.propNamespace,T=(r.registeredFields,r.registerField,r.reset),k=r.resetSection,C=(r.setSubmitFailed,r.setSubmitSucceeded,r.shouldAsyncValidate,r.shouldValidate,r.shouldError,r.shouldWarn,r.startAsyncValidation,r.startSubmit,r.stopAsyncValidation,r.stopSubmit,r.submitting),M=r.submitFailed,A=r.submitSucceeded,R=r.touch,I=(r.touchOnBlur,r.touchOnChange,r.persistentSubmitErrors,r.syncErrors,r.syncWarnings,r.unregisterField,r.untouch),F=(r.updateSyncErrors,r.updateSyncWarnings,r.valid),j=(r.validExceptSubmit,r.values,r.warning),D=P(r,["anyTouched","array","arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","asyncErrors","asyncValidate","asyncValidating","blur","change","clearSubmit","destroy","destroyOnUnmount","forceUnregisterOnUnmount","dirty","dispatch","enableReinitialize","error","focus","form","getFormState","immutableProps","initialize","initialized","initialValues","invalid","keepDirtyOnReinitialize","keepValues","updateUnregisteredFields","pristine","propNamespace","registeredFields","registerField","reset","resetSection","setSubmitFailed","setSubmitSucceeded","shouldAsyncValidate","shouldValidate","shouldError","shouldWarn","startAsyncValidation","startSubmit","stopAsyncValidation","stopSubmit","submitting","submitFailed","submitSucceeded","touch","touchOnBlur","touchOnChange","persistentSubmitErrors","syncErrors","syncWarnings","unregisterField","untouch","updateSyncErrors","updateSyncWarnings","valid","validExceptSubmit","values","warning"]),U=N({array:o,anyTouched:i,asyncValidate:this.asyncValidate,asyncValidating:a},(0,d.bindActionCreators)({blur:u,change:l},v),{clearSubmit:s,destroy:f,dirty:h,dispatch:v,error:y,form:g,handleSubmit:this.submit,initialize:b,initialized:_,initialValues:x,invalid:w,pristine:E,reset:T,resetSection:k,submitting:C,submitFailed:M,submitSucceeded:A,touch:R,untouch:I,valid:F,warning:j}),z=N({},S?((e={})[S]=U,e):U,D);t=m,Boolean(t&&t.prototype&&"object"==typeof t.prototype.isReactComponent)&&(z.ref=this.wrapped);var L=N({},this.props,{getFormState:function(e){return p(n.props.getFormState(e),n.props.form)},asyncValidate:this.asyncValidate,getValues:this.getValues,sectionPrefix:void 0,register:this.register,unregister:this.unregister,registerInnerOnSubmit:function(e){return n.innerOnSubmit=e}});return(0,c.createElement)(O.ReduxFormContext.Provider,{value:L,children:(0,c.createElement)(m,z)})},i}(c.default.Component);E.displayName="Form("+(0,T.default)(m)+")",E.WrappedComponent=m,E.propTypes={destroyOnUnmount:s.default.bool,forceUnregisterOnUnmount:s.default.bool,form:s.default.string.isRequired,immutableProps:s.default.arrayOf(s.default.string),initialValues:s.default.oneOfType([s.default.array,s.default.object]),getFormState:s.default.func,onSubmitFail:s.default.func,onSubmitSuccess:s.default.func,propNamespace:s.default.string,validate:s.default.func,warn:s.default.func,touchOnBlur:s.default.bool,touchOnChange:s.default.bool,triggerSubmit:s.default.bool,persistentSubmitErrors:s.default.bool,registeredFields:s.default.any};var D=(0,f.connect)(function(e,r){var i=r.form,o=r.getFormState,a=r.initialValues,u=r.enableReinitialize,l=r.keepDirtyOnReinitialize,s=p(o(e)||n,i)||n,c=p(s,"initial"),f=!!c,d=u&&f&&!t(a,c),h=d&&!l,m=a||c||n;d||(m=c||n);var v=p(s,"values")||m;h&&(v=m);var y=h||t(m,v),g=p(s,"asyncErrors"),b=p(s,"syncErrors")||S.default.empty,_=p(s,"syncWarnings")||S.default.empty,x=p(s,"registeredFields"),w=F(i,o,!1)(e),E=F(i,o,!0)(e),T=!!p(s,"anyTouched"),k=!!p(s,"submitting"),O=!!p(s,"submitFailed"),C=!!p(s,"submitSucceeded"),M=p(s,"error"),A=p(s,"warning"),N=p(s,"triggerSubmit");return{anyTouched:T,asyncErrors:g,asyncValidating:p(s,"asyncValidating")||!1,dirty:!y,error:M,initialized:f,invalid:!w,pristine:y,registeredFields:x,submitting:k,submitFailed:O,submitSucceeded:C,syncErrors:b,syncWarnings:_,triggerSubmit:N,values:v,valid:w,validExceptSubmit:E,warning:A}},function(e,t){var n=function(e){return e.bind(null,t.form)},r=(0,i.default)(H,n),o=(0,i.default)($,n),a=n(Y),u=N({},(0,d.bindActionCreators)(r,e),o,{blur:function(e,n){return B(t.form,e,n,!!t.touchOnBlur)},change:function(e,n){return W(t.form,e,n,!!t.touchOnChange,!!t.persistentSubmitErrors)},array:{insert:(0,d.bindActionCreators)(o.arrayInsert,e),move:(0,d.bindActionCreators)(o.arrayMove,e),pop:(0,d.bindActionCreators)(o.arrayPop,e),push:(0,d.bindActionCreators)(o.arrayPush,e),remove:(0,d.bindActionCreators)(o.arrayRemove,e),removeAll:(0,d.bindActionCreators)(o.arrayRemoveAll,e),shift:(0,d.bindActionCreators)(o.arrayShift,e),splice:(0,d.bindActionCreators)(o.arraySplice,e),swap:(0,d.bindActionCreators)(o.arraySwap,e),unshift:(0,d.bindActionCreators)(o.arrayUnshift,e)},focus:a,dispatch:e});return function(){return u}},void 0,{forwardRef:!0}),U=(0,a.default)(D(E),m);U.defaultProps=j;var z=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).ref=c.default.createRef(),t}A(t,e);var r,i,o,a=t.prototype;return a.submit=function(){return this.ref.current&&this.ref.current.submit()},a.reset=function(){this.ref&&this.ref.current.reset()},a.render=function(){var e=this.props,t=e.initialValues,n=P(e,["initialValues"]);return(0,c.createElement)(U,N({},n,{ref:this.ref,initialValues:I(t)}))},r=t,(i=[{key:"valid",get:function(){return!(!this.ref.current||!this.ref.current.isValid())}},{key:"invalid",get:function(){return!this.valid}},{key:"pristine",get:function(){return!(!this.ref.current||!this.ref.current.isPristine())}},{key:"dirty",get:function(){return!this.pristine}},{key:"values",get:function(){return this.ref.current?this.ref.current.getValues():n}},{key:"fieldList",get:function(){return this.ref.current?this.ref.current.getFieldList():[]}},{key:"wrappedInstance",get:function(){return this.ref.current&&this.ref.current.wrapped.current}}])&&M(r.prototype,i),o&&M(r,o),t}(c.default.Component);(0,o.polyfill)(z);var L=(0,a.default)((0,O.withReduxForm)(z),m);return L.defaultProps=j,L}}};t.default=G},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(129)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n){return function(r){return!!t((n||function(e){return t(e,"form")})(r),e+".submitFailed")}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(131)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n){return function(r){return!!t((n||function(e){return t(e,"form")})(r),e+".submitSucceeded")}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(133)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n){return function(r){return!!t((n||function(e){return t(e,"form")})(r),e+".submitting")}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(135)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(42)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(61)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n,r,i){return!!(n||r||i)&&function(e,t){switch(t){case"Field":return[e,e+"._error"];case"FieldArray":return[e+"._error"];default:throw new Error("Unknown field type")}}(t(e,"name"),t(e,"type")).some(function(e){return t(n,e)||t(r,e)||t(i,e)})}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(42))&&r.__esModule?r:{default:r};var o=function(e){return function(t,n){var r=(0,i.default)(e)(t,n);return function(e){return!r(e)}}};t.default=o},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(140)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(61))&&r.__esModule?r:{default:r};var o=function(e){return function(t,n){var r=(0,i.default)(e)(t,n);return function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return!r.apply(void 0,[e].concat(n))}}};t.default=o},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(142)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n){return function(r){return!!t((n||function(e){return t(e,"form")})(r),e+".asyncValidating")}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(144)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn,n=e.empty;return function(e,r){return function(i){return t((r||function(e){return t(e,"form")})(i),e+".submitErrors")||n}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(146)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn,n=e.empty;return function(e,r){return function(i){return t((r||function(e){return t(e,"form")})(i),e+".syncWarnings")||n}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(148)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n){return function(r){return t((n||function(e){return t(e,"form")})(r),e+".asyncErrors")}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(150)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn,n=e.empty;return function(e,r){return function(i){return t((r||function(e){return t(e,"form")})(i),e+".fields")||n}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(152)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn,n=e.empty;return function(e,r){return function(i){return t((r||function(e){return t(e,"form")})(i),e+".syncErrors")||n}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(154)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n){return function(r){return t((n||function(e){return t(e,"form")})(r),e+".initial")}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(156)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n){return function(r){return t((n||function(e){return t(e,"form")})(r),e+".values")}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(158)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn,n=e.keys;return function(e){return function(r){return n((e||function(e){return t(e,"form")})(r))}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(160)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){var t=e.getIn;return function(e,n){return function(r){return t((n||function(e){return t(e,"form")})(r),e+".error")}}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(162)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){var r=n(71),i=n(69),o=n(29),a=n(7),u=n(19),l=n(28),s=n(25),c=n(26),f="[object Map]",d="[object Set]",p=Object.prototype.hasOwnProperty;e.exports=function(e){if(null==e)return!0;if(u(e)&&(a(e)||"string"==typeof e||"function"==typeof e.splice||l(e)||c(e)||o(e)))return!e.length;var t=i(e);if(t==f||t==d)return!e.size;if(s(e))return!r(e).length;for(var n in e)if(p.call(e,n))return!1;return!0}},function(e,t,n){var r=n(30);e.exports=function(e,t){return r(e,t)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=c(n(45)),i=c(n(165)),o=c(n(164)),a=c(n(0)),u=n(1),l=c(n(22)),s=n(12);function c(e){return e&&e.__esModule?e:{default:e}}function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var d=function(e){var t=e.getIn;return function(e){for(var n=arguments.length,c=new Array(n>1?n-1:0),d=1;d<n;d++)c[d-1]=arguments[d];return function(n){var d=function(s){var d,p;function h(e){var t;if(t=s.call(this,e)||this,!e._reduxForm)throw new Error("formValues() must be used inside a React tree decorated with reduxForm()");return t.updateComponent(e),t}p=s,(d=h).prototype=Object.create(p.prototype),d.prototype.constructor=d,d.__proto__=p;var m=h.prototype;return m.componentWillReceiveProps=function(t){"function"==typeof e&&this.updateComponent(t)},m.render=function(){var e=this.Component;return a.default.createElement(e,f({sectionPrefix:this.props._reduxForm.sectionPrefix},this.props))},m.updateComponent=function(t){var n,r,a="function"==typeof e?e(t):e;if(n="string"==typeof a?c.reduce(function(e,t){return e[t]=t,e},((r={})[a]=a,r)):a,(0,o.default)(n))throw new Error("formValues(): You must specify values to get as formValues(name1, name2, ...) or formValues({propName1: propPath1, ...}) or formValues((props) => name) or formValues((props) => ({propName1: propPath1, ...}))");(0,i.default)(n,this._valuesMap)||(this._valuesMap=n,this.setComponent())},m.setComponent=function(){var e=this;this.Component=(0,u.connect)(function(n,i){i.sectionPrefix;var o=(0,e.props._reduxForm.getValues)();return(0,r.default)(e._valuesMap,function(n){return t(o,(0,l.default)(e.props,n))})},function(){return{}})(function(e){e.sectionPrefix;var t=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["sectionPrefix"]);return a.default.createElement(n,t)})},h}(a.default.Component);return(0,s.withReduxForm)(d)}}};t.default=d},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(166)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(8)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=function(e){var t=e.getIn;return function(e,n){(0,r.default)(e,"Form value must be specified");var o=n||function(e){return t(e,"form")};return function(n){for(var a=arguments.length,u=new Array(a>1?a-1:0),l=1;l<a;l++)u[l-1]=arguments[l];return(0,r.default)(u.length,"No fields specified"),1===u.length?t(o(n),e+".values."+u[0]):u.reduce(function(r,a){var u=t(o(n),e+".values."+a);return void 0===u?r:i.default.setIn(r,a,u)},{})}}};t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(168)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}t.__esModule=!0,t.default=void 0;var i=function(e,t,n,i,o,a){var u=e.getIn,l=a.arrayInsert,s=a.arrayMove,c=a.arrayPop,f=a.arrayPush,d=a.arrayRemove,p=a.arrayRemoveAll,h=a.arrayShift,m=a.arraySplice,v=a.arraySwap,y=a.arrayUnshift,g=a.asyncError,b=a.dirty,_=a.length,x=a.pristine,w=a.submitError,E=(a.state,a.submitFailed),S=a.submitting,T=a.syncError,k=a.syncWarning,O=a.value,C=a.props,M=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(a,["arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","asyncError","dirty","length","pristine","submitError","state","submitFailed","submitting","syncError","syncWarning","value","props"]),A=T||g||w,N=k,P=i?t.replace(i+".",""):t,R=r({fields:{_isFieldArray:!0,forEach:function(e){return(O||[]).forEach(function(t,n){return e(P+"["+n+"]",n,R.fields)})},get:o,getAll:function(){return O},insert:l,length:_,map:function(e){return(O||[]).map(function(t,n){return e(P+"["+n+"]",n,R.fields)})},move:s,name:t,pop:function(){return c(),u(O,String(_-1))},push:f,reduce:function(e,t){return(O||[]).reduce(function(t,n,r){return e(t,P+"["+r+"]",r,R.fields)},t)},remove:d,removeAll:p,shift:function(){return h(),u(O,"0")},splice:m,swap:v,unshift:y},meta:{dirty:b,error:A,form:n,warning:N,invalid:!!A,pristine:x,submitting:S,submitFailed:E,valid:!A}},C,M);return R};t.default=i},function(e,t,n){var r=n(63);e.exports=function(e){return function(t){return r(t,e)}}},function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},function(e,t,n){var r=n(172),i=n(171),o=n(44),a=n(20);e.exports=function(e){return o(e)?r(a(e)):i(e)}},function(e,t,n){var r=n(62),i=n(29),o=n(7),a=n(47),u=n(46),l=n(20);e.exports=function(e,t,n){for(var s=-1,c=(t=r(t,e)).length,f=!1;++s<c;){var d=l(t[s]);if(!(f=null!=e&&n(e,d)))break;e=e[d]}return f||++s!=c?f:!!(c=null==e?0:e.length)&&u(c)&&a(d,c)&&(o(e)||i(e))}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t,n){var r=n(175),i=n(174);e.exports=function(e,t){return null!=e&&i(e,t,r)}},function(e,t,n){var r=n(63);e.exports=function(e,t,n){var i=null==e?void 0:r(e,t);return void 0===i?n:i}},function(e,t,n){var r=n(30),i=n(177),o=n(176),a=n(44),u=n(65),l=n(64),s=n(20),c=1,f=2;e.exports=function(e,t){return a(e)&&u(t)?l(s(e),t):function(n){var a=i(n,e);return void 0===a&&a===t?o(n,e):r(t,a,c|f)}}},function(e,t,n){var r=n(65),i=n(48);e.exports=function(e){for(var t=i(e),n=t.length;n--;){var o=t[n],a=e[o];t[n]=[o,a,r(a)]}return t}},function(e,t,n){var r=n(49),i=n(30),o=1,a=2;e.exports=function(e,t,n,u){var l=n.length,s=l,c=!u;if(null==e)return!s;for(e=Object(e);l--;){var f=n[l];if(c&&f[2]?f[1]!==e[f[0]]:!(f[0]in e))return!1}for(;++l<s;){var d=(f=n[l])[0],p=e[d],h=f[1];if(c&&f[2]){if(void 0===p&&!(d in e))return!1}else{var m=new r;if(u)var v=u(p,h,d,e,t,m);if(!(void 0===v?i(h,p,o|a,u,m):v))return!1}}return!0}},function(e,t,n){var r=n(180),i=n(179),o=n(64);e.exports=function(e){var t=i(e);return 1==t.length&&t[0][2]?o(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},function(e,t,n){var r=n(181),i=n(178),o=n(43),a=n(7),u=n(173);e.exports=function(e){return"function"==typeof e?e:null==e?o:"object"==typeof e?a(e)?i(e[0],e[1]):r(e):u(e)}},function(e,t){e.exports=function(e){return function(t,n,r){for(var i=-1,o=Object(t),a=r(t),u=a.length;u--;){var l=a[e?u:++i];if(!1===n(o[l],l,o))break}return t}}},function(e,t,n){var r=n(66),i=n(48);e.exports=function(e,t){return e&&r(e,t,i)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=f(n(45)),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=f(n(10)),a=n(1),u=n(4),l=f(n(170)),s=f(n(3)),c=f(n(15));function f(e){return e&&e.__esModule?e:{default:e}}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var p=["_reduxForm","value"],h=function(e){var t=e.deepEqual,n=e.getIn,f=e.size,h=e.equals,m=e.orderChanged,v=function(r){var o,a;function u(){for(var e,t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];return(e=r.call.apply(r,[this].concat(o))||this).ref=i.default.createRef(),e.getValue=function(t){return e.props.value&&n(e.props.value,String(t))},e}a=r,(o=u).prototype=Object.create(a.prototype),o.prototype.constructor=o,o.__proto__=a;var s,c,f,v=u.prototype;return v.shouldComponentUpdate=function(e){var n=this,r=this.props.value,i=e.value;if(r&&i){var o=h(i,r),a=m(r,i);if((r.length||r.size)!==(i.length||i.size)||o&&a||e.rerenderOnEveryChange&&r.some(function(e,n){return!t(e,i[n])}))return!0}var u=Object.keys(e),l=Object.keys(this.props);return!!(this.props.children||e.children||u.length!==l.length||u.some(function(r){return!~p.indexOf(r)&&!t(n.props[r],e[r])}))},v.getRenderedComponent=function(){return this.ref.current},v.render=function(){var t=this.props,n=t.component,r=t.forwardRef,o=t.name,a=t._reduxForm,u=(t.validate,t.warn,t.rerenderOnEveryChange,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(t,["component","forwardRef","name","_reduxForm","validate","warn","rerenderOnEveryChange"])),s=(0,l.default)(e,o,a.form,a.sectionPrefix,this.getValue,u);return r&&(s.ref=this.ref),(0,i.createElement)(n,s)},s=u,(c=[{key:"dirty",get:function(){return this.props.dirty}},{key:"pristine",get:function(){return this.props.pristine}},{key:"value",get:function(){return this.props.value}}])&&d(s.prototype,c),f&&d(s,f),u}(i.Component);return v.propTypes={component:c.default,props:o.default.object,rerenderOnEveryChange:o.default.bool},v.defaultProps={rerenderOnEveryChange:!1},(0,a.connect)(function(e,r){var i=r.name,o=r._reduxForm,a=o.initialValues,u=(0,o.getFormState)(e),l=n(u,"initial."+i)||a&&n(a,i),c=n(u,"values."+i),d=n(u,"submitting"),p=function(e,t){return s.default.getIn(e,t+"._error")}(n(u,"syncErrors"),i),h=function(e,t){return n(e,t+"._warning")}(n(u,"syncWarnings"),i),m=t(c,l);return{asyncError:n(u,"asyncErrors."+i+"._error"),dirty:!m,pristine:m,state:n(u,"fields."+i),submitError:n(u,"submitErrors."+i+"._error"),submitFailed:n(u,"submitFailed"),submitting:d,syncError:p,syncWarning:h,value:c,length:f(c)}},function(e,t){var n=t.name,i=t._reduxForm,o=i.arrayInsert,a=i.arrayMove,l=i.arrayPop,s=i.arrayPush,c=i.arrayRemove,f=i.arrayRemoveAll,d=i.arrayShift,p=i.arraySplice,h=i.arraySwap,m=i.arrayUnshift;return(0,r.default)({arrayInsert:o,arrayMove:a,arrayPop:l,arrayPush:s,arrayRemove:c,arrayRemoveAll:f,arrayShift:d,arraySplice:p,arraySwap:h,arrayUnshift:m},function(t){return(0,u.bindActionCreators)(t.bind(null,n),e)})},void 0,{forwardRef:!0})(v)};t.default=h},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=n(23),o=f(n(10)),a=f(n(8)),u=f(n(185)),l=f(n(22)),s=n(12),c=f(n(15));function f(e){return e&&e.__esModule?e:{default:e}}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(e,t){return e&&function(){for(var n,r=(n=e,Array.isArray(n)?n:[n]),i=0;i<r.length;i++){var o,a=r[i].apply(r,arguments);if(a)return(o={})[t]=a,o}}},m=function(e){var t=(0,u.default)(e),n=function(e){var n,i;function o(t){var n;if((n=e.call(this,t)||this).ref=r.default.createRef(),!t._reduxForm)throw new Error("FieldArray must be inside a component decorated with reduxForm()");return n}i=e,(n=o).prototype=Object.create(i.prototype),n.prototype.constructor=n,n.__proto__=i;var u,s,c,f=o.prototype;return f.componentDidMount=function(){var e=this;this.props._reduxForm.register(this.name,"FieldArray",function(){return h(e.props.validate,"_error")},function(){return h(e.props.warn,"_warning")})},f.componentWillReceiveProps=function(e){var t=(0,l.default)(this.props,this.props.name),n=(0,l.default)(e,e.name);t!==n&&(this.props._reduxForm.unregister(t),this.props._reduxForm.register(n,"FieldArray"))},f.componentWillUnmount=function(){this.props._reduxForm.unregister(this.name)},f.getRenderedComponent=function(){return(0,a.default)(this.props.forwardRef,"If you want to access getRenderedComponent(), you must specify a forwardRef prop to FieldArray"),this.ref&&this.ref.current.getRenderedComponent()},f.render=function(){return(0,r.createElement)(t,d({},this.props,{name:this.name,ref:this.ref}))},u=o,(s=[{key:"name",get:function(){return(0,l.default)(this.props,this.props.name)}},{key:"dirty",get:function(){return!this.ref||this.ref.current.dirty}},{key:"pristine",get:function(){return!(!this.ref||!this.ref.current.pristine)}},{key:"value",get:function(){return this.ref?this.ref.current.value:void 0}}])&&p(u.prototype,s),c&&p(u,c),o}(r.Component);return n.propTypes={name:o.default.string.isRequired,component:c.default,props:o.default.object,validate:o.default.oneOfType([o.default.func,o.default.arrayOf(o.default.func)]),warn:o.default.oneOfType([o.default.func,o.default.arrayOf(o.default.func)]),forwardRef:o.default.bool,_reduxForm:o.default.object},(0,i.polyfill)(n),(0,s.withReduxForm)(n)};t.default=m},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(186)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=c(n(0)),i=c(n(10)),o=n(1),a=c(n(84)),u=c(n(3)),l=c(n(83)),s=c(n(15));function c(e){return e&&e.__esModule?e:{default:e}}function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var p=["_reduxForm"],h=function(e){var t=e.deepEqual,n=e.getIn,c=e.size,h=function(n){var i,o;function s(e){var t;return(t=n.call(this,e)||this).onChangeFns={},t.onFocusFns={},t.onBlurFns={},t.ref=r.default.createRef(),t.prepareEventHandlers=function(e){return e.names.forEach(function(e){t.onChangeFns[e]=function(n){return t.handleChange(e,n)},t.onFocusFns[e]=function(){return t.handleFocus(e)},t.onBlurFns[e]=function(n){return t.handleBlur(e,n)}})},t.handleChange=function(e,n){var r=t.props,i=r.dispatch,o=r.parse,a=r._reduxForm,u=(0,l.default)(n,{name:e,parse:o});i(a.change(e,u)),a.asyncValidate&&a.asyncValidate(e,u,"change")},t.handleFocus=function(e){var n=t.props;(0,n.dispatch)(n._reduxForm.focus(e))},t.handleBlur=function(e,n){var r=t.props,i=r.dispatch,o=r.parse,a=r._reduxForm,u=(0,l.default)(n,{name:e,parse:o});i(a.blur(e,u)),a.asyncValidate&&a.asyncValidate(e,u,"blur")},t.prepareEventHandlers(e),t}o=n,(i=s).prototype=Object.create(o.prototype),i.prototype.constructor=i,i.__proto__=o;var h=s.prototype;return h.componentWillReceiveProps=function(e){var t=this;this.props.names===e.names||c(this.props.names)===c(e.names)&&!e.names.some(function(e){return!t.props._fields[e]})||this.prepareEventHandlers(e)},h.shouldComponentUpdate=function(e){var n=this,r=Object.keys(e),i=Object.keys(this.props);return!!(this.props.children||e.children||r.length!==i.length||r.some(function(r){return!~p.indexOf(r)&&!t(n.props[r],e[r])}))},h.isDirty=function(){var e=this.props._fields;return Object.keys(e).some(function(t){return e[t].dirty})},h.getValues=function(){var e=this.props._fields;return Object.keys(e).reduce(function(t,n){return u.default.setIn(t,n,e[n].value)},{})},h.getRenderedComponent=function(){return this.ref.current},h.render=function(){var t=this,n=this.props,i=n.component,o=n.forwardRef,l=n._fields,s=n._reduxForm,c=d(n,["component","forwardRef","_fields","_reduxForm"]),p=s.sectionPrefix,h=s.form,m=Object.keys(l).reduce(function(n,r){var i=l[r],o=(0,a.default)(e,r,f({},i,c,{form:h,onBlur:t.onBlurFns[r],onChange:t.onChangeFns[r],onFocus:t.onFocusFns[r]})),s=o.custom,m=d(o,["custom"]);n.custom=s;var v=p?r.replace(p+".",""):r;return u.default.setIn(n,v,m)},{}),v=m.custom,y=d(m,["custom"]);return o&&(y.ref=this.ref),r.default.createElement(i,f({},y,v))},s}(r.default.Component);return h.propTypes={component:s.default,_fields:i.default.object.isRequired,props:i.default.object},(0,o.connect)(function(e,t){var r=t.names,i=t._reduxForm,o=i.initialValues,a=(0,i.getFormState)(e);return{_fields:r.reduce(function(e,r){var i=n(a,"initial."+r),l=void 0!==i?i:o&&n(o,r),s=n(a,"values."+r),c=function(e,t){return u.default.getIn(e,t+"._error")||u.default.getIn(e,t)}(n(a,"syncErrors"),r),f=function(e,t){var r=n(e,t);return r&&r._warning?r._warning:r}(n(a,"syncWarnings"),r),d=n(a,"submitting"),p=s===l;return e[r]={asyncError:n(a,"asyncErrors."+r),asyncValidating:n(a,"asyncValidating")===r,dirty:!p,initial:l,pristine:p,state:n(a,"fields."+r),submitError:n(a,"submitErrors."+r),submitFailed:n(a,"submitFailed"),submitting:d,syncError:c,syncWarning:f,value:s,_value:t.value},e},{})}},void 0,void 0,{forwardRef:!0})(h)};t.default=h},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=n(0),i=n(23),o=p(n(10)),a=p(n(8)),u=p(n(188)),l=p(n(68)),s=p(n(3)),c=p(n(22)),f=n(12),d=p(n(15));function p(e){return e&&e.__esModule?e:{default:e}}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=function(e){return e?Array.isArray(e)||e._isFieldArray?void 0:new Error('Invalid prop "names" supplied to <Fields/>. Must be either an array of strings or the fields array generated by FieldArray.'):new Error('No "names" prop was specified <Fields/>')},y=function(e){var t=(0,u.default)(e),n=function(e){var n,i;function o(t){var n;if(n=e.call(this,t)||this,!t._reduxForm)throw new Error("Fields must be inside a component decorated with reduxForm()");var r=v(t.names);if(r)throw r;return n}i=e,(n=o).prototype=Object.create(i.prototype),n.prototype.constructor=n,n.__proto__=i;var u,f,d,p=o.prototype;return p.shouldComponentUpdate=function(e){return(0,l.default)(this,e)},p.componentDidMount=function(){var e=this.props._reduxForm.register;this.names.forEach(function(t){return e(t,"Field")})},p.componentWillReceiveProps=function(e){if(!s.default.deepEqual(this.props.names,e.names)){var t=this.props,n=t._reduxForm,r=n.register,i=n.unregister;this.props.names.forEach(function(e){return i((0,c.default)(t,e))}),e.names.forEach(function(e){return r((0,c.default)(t,e),"Field")})}},p.componentWillUnmount=function(){var e=this.props,t=e._reduxForm.unregister;this.props.names.forEach(function(n){return t((0,c.default)(e,n))})},p.getRenderedComponent=function(){return(0,a.default)(this.props.forwardRef,"If you want to access getRenderedComponent(), you must specify a forwardRef prop to Fields"),this.refs.connected.getRenderedComponent()},p.render=function(){var e=this.props;return(0,r.createElement)(t,h({},this.props,{names:this.props.names.map(function(t){return(0,c.default)(e,t)}),ref:"connected"}))},u=o,(f=[{key:"names",get:function(){var e=this.props;return this.props.names.map(function(t){return(0,c.default)(e,t)})}},{key:"dirty",get:function(){return this.refs.connected.isDirty()}},{key:"pristine",get:function(){return!this.dirty}},{key:"values",get:function(){return this.refs.connected&&this.refs.connected.getValues()}}])&&m(u.prototype,f),d&&m(u,d),o}(r.Component);return n.propTypes={names:function(e,t){return v(e[t])},component:d.default,format:o.default.func,parse:o.default.func,props:o.default.object,forwardRef:o.default.bool,_reduxForm:o.default.object},(0,i.polyfill)(n),(0,f.withReduxForm)(n)};t.default=y},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(189)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){return e?Array.isArray(e)?e.map(function(e){return e.name}):Object.keys(e):[]};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(38))&&r.__esModule?r:{default:r};function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var a=function(e,t){return function e(t,n){if(void 0===t||null===t||void 0===n||null===n)return t;for(var r=arguments.length,i=new Array(r>2?r-2:0),a=2;a<r;a++)i[a-2]=arguments[a];if(i.length){if(Array.isArray(t)){if(isNaN(n))throw new Error('Must access array elements with a number, not "'+String(n)+'".');var u=Number(n);if(u<t.length){var l=e.apply(void 0,[t&&t[u]].concat(i));if(l!==t[u]){var s=t.concat();return s[u]=l,s}}return t}if(n in t){var c,f=e.apply(void 0,[t&&t[n]].concat(i));return t[n]===f?t:o({},t,((c={})[n]=f,c))}return t}if(Array.isArray(t)){if(isNaN(n))throw new Error('Cannot delete non-numerical index from an array. Given: "'+String(n));var d=Number(n);if(d<t.length){var p=t.concat();return p.splice(d,1),p}return t}if(n in t){var h=o({},t);return delete h[n],h}return t}.apply(void 0,[e].concat((0,i.default)(t)))};t.default=a},function(e,t,n){var r=n(13)(n(9),"WeakMap");e.exports=r},function(e,t,n){var r=n(13)(n(9),"Set");e.exports=r},function(e,t,n){var r=n(13)(n(9),"Promise");e.exports=r},function(e,t,n){var r=n(13)(n(9),"DataView");e.exports=r},function(e,t,n){var r=n(70)(Object.keys,Object);e.exports=r},function(e,t,n){(function(e){var r=n(79),i="object"==typeof t&&t&&!t.nodeType&&t,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=o&&o.exports===i&&r.process,u=function(){try{var e=o&&o.require&&o.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=u}).call(this,n(27)(e))},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){var r=n(18),i=n(46),o=n(14),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&i(e.length)&&!!a[r(e)]}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(18),i=n(14),o="[object Arguments]";e.exports=function(e){return i(e)&&r(e)==o}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t){e.exports=function(){return[]}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}},function(e,t,n){var r=n(205),i=n(204),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,u=a?function(e){return null==e?[]:(e=Object(e),r(a(e),function(t){return o.call(e,t)}))}:i;e.exports=u},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}},function(e,t,n){var r=n(207),i=n(7);e.exports=function(e,t,n){var o=t(e);return i(e)?o:r(o,n(e))}},function(e,t,n){var r=n(208),i=n(206),o=n(48);e.exports=function(e){return r(e,o,i)}},function(e,t,n){var r=n(209),i=1,o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,a,u,l){var s=n&i,c=r(e),f=c.length;if(f!=r(t).length&&!s)return!1;for(var d=f;d--;){var p=c[d];if(!(s?p in t:o.call(t,p)))return!1}var h=l.get(e);if(h&&l.get(t))return h==t;var m=!0;l.set(e,t),l.set(t,e);for(var v=s;++d<f;){var y=e[p=c[d]],g=t[p];if(a)var b=s?a(g,y,p,t,e,l):a(y,g,p,e,t,l);if(!(void 0===b?y===g||u(y,g,n,a,l):b)){m=!1;break}v||(v="constructor"==p)}if(m&&!v){var _=e.constructor,x=t.constructor;_!=x&&"constructor"in e&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof x&&x instanceof x)&&(m=!1)}return l.delete(e),l.delete(t),m}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}},function(e,t,n){var r=n(36),i=n(73),o=n(21),a=n(74),u=n(212),l=n(211),s=1,c=2,f="[object Boolean]",d="[object Date]",p="[object Error]",h="[object Map]",m="[object Number]",v="[object RegExp]",y="[object Set]",g="[object String]",b="[object Symbol]",_="[object ArrayBuffer]",x="[object DataView]",w=r?r.prototype:void 0,E=w?w.valueOf:void 0;e.exports=function(e,t,n,r,w,S,T){switch(n){case x:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case _:return!(e.byteLength!=t.byteLength||!S(new i(e),new i(t)));case f:case d:case m:return o(+e,+t);case p:return e.name==t.name&&e.message==t.message;case v:case g:return e==t+"";case h:var k=u;case y:var O=r&s;if(k||(k=l),e.size!=t.size&&!O)return!1;var C=T.get(e);if(C)return C==t;r|=c,T.set(e,t);var M=a(k(e),k(t),r,w,S,T);return T.delete(e),M;case b:if(E)return E.call(e)==E.call(t)}return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){var n="__lodash_hash_undefined__";e.exports=function(e){return this.__data__.set(e,n),this}},function(e,t,n){var r=n(51),i=n(217),o=n(216);function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,e.exports=a},function(e,t,n){var r=n(33),i=n(50),o=n(51),a=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var u=n.__data__;if(!i||u.length<a-1)return u.push([e,t]),this.size=++n.size,this;n=this.__data__=new o(u)}return n.set(e,t),this.size=n.size,this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t,n){var r=n(33);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t,n){var r=n(49),i=n(74),o=n(213),a=n(210),u=n(69),l=n(7),s=n(28),c=n(26),f=1,d="[object Arguments]",p="[object Array]",h="[object Object]",m=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,v,y,g){var b=l(e),_=l(t),x=b?p:u(e),w=_?p:u(t),E=(x=x==d?h:x)==h,S=(w=w==d?h:w)==h,T=x==w;if(T&&s(e)){if(!s(t))return!1;b=!0,E=!1}if(T&&!E)return g||(g=new r),b||c(e)?i(e,t,n,v,y,g):o(e,t,x,n,v,y,g);if(!(n&f)){var k=E&&m.call(e,"__wrapped__"),O=S&&m.call(t,"__wrapped__");if(k||O){var C=k?e.value():e,M=O?t.value():t;return g||(g=new r),y(C,M,n,v,g)}}return!!T&&(g||(g=new r),a(e,t,n,v,y,g))}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(75)),i=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}var a=function(e,t){return e===t||(e||t?(!e||!t||e._error===t._error)&&((!e||!t||e._warning===t._warning)&&(!i.default.isValidElement(e)&&!i.default.isValidElement(t)&&void 0)):(null===e||void 0===e||""===e)===(null===t||void 0===t||""===t))},u=function(e,t){return(0,r.default)(e,t,a)};t.default=u},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(38))&&r.__esModule?r:{default:r};function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var a=function(e,t,n){return function e(t,n,r,i){var a;if(i>=r.length)return n;var u=r[i],l=e(t&&(Array.isArray(t)?t[Number(u)]:t[u]),n,r,i+1);if(!t){var s;if(isNaN(u))return(s={})[u]=l,s;var c=[];return c[parseInt(u,10)]=l,c}if(Array.isArray(t)){var f=[].concat(t);return f[parseInt(u,10)]=l,f}return o({},t,((a={})[u]=l,a))}(e,n,(0,i.default)(t),0)};t.default=a},function(e,t,n){var r=n(36),i=n(81),o=n(7),a=n(37),u=1/0,l=r?r.prototype:void 0,s=l?l.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(o(t))return i(t,e)+"";if(a(t))return s?s.call(t):"";var n=t+"";return"0"==n&&1/t==-u?"-0":n}},function(e,t,n){var r=n(31);e.exports=function(e,t){var n=r(this,e),i=n.size;return n.set(e,t),this.size+=n.size==i?0:1,this}},function(e,t,n){var r=n(31);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(31);e.exports=function(e){return r(this,e).get(e)}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(31);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t,n){var r=n(32);e.exports=function(e,t){var n=this.__data__,i=r(n,e);return i<0?(++this.size,n.push([e,t])):n[i][1]=t,this}},function(e,t,n){var r=n(32);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(32);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(32),i=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():i.call(t,n,1),--this.size,0))}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(35),i="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?i:t,this}},function(e,t,n){var r=n(35),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:i.call(t,e)}},function(e,t,n){var r=n(35),i="__lodash_hash_undefined__",o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===i?void 0:n}return o.call(t,e)?t[e]:void 0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(9)["__core-js_shared__"];e.exports=r},function(e,t,n){var r,i=n(243),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!o&&o in e}},function(e,t,n){var r=n(34),i=n(244),o=n(11),a=n(77),u=/^\[object .+?Constructor\]$/,l=Function.prototype,s=Object.prototype,c=l.toString,f=s.hasOwnProperty,d=RegExp("^"+c.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(r(e)?d:u).test(a(e))}},function(e,t,n){var r=n(35);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t,n){var r=n(246),i=n(241),o=n(240),a=n(239),u=n(238);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(247),i=n(33),o=n(50);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(e,t,n){var r=n(51),i="Expected a function";function o(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(i);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(o.Cache||r),n}o.Cache=r,e.exports=o},function(e,t,n){var r=n(249),i=500;e.exports=function(e){var t=r(e,function(e){return n.size===i&&n.clear(),e}),n=t.cache;return t}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(36),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var i=a.call(e);return r&&(t?e[u]=n:delete e[u]),i}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(38))&&r.__esModule?r:{default:r};var o=function(e,t){if(!e)return e;var n=(0,i.default)(t),r=n.length;if(r){for(var o=e,a=0;a<r&&o;++a)o=o[n[a]];return o}};t.default=o},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e,t,n,r){if(t<(e=e||[]).length){if(void 0===r&&!n){var i=e.concat();return i.splice(t,0,!0),i[t]=void 0,i}if(null!=r){var o=e.concat();return o.splice(t,n,r),o}var a=e.concat();return a.splice(t,n),a}if(n)return e;var u=e.concat();return u[t]=r,u};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.dataKey=void 0;t.dataKey="text"},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=(r=n(52))&&r.__esModule?r:{default:r};var o=function(e,t){if((0,i.default)(e)){if(!t&&e.nativeEvent&&void 0!==e.nativeEvent.text)return e.nativeEvent.text;if(t&&void 0!==e.nativeEvent)return e.nativeEvent.text;var n=e,r=n.target,o=r.type,a=r.value,u=r.checked,l=r.files,s=n.dataTransfer;return"checkbox"===o?!!u:"file"===o?l||s&&s.files:"select-multiple"===o?function(e){var t=[];if(e)for(var n=0;n<e.length;n++){var r=e[n];r.selected&&t.push(r.value)}return t}(e.target.options):a}return e};t.default=o},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=p(n(10)),o=n(1),a=p(n(84)),u=p(n(83)),l=n(255),s=p(n(3)),c=p(n(82)),f=p(n(15)),d=p(n(52));function p(e){return e&&e.__esModule?e:{default:e}}function h(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var v=["_reduxForm"],y=function(e){return e&&"object"==typeof e},g=function(e){return e&&"function"==typeof e},b=function(e){y(e)&&g(e.preventDefault)&&e.preventDefault()},_=function(e,t){if(y(e)&&y(e.dataTransfer)&&g(e.dataTransfer.getData))return e.dataTransfer.getData(t)},x=function(e,t,n){y(e)&&y(e.dataTransfer)&&g(e.dataTransfer.setData)&&e.dataTransfer.setData(t,n)},w=function(e){var t=e.deepEqual,n=e.getIn,p=function(n){var i,o;function s(){for(var e,t=arguments.length,i=new Array(t),o=0;o<t;o++)i[o]=arguments[o];return(e=n.call.apply(n,[this].concat(i))||this).ref=r.default.createRef(),e.isPristine=function(){return e.props.pristine},e.getValue=function(){return e.props.value},e.handleChange=function(t){var n=e.props,r=n.name,i=n.dispatch,o=n.parse,a=n.normalize,l=n.onChange,s=n._reduxForm,f=n.value,p=(0,u.default)(t,{name:r,parse:o,normalize:a}),h=!1;l&&(!c.default&&(0,d.default)(t)?l(m({},t,{preventDefault:function(){return h=!0,b(t)}}),p,f,r):l(t,p,f,r)),h||(i(s.change(r,p)),s.asyncValidate&&s.asyncValidate(r,p,"change"))},e.handleFocus=function(t){var n=e.props,r=n.name,i=n.dispatch,o=n.onFocus,a=n._reduxForm,u=!1;o&&(c.default?o(t,r):o(m({},t,{preventDefault:function(){return u=!0,b(t)}}),r)),u||i(a.focus(r))},e.handleBlur=function(t){var n=e.props,r=n.name,i=n.dispatch,o=n.parse,a=n.normalize,l=n.onBlur,s=n._reduxForm,f=n._value,d=n.value,p=(0,u.default)(t,{name:r,parse:o,normalize:a});p===f&&void 0!==f&&(p=d);var h=!1;l&&(c.default?l(t,p,d,r):l(m({},t,{preventDefault:function(){return h=!0,b(t)}}),p,d,r)),h||(i(s.blur(r,p)),s.asyncValidate&&s.asyncValidate(r,p,"blur"))},e.handleDragStart=function(t){var n=e.props,r=n.name,i=n.onDragStart,o=n.value;x(t,l.dataKey,null==o?"":o),i&&i(t,r)},e.handleDrop=function(t){var n=e.props,r=n.name,i=n.dispatch,o=n.onDrop,a=n._reduxForm,u=n.value,s=_(t,l.dataKey),c=!1;o&&o(m({},t,{preventDefault:function(){return c=!0,b(t)}}),s,u,r),c||(i(a.change(r,s)),b(t))},e}o=n,(i=s).prototype=Object.create(o.prototype),i.prototype.constructor=i,i.__proto__=o;var f=s.prototype;return f.shouldComponentUpdate=function(e){var n=this,r=Object.keys(e),i=Object.keys(this.props);return!!(this.props.children||e.children||r.length!==i.length||r.some(function(r){return~(e.immutableProps||[]).indexOf(r)?n.props[r]!==e[r]:!~v.indexOf(r)&&!t(n.props[r],e[r])}))},f.getRenderedComponent=function(){return this.ref.current},f.render=function(){var t=this.props,n=t.component,i=t.forwardRef,o=t.name,u=t._reduxForm,l=(t.normalize,t.onBlur,t.onChange,t.onFocus,t.onDragStart,t.onDrop,t.immutableProps,h(t,["component","forwardRef","name","_reduxForm","normalize","onBlur","onChange","onFocus","onDragStart","onDrop","immutableProps"])),s=(0,a.default)(e,o,m({},l,{form:u.form,onBlur:this.handleBlur,onChange:this.handleChange,onDrop:this.handleDrop,onDragStart:this.handleDragStart,onFocus:this.handleFocus})),c=s.custom,f=h(s,["custom"]);if(i&&(c.ref=this.ref),"string"==typeof n){var d=f.input;return f.meta,(0,r.createElement)(n,m({},d,c))}return(0,r.createElement)(n,m({},f,c))},s}(r.Component);return p.propTypes={component:f.default,props:i.default.object},(0,o.connect)(function(e,r){var i=r.name,o=r._reduxForm,a=o.initialValues,u=(0,o.getFormState)(e),l=n(u,"initial."+i),c=void 0!==l?l:a&&n(a,i),f=n(u,"values."+i),d=n(u,"submitting"),p=function(e,t){var n=s.default.getIn(e,t);return n&&n._error?n._error:n}(n(u,"syncErrors"),i),h=function(e,t){var r=n(e,t);return r&&r._warning?r._warning:r}(n(u,"syncWarnings"),i),m=t(f,c);return{asyncError:n(u,"asyncErrors."+i),asyncValidating:n(u,"asyncValidating")===i,dirty:!m,pristine:m,state:n(u,"fields."+i),submitError:n(u,"submitErrors."+i),submitFailed:n(u,"submitFailed"),submitting:d,syncError:p,syncWarning:h,initial:c,value:f,_value:r.value}},void 0,void 0,{forwardRef:!0})(p)};t.default=w},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=n(23),o=p(n(10)),a=p(n(8)),u=p(n(257)),l=p(n(68)),s=p(n(22)),c=p(n(3)),f=n(12),d=p(n(15));function p(e){return e&&e.__esModule?e:{default:e}}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=function(e){var t=(0,u.default)(e),n=e.setIn,p=function(e){var i,o;function u(t){var i;if((i=e.call(this,t)||this).ref=r.default.createRef(),i.ref=r.default.createRef(),i.normalize=function(e,t){var r=i.props.normalize;if(!r)return t;var o=i.props._reduxForm.getValues();return r(t,i.value,n(o,e,t),o,e)},!t._reduxForm)throw new Error("Field must be inside a component decorated with reduxForm()");return i}o=e,(i=u).prototype=Object.create(o.prototype),i.prototype.constructor=i,i.__proto__=o;var f,d,p,v=u.prototype;return v.componentDidMount=function(){var e=this;this.props._reduxForm.register(this.name,"Field",function(){return e.props.validate},function(){return e.props.warn})},v.shouldComponentUpdate=function(e,t){return(0,l.default)(this,e,t)},v.componentWillReceiveProps=function(e){var t=(0,s.default)(this.props,this.props.name),n=(0,s.default)(e,e.name);t===n&&c.default.deepEqual(this.props.validate,e.validate)&&c.default.deepEqual(this.props.warn,e.warn)||(this.props._reduxForm.unregister(t),this.props._reduxForm.register(n,"Field",function(){return e.validate},function(){return e.warn}))},v.componentWillUnmount=function(){this.props._reduxForm.unregister(this.name)},v.getRenderedComponent=function(){return(0,a.default)(this.props.forwardRef,"If you want to access getRenderedComponent(), you must specify a forwardRef prop to Field"),this.ref.current?this.ref.current.getRenderedComponent():void 0},v.render=function(){return(0,r.createElement)(t,h({},this.props,{name:this.name,normalize:this.normalize,ref:this.ref}))},f=u,(d=[{key:"name",get:function(){return(0,s.default)(this.props,this.props.name)}},{key:"dirty",get:function(){return!this.pristine}},{key:"pristine",get:function(){return!(!this.ref.current||!this.ref.current.isPristine())}},{key:"value",get:function(){return this.ref.current&&this.ref.current.getValue()}}])&&m(f.prototype,d),p&&m(f,p),u}(r.Component);return p.propTypes={name:o.default.string.isRequired,component:d.default,format:o.default.func,normalize:o.default.func,onBlur:o.default.func,onChange:o.default.func,onFocus:o.default.func,onDragStart:o.default.func,onDrop:o.default.func,parse:o.default.func,props:o.default.object,validate:o.default.oneOfType([o.default.func,o.default.arrayOf(o.default.func)]),warn:o.default.oneOfType([o.default.func,o.default.arrayOf(o.default.func)]),forwardRef:o.default.bool,immutableProps:o.default.arrayOf(o.default.string),_reduxForm:o.default.object},(0,i.polyfill)(p),(0,f.withReduxForm)(p)};t.default=v},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=o(n(258)),i=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(i.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.fieldArrayPropTypes=t.fieldPropTypes=t.fieldArrayFieldsPropTypes=t.fieldArrayMetaPropTypes=t.fieldMetaPropTypes=t.fieldInputPropTypes=t.formPropTypes=void 0;var r,i=(r=n(10))&&r.__esModule?r:{default:r};var o=i.default.any,a=i.default.bool,u=i.default.func,l=i.default.shape,s=i.default.string,c=i.default.oneOfType,f=i.default.object,d=i.default.number,p={anyTouched:a.isRequired,asyncValidating:c([a,s]).isRequired,dirty:a.isRequired,error:o,form:s.isRequired,invalid:a.isRequired,initialized:a.isRequired,initialValues:f,pristine:a.isRequired,pure:a.isRequired,submitting:a.isRequired,submitFailed:a.isRequired,submitSucceeded:a.isRequired,valid:a.isRequired,warning:o,array:l({insert:u.isRequired,move:u.isRequired,pop:u.isRequired,push:u.isRequired,remove:u.isRequired,removeAll:u.isRequired,shift:u.isRequired,splice:u.isRequired,swap:u.isRequired,unshift:u.isRequired}),asyncValidate:u.isRequired,autofill:u.isRequired,blur:u.isRequired,change:u.isRequired,clearAsyncError:u.isRequired,clearFields:u.isRequired,clearSubmitErrors:u.isRequired,destroy:u.isRequired,dispatch:u.isRequired,handleSubmit:u.isRequired,initialize:u.isRequired,reset:u.isRequired,resetSection:u.isRequired,touch:u.isRequired,submit:u.isRequired,untouch:u.isRequired,triggerSubmit:a,clearSubmit:u.isRequired};t.formPropTypes=p;var h={checked:a,name:s.isRequired,onBlur:u.isRequired,onChange:u.isRequired,onDragStart:u.isRequired,onDrop:u.isRequired,onFocus:u.isRequired,value:o};t.fieldInputPropTypes=h;var m={active:a.isRequired,asyncValidating:a.isRequired,autofilled:a.isRequired,dirty:a.isRequired,dispatch:u.isRequired,error:o,form:s.isRequired,invalid:a.isRequired,pristine:a.isRequired,submitting:a.isRequired,submitFailed:a.isRequired,touched:a.isRequired,valid:a.isRequired,visited:a.isRequired,warning:s};t.fieldMetaPropTypes=m;var v={dirty:a.isRequired,error:o,form:s.isRequired,invalid:a.isRequired,pristine:a.isRequired,submitFailed:a,submitting:a,valid:a.isRequired,warning:s};t.fieldArrayMetaPropTypes=v;var y={name:s.isRequired,forEach:u.isRequired,get:u.isRequired,getAll:u.isRequired,insert:u.isRequired,length:d.isRequired,map:u.isRequired,move:u.isRequired,pop:u.isRequired,push:u.isRequired,reduce:u.isRequired,remove:u.isRequired,removeAll:u.isRequired,shift:u.isRequired,swap:u.isRequired,unshift:u.isRequired};t.fieldArrayFieldsPropTypes=y;var g={input:l(h).isRequired,meta:l(m).isRequired};t.fieldPropTypes=g;var b={fields:l(y).isRequired,meta:l(v).isRequired};t.fieldArrayPropTypes=b;var _=p;t.default=_},function(e,t,n){"use strict";function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e){function t(){e.apply(this,arguments)}return t.prototype=Object.create(e.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e,t}n.r(t);var o=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return Object.defineProperty(n,"message",{configurable:!0,enumerable:!1,value:e,writable:!0}),Object.defineProperty(n,"name",{configurable:!0,enumerable:!1,value:n.constructor.name,writable:!0}),Error.hasOwnProperty("captureStackTrace")?(Error.captureStackTrace(n,n.constructor),r(n)):(Object.defineProperty(n,"stack",{configurable:!0,enumerable:!1,value:new Error(e).stack,writable:!0}),n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i(Error)),t}();t.default=o},function(e,t,n){"use strict";var r;t.__esModule=!0,t.default=void 0;var i=function(e){var t,n;function r(t){var n;return(n=e.call(this,"Submit Validation Failed")||this).errors=t,n}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r}(((r=n(261))&&r.__esModule?r:{default:r}).default);t.default=i},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=l(n(10)),o=l(n(22)),a=n(12),u=l(n(15));function l(e){return e&&e.__esModule?e:{default:e}}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var c=function(e){var t,n;function i(t){var n;if(n=e.call(this,t)||this,!t._reduxForm)throw new Error("FormSection must be inside a component decorated with reduxForm()");return n}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i.prototype.render=function(){var e=this.props,t=(e._reduxForm,e.children),n=e.name,i=e.component,u=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["_reduxForm","children","name","component"]);return r.default.isValidElement(t)?(0,r.createElement)(a.ReduxFormContext.Provider,{value:s({},this.props._reduxForm,{sectionPrefix:(0,o.default)(this.props,n)}),children:t}):(0,r.createElement)(a.ReduxFormContext.Provider,{value:s({},this.props._reduxForm,{sectionPrefix:(0,o.default)(this.props,n)}),children:(0,r.createElement)(i,s({},u,{children:t}))})},i}(r.Component);c.propTypes={name:i.default.string.isRequired,component:u.default},c.defaultProps={component:"div"};var f=(0,a.withReduxForm)(c);t.default=f},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;!function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}t.default=e}(n(0));var r=(0,n(12).withReduxForm)(function(e){var t=e.children,n=e._reduxForm;return t({form:n&&n.form,sectionPrefix:n&&n.sectionPrefix})});t.default=r},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,i,o,a,u,l){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,i,o,a,u,l],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var i=function(){};i.thatReturns=r,i.thatReturnsFalse=r(!1),i.thatReturnsTrue=r(!0),i.thatReturnsNull=r(null),i.thatReturnsThis=function(){return this},i.thatReturnsArgument=function(e){return e},e.exports=i},function(e,t,n){"use strict";var r=n(267),i=n(266),o=n(265);e.exports=function(){function e(e,t,n,r,a,u){u!==o&&i(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(23),a=(r=n(10))&&r.__esModule?r:{default:r},u=n(12);var l=function(e){var t,n;function r(t){var n;if(n=e.call(this,t)||this,!t._reduxForm)throw new Error("Form must be inside a component decorated with reduxForm()");return n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.componentWillMount=function(){this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit)},o.render=function(){var e=this.props,t=(e._reduxForm,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["_reduxForm"]));return i.default.createElement("form",t)},r}(i.Component);l.propTypes={onSubmit:a.default.func.isRequired,_reduxForm:a.default.object},(0,o.polyfill)(l);var s=(0,u.withReduxForm)(l);t.default=s},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case l:case u:return e;default:switch(e=e&&e.$$typeof){case c:case p:case s:return e;default:return t}}case o:return t}}}function g(e){return y(e)===d}t.typeOf=y,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Profiler=l,t.Portal=o,t.StrictMode=u,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p)},t.isAsyncMode=function(e){return g(e)||y(e)===f},t.isConcurrentMode=g,t.isContextConsumer=function(e){return y(e)===c},t.isContextProvider=function(e){return y(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return y(e)===p},t.isFragment=function(e){return y(e)===a},t.isProfiler=function(e){return y(e)===l},t.isPortal=function(e){return y(e)===o},t.isStrictMode=function(e){return y(e)===u}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(272);function i(){}e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=i,n.PropTypes=n,n}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,i=3,o=-1,a=-1,u=!1,l=!1;function s(){if(!u){var e=n.expirationTime;l?E():l=!0,w(d,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var o=i,u=a;i=e,a=t;try{var l=r()}finally{i=o,a=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,s()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===o&&null!==n&&1===n.priorityLevel){u=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?s():l=!1}}}function d(e){u=!0;var i=r;r=e;try{if(e)for(;null!==n;){var o=t.unstable_now();if(!(n.expirationTime<=o))break;do{c()}while(null!==n&&n.expirationTime<=o)}else if(null!==n)do{c()}while(null!==n&&!S())}finally{u=!1,r=i,null!==n?s():l=!1,f()}}var p,h,m=Date,v="function"==typeof setTimeout?setTimeout:void 0,y="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function _(e){p=g(function(t){y(h),e(t)}),h=v(function(){b(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return m.now()};var w,E,S,T=null;if("undefined"!=typeof window?T=window:void 0!==e&&(T=e),T&&T._schedMock){var k=T._schedMock;w=k[0],E=k[1],S=k[2],t.unstable_now=k[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var O=null,C=function(e){if(null!==O)try{O(e)}finally{O=null}};w=function(e){null!==O?setTimeout(w,0,e):(O=e,setTimeout(C,0,!1))},E=function(){O=null},S=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var M=null,A=!1,N=-1,P=!1,R=!1,I=0,F=33,j=33;S=function(){return I<=t.unstable_now()};var D=new MessageChannel,U=D.port2;D.port1.onmessage=function(){A=!1;var e=M,n=N;M=null,N=-1;var r=t.unstable_now(),i=!1;if(0>=I-r){if(!(-1!==n&&n<=r))return P||(P=!0,_(z)),M=e,void(N=n);i=!0}if(null!==e){R=!0;try{e(i)}finally{R=!1}}};var z=function(e){if(null!==M){_(z);var t=e-I+j;t<j&&F<j?(8>t&&(t=8),j=t<F?F:t):F=t,I=e+j,A||(A=!0,U.postMessage(void 0))}else P=!1};w=function(e,t){M=e,N=t,R||0>t?U.postMessage(void 0):P||(P=!0,_(z))},E=function(){M=null,A=!1,N=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=i,a=o;i=e,o=t.unstable_now();try{return n()}finally{i=r,o=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==o?o:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(i){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:i,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{a=null;var u=n;do{if(u.expirationTime>r){a=u;break}u=u.next}while(u!==n);null===a?a=n:a===n&&(n=e,s()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=i;return function(){var r=i,a=o;i=n,o=t.unstable_now();try{return e.apply(this,arguments)}finally{i=r,o=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return i},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||S())}}).call(this,n(40))},function(e,t,n){"use strict";e.exports=n(274)},function(e,t,n){"use strict";var r=n(0),i=n(90),o=n(275);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,i,o,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,i,o,a,u],s=0;(e=Error(t.replace(/%s/g,function(){return l[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,s=!1,c=null,f={onError:function(e){u=!0,l=e}};function d(e,t,n,r,i,o,a,s,c){u=!1,l=null,function(e,t,n,r,i,o,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function m(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||a("96",e),!y[n])for(var r in t.extractEvents||a("97",e),y[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,l=r;g.hasOwnProperty(l)&&a("99",l),g[l]=o;var s=o.phasedRegistrationNames;if(s){for(i in s)s.hasOwnProperty(i)&&v(s[i],u,l);i=!0}else o.registrationName?(v(o.registrationName,u,l),i=!0):i=!1;i||a("98",r,e)}}}function v(e,t,n){b[e]&&a("100",e),b[e]=t,_[e]=t.eventTypes[n].dependencies}var y=[],g={},b={},_={},x=null,w=null,E=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,i,o,f,p,h){if(d.apply(this,arguments),u){if(u){var m=l;u=!1,l=null}else a("198"),m=void 0;s||(s=!0,c=m)}}(r,t,void 0,e),e.currentTarget=null}function T(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function k(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var O=null;function C(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var M={injectEventPluginOrder:function(e){p&&a("101"),p=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function A(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function N(e){if(null!==e&&(O=T(O,e)),e=O,O=null,e&&(k(e,C),O&&a("95"),s))throw e=c,s=!1,c=null,e}var P=Math.random().toString(36).slice(2),R="__reactInternalInstance$"+P,I="__reactEventHandlers$"+P;function F(e){if(e[R])return e[R];for(;!e[R];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[R]).tag||6===e.tag?e:null}function j(e){return!(e=e[R])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function U(e){return e[I]||null}function z(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function L(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function V(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=z(t);for(t=n.length;0<t--;)L(n[t],"captured",e);for(t=0;t<n.length;t++)L(n[t],"bubbled",e)}}function q(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&q(e._targetInst,null,e)}function W(e){k(e,V)}var Y=!("undefined"==typeof window||!window.document||!window.document.createElement);function H(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $={animationend:H("Animation","AnimationEnd"),animationiteration:H("Animation","AnimationIteration"),animationstart:H("Animation","AnimationStart"),transitionend:H("Transition","TransitionEnd")},K={},X={};function G(e){if(K[e])return K[e];if(!$[e])return e;var t,n=$[e];for(t in n)if(n.hasOwnProperty(t)&&t in X)return K[e]=n[t];return e}Y&&(X=document.createElement("div").style,"AnimationEvent"in window||(delete $.animationend.animation,delete $.animationiteration.animation,delete $.animationstart.animation),"TransitionEvent"in window||delete $.transitionend.transition);var Q=G("animationend"),Z=G("animationiteration"),J=G("animationstart"),ee=G("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,ie=null;function oe(){if(ie)return ie;var e,t,n=re,r=n.length,i="value"in ne?ne.value:ne.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return ie=i.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function le(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function se(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}i(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var de=le.extend({data:null}),pe=le.extend({data:null}),he=[9,13,27,32],me=Y&&"CompositionEvent"in window,ve=null;Y&&"documentMode"in document&&(ve=document.documentMode);var ye=Y&&"TextEvent"in window&&!ve,ge=Y&&(!me||ve&&8<ve&&11>=ve),be=String.fromCharCode(32),_e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xe=!1;function we(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Te={eventTypes:_e,extractEvents:function(e,t,n,r){var i=void 0,o=void 0;if(me)e:{switch(e){case"compositionstart":i=_e.compositionStart;break e;case"compositionend":i=_e.compositionEnd;break e;case"compositionupdate":i=_e.compositionUpdate;break e}i=void 0}else Se?we(e,n)&&(i=_e.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=_e.compositionStart);return i?(ge&&"ko"!==n.locale&&(Se||i!==_e.compositionStart?i===_e.compositionEnd&&Se&&(o=oe()):(re="value"in(ne=r)?ne.value:ne.textContent,Se=!0)),i=de.getPooled(i,t,n,r),o?i.data=o:null!==(o=Ee(n))&&(i.data=o),W(i),o=i):o=null,(e=ye?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(xe=!0,be);case"textInput":return(e=t.data)===be&&xe?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!me&&we(e,t)?(e=oe(),ie=re=ne=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(_e.beforeInput,t,n,r)).data=e,W(t)):t=null,null===o?t:null===t?o:[o,t]}},ke=null,Oe=null,Ce=null;function Me(e){if(e=w(e)){"function"!=typeof ke&&a("280");var t=x(e.stateNode);ke(e.stateNode,e.type,t)}}function Ae(e){Oe?Ce?Ce.push(e):Ce=[e]:Oe=e}function Ne(){if(Oe){var e=Oe,t=Ce;if(Ce=Oe=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}function Pe(e,t){return e(t)}function Re(e,t,n){return e(t,n)}function Ie(){}var Fe=!1;function je(e,t){if(Fe)return e(t);Fe=!0;try{return Pe(e,t)}finally{Fe=!1,(null!==Oe||null!==Ce)&&(Ie(),Ne())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ue(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function ze(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Le(e){if(!Y)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Ve(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function qe(e){e._valueTracker||(e._valueTracker=function(e){var t=Ve(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ve(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var We=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ye=/^(.*)[\\\/]/,He="function"==typeof Symbol&&Symbol.for,$e=He?Symbol.for("react.element"):60103,Ke=He?Symbol.for("react.portal"):60106,Xe=He?Symbol.for("react.fragment"):60107,Ge=He?Symbol.for("react.strict_mode"):60108,Qe=He?Symbol.for("react.profiler"):60114,Ze=He?Symbol.for("react.provider"):60109,Je=He?Symbol.for("react.context"):60110,et=He?Symbol.for("react.concurrent_mode"):60111,tt=He?Symbol.for("react.forward_ref"):60112,nt=He?Symbol.for("react.suspense"):60113,rt=He?Symbol.for("react.memo"):60115,it=He?Symbol.for("react.lazy"):60116,ot="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ot&&e[ot]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Xe:return"Fragment";case Ke:return"Portal";case Qe:return"Profiler";case Ge:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Je:return"Context.Consumer";case Ze:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case it:if(e=1===e._status?e._result:null)return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 2:case 16:case 0:case 1:case 5:case 8:case 13:var n=e._debugOwner,r=e._debugSource,i=ut(e.type),o=null;n&&(o=ut(n.type)),n=i,i="",r?i=" (at "+r.fileName.replace(Ye,"")+":"+r.lineNumber+")":o&&(i=" (created by "+o+")"),o="\n    in "+(n||"Unknown")+i;break e;default:o=""}t+=o,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function yt(e,t,n,r){var i=ht.hasOwnProperty(t)?ht[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!ct.call(dt,e)||!ct.call(ft,e)&&(st.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _t(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&yt(e,"checked",t,!1)}function wt(e,t){xt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,vt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new pt("tabIndex",1,!1,"tabindex",null);var Tt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function kt(e,t,n){return(e=le.getPooled(Tt.change,e,t,n)).type="change",Ae(n),W(e),e}var Ot=null,Ct=null;function Mt(e){N(e)}function At(e){if(Be(D(e)))return e}function Nt(e,t){if("change"===e)return t}var Pt=!1;function Rt(){Ot&&(Ot.detachEvent("onpropertychange",It),Ct=Ot=null)}function It(e){"value"===e.propertyName&&At(Ct)&&je(Mt,e=kt(Ct,e,ze(e)))}function Ft(e,t,n){"focus"===e?(Rt(),Ct=n,(Ot=t).attachEvent("onpropertychange",It)):"blur"===e&&Rt()}function jt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return At(Ct)}function Dt(e,t){if("click"===e)return At(t)}function Ut(e,t){if("input"===e||"change"===e)return At(t)}Y&&(Pt=Le("input")&&(!document.documentMode||9<document.documentMode));var zt={eventTypes:Tt,_isInputEventSupported:Pt,extractEvents:function(e,t,n,r){var i=t?D(t):window,o=void 0,a=void 0,u=i.nodeName&&i.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===i.type?o=Nt:Ue(i)?Pt?o=Ut:(o=jt,a=Ft):(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Dt),o&&(o=o(e,t)))return kt(o,n,r);a&&a(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&St(i,"number",i.value)}},Lt=le.extend({view:null,detail:null}),Vt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function qt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Vt[e])&&!!t[e]}function Bt(){return qt}var Wt=0,Yt=0,Ht=!1,$t=!1,Kt=Lt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Wt;return Wt=e.screenX,Ht?"mousemove"===e.type?e.screenX-t:0:(Ht=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Yt;return Yt=e.screenY,$t?"mousemove"===e.type?e.screenY-t:0:($t=!0,0)}}),Xt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Gt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Qt={eventTypes:Gt,extractEvents:function(e,t,n,r){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?F(t):null):o=null,o===t)return null;var a=void 0,u=void 0,l=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(a=Kt,u=Gt.mouseLeave,l=Gt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Xt,u=Gt.pointerLeave,l=Gt.pointerEnter,s="pointer");var c=null==o?i:D(o);if(i=null==t?i:D(t),(e=a.getPooled(u,o,n,r)).type=s+"leave",e.target=c,e.relatedTarget=i,(n=a.getPooled(l,t,n,r)).type=s+"enter",n.target=i,n.relatedTarget=c,r=t,o&&r)e:{for(i=r,s=0,a=t=o;a;a=z(a))s++;for(a=0,l=i;l;l=z(l))a++;for(;0<s-a;)t=z(t),s--;for(;0<a-s;)i=z(i),a--;for(;s--;){if(t===i||t===i.alternate)break e;t=z(t),i=z(i)}t=null}else t=null;for(i=t,t=[];o&&o!==i&&(null===(s=o.alternate)||s!==i);)t.push(o),o=z(o);for(o=[];r&&r!==i&&(null===(s=r.alternate)||s!==i);)o.push(r),r=z(r);for(r=0;r<t.length;r++)q(t[r],"bubbled",e);for(r=o.length;0<r--;)q(o[r],"captured",n);return[e,n]}},Zt=Object.prototype.hasOwnProperty;function Jt(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var i=n.return,o=i?i.alternate:null;if(!i||!o)break;if(i.child===o.child){for(var u=i.child;u;){if(u===n)return nn(i),e;if(u===r)return nn(i),t;u=u.sibling}a("188")}if(n.return!==r.return)n=i,r=o;else{u=!1;for(var l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=Lt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Lt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Kt.extend({dataTransfer:null}),pn=Lt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[Q,"animationEnd"],[Z,"animationIteration"],[J,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],yn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},yn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),vn.forEach(function(e){bn(e,!1)});var _n={eventTypes:yn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var i=gn[e];if(!i)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case Q:case Z:case J:e=on;break;case ee:e=hn;break;case"scroll":e=Lt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Xt;break;default:e=le}return W(t=e.getPooled(i,t,n,r)),t}},xn=_n.isInteractiveTopLevelEventType,wn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=F(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=ze(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=null,u=0;u<y.length;u++){var l=y[u];l&&(l=l.extractEvents(r,t,o,i))&&(a=T(a,l))}N(a)}}var Sn=!0;function Tn(e,t){if(!t)return null;var n=(xn(e)?On:Cn).bind(null,e);t.addEventListener(e,n,!1)}function kn(e,t){if(!t)return null;var n=(xn(e)?On:Cn).bind(null,e);t.addEventListener(e,n,!0)}function On(e,t){Re(Cn,e,t)}function Cn(e,t){if(Sn){var n=ze(t);if(null===(n=F(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),wn.length){var r=wn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{je(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>wn.length&&wn.push(e)}}}var Mn={},An=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function Pn(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=An++,Mn[e[Nn]]={}),Mn[e[Nn]]}function Rn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function In(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Fn(e,t){var n,r=In(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=In(r)}}function jn(){for(var e=window,t=Rn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Rn(e.document)}return t}function Dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Un=Y&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Ln=null,Vn=null,qn=null,Bn=!1;function Wn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Bn||null==Ln||Ln!==Rn(n)?null:("selectionStart"in(n=Ln)&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},qn&&en(qn,n)?null:(qn=n,(e=le.getPooled(zn.select,Vn,e,t)).type="select",e.target=Ln,W(e),e))}var Yn={eventTypes:zn,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=Pn(o),i=_.onSelect;for(var a=0;a<i.length;a++){var u=i[a];if(!o.hasOwnProperty(u)||!o[u]){o=!1;break e}}o=!0}i=!o}if(i)return null;switch(o=t?D(t):window,e){case"focus":(Ue(o)||"true"===o.contentEditable)&&(Ln=o,Vn=t,qn=null);break;case"blur":qn=Vn=Ln=null;break;case"mousedown":Bn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Bn=!1,Wn(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return Wn(n,r)}return null}};function Hn(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function $n(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Kn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Xn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Gn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Qn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}M.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=U,w=j,E=D,M.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:Qt,ChangeEventPlugin:zt,SelectEventPlugin:Yn,BeforeInputEventPlugin:Te});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Jn(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Jn(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var tr,nr=void 0,rr=(tr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return tr(e,t)})}:tr);function ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var or={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function ur(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||or.hasOwnProperty(e)&&or[e]?(""+t).trim():t+"px"}function lr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=ur(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(or).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),or[t]=or[e]})});var sr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=Pn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var i=t[r];if(!n.hasOwnProperty(i)||!n[i]){switch(i){case"scroll":kn("scroll",e);break;case"focus":case"blur":kn("focus",e),kn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Le(i)&&kn(i,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(i)&&Tn(i,e)}n[i]=!0}}}function pr(){}var hr=null,mr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0;function _r(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function xr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var wr=[],Er=-1;function Sr(e){0>Er||(e.current=wr[Er],wr[Er]=null,Er--)}function Tr(e,t){wr[++Er]=e.current,e.current=t}var kr={},Or={current:kr},Cr={current:!1},Mr=kr;function Ar(e,t){var n=e.type.contextTypes;if(!n)return kr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Nr(e){return null!==(e=e.childContextTypes)&&void 0!==e}function Pr(e){Sr(Cr),Sr(Or)}function Rr(e){Sr(Cr),Sr(Or)}function Ir(e,t,n){Or.current!==kr&&a("168"),Tr(Or,t),Tr(Cr,n)}function Fr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())o in e||a("108",ut(t)||"Unknown",o);return i({},n,r)}function jr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||kr,Mr=Or.current,Tr(Or,t),Tr(Cr,Cr.current),!0}function Dr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Fr(e,t,Mr),r.__reactInternalMemoizedMergedChildContext=t,Sr(Cr),Sr(Or),Tr(Or,t)):Sr(Cr),Tr(Cr,n)}var Ur=null,zr=null;function Lr(e){return function(t){try{return e(t)}catch(e){}}}function Vr(e,t,n,r){return new function(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}(e,t,n,r)}function qr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Br(e,t){var n=e.alternate;return null===n?((n=Vr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.firstContextDependency=e.firstContextDependency,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wr(e,t,n,r,i,o){var u=2;if(r=e,"function"==typeof e)qr(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Xe:return Yr(n.children,i,o,t);case et:return Hr(n,3|i,o,t);case Ge:return Hr(n,2|i,o,t);case Qe:return(e=Vr(12,n,t,4|i)).elementType=Qe,e.type=Qe,e.expirationTime=o,e;case nt:return(e=Vr(13,n,t,i)).elementType=nt,e.type=nt,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Ze:u=10;break e;case Je:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case it:u=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Vr(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Yr(e,t,n,r){return(e=Vr(7,e,r,t)).expirationTime=n,e}function Hr(e,t,n,r){return e=Vr(8,e,r,t),t=0==(1&t)?Ge:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function $r(e,t,n){return(e=Vr(6,e,null,t)).expirationTime=n,e}function Kr(e,t,n){return(t=Vr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Xr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),Zr(t,e)}function Gr(e,t){e.didError=!1;var n=e.latestPingedTime;0!==n&&n>=t&&(e.latestPingedTime=0),n=e.earliestPendingTime;var r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),Zr(t,e)}function Qr(e,t){var n=e.earliestPendingTime;return e=e.earliestSuspendedTime,n>t&&(t=n),e>t&&(t=e),t}function Zr(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,i=t.earliestPendingTime,o=t.latestPingedTime;0===(i=0!==i?i:o)&&(0===e||r<e)&&(i=r),0!==(e=i)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=i,t.expirationTime=e}var Jr=!1;function ei(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ti(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ni(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function ri(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function ii(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=ei(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=ei(e.memoizedState),i=n.updateQueue=ei(n.memoizedState)):r=e.updateQueue=ti(i):null===i&&(i=n.updateQueue=ti(r));null===i||r===i?ri(r,t):null===r.lastUpdate||null===i.lastUpdate?(ri(r,t),ri(i,t)):(ri(r,t),i.lastUpdate=t)}function oi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=ei(e.memoizedState):ai(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ai(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=ti(t)),t}function ui(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(a,r,o):e)||void 0===o)break;return i({},r,o);case 2:Jr=!0}return r}function li(e,t,n,r,i){Jr=!1;for(var o=(t=ai(e,t)).baseState,a=null,u=0,l=t.firstUpdate,s=o;null!==l;){var c=l.expirationTime;c<i?(null===a&&(a=l,o=s),u<c&&(u=c)):(s=ui(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(c=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<i?(null===c&&(c=l,null===a&&(o=s)),u<f&&(u=f)):(s=ui(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(o=s),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=u,e.memoizedState=s}function si(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ci(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ci(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ci(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function fi(e,t){return{value:e,source:t,stack:lt(t)}}var di={current:null},pi=null,hi=null,mi=null;function vi(e,t){var n=e.type._context;Tr(di,n._currentValue),n._currentValue=t}function yi(e){var t=di.current;Sr(di),e.type._context._currentValue=t}function gi(e){pi=e,mi=hi=null,e.firstContextDependency=null}function bi(e,t){return mi!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(mi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===hi?(null===pi&&a("293"),pi.firstContextDependency=hi=t):hi=hi.next=t),e._currentValue}var _i={},xi={current:_i},wi={current:_i},Ei={current:_i};function Si(e){return e===_i&&a("174"),e}function Ti(e,t){Tr(Ei,t),Tr(wi,e),Tr(xi,_i);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:er(null,"");break;default:t=er(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Sr(xi),Tr(xi,t)}function ki(e){Sr(xi),Sr(wi),Sr(Ei)}function Oi(e){Si(Ei.current);var t=Si(xi.current),n=er(t,e.type);t!==n&&(Tr(wi,e),Tr(xi,n))}function Ci(e){wi.current===e&&(Sr(xi),Sr(wi))}function Mi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ai=We.ReactCurrentOwner,Ni=(new r.Component).refs;function Pi(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Ri={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ea(),i=ni(r=Xo(r,e));i.payload=t,void 0!==n&&null!==n&&(i.callback=n),Wo(),ii(e,i),Zo(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ea(),i=ni(r=Xo(r,e));i.tag=1,i.payload=t,void 0!==n&&null!==n&&(i.callback=n),Wo(),ii(e,i),Zo(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ea(),r=ni(n=Xo(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Wo(),ii(e,r),Zo(e,n)}};function Ii(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(i,o))}function Fi(e,t,n){var r=!1,i=kr,o=t.contextType;return"object"==typeof o&&null!==o?o=Ai.currentDispatcher.readContext(o):(i=Nr(t)?Mr:Or.current,o=(r=null!==(r=t.contextTypes)&&void 0!==r)?Ar(e,i):kr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ri,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function ji(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ri.enqueueReplaceState(t,t.state,null)}function Di(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Ni;var o=t.contextType;"object"==typeof o&&null!==o?i.context=Ai.currentDispatcher.readContext(o):(o=Nr(t)?Mr:Or.current,i.context=Ar(e,o)),null!==(o=e.updateQueue)&&(li(e,o,n,i,r),i.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(Pi(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Ri.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(li(e,o,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var Ui=Array.isArray;function zi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(1!==n.tag&&a("289"),r=n.stateNode),r||a("147",e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===Ni&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function Li(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Vi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=Br(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=$r(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=zi(e,t,n),r.return=e,r):((r=Wr(n.type,n.key,n.props,null,e.mode,r)).ref=zi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Kr(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Yr(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=$r(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case $e:return(n=Wr(t.type,t.key,t.props,null,e.mode,n)).ref=zi(e,null,t),n.return=e,n;case Ke:return(t=Kr(t,e.mode,n)).return=e,t}if(Ui(t)||at(t))return(t=Yr(t,e.mode,n,null)).return=e,t;Li(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case $e:return n.key===i?n.type===Xe?f(e,t,n.props.children,r,i):s(e,t,n,r):null;case Ke:return n.key===i?c(e,t,n,r):null}if(Ui(n)||at(n))return null!==i?null:f(e,t,n,r,null);Li(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case $e:return e=e.get(null===r.key?n:r.key)||null,r.type===Xe?f(t,e,r.props.children,i,r.key):s(t,e,r,i);case Ke:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(Ui(r)||at(r))return f(t,e=e.get(n)||null,r,i,null);Li(t,r)}return null}function m(i,a,u,l){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(i,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(i,f),a=o(y,a,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===u.length)return n(i,f),s;if(null===f){for(;m<u.length;m++)(f=d(i,u[m],l))&&(a=o(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(i,f);m<u.length;m++)(v=h(f,i,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=o(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach(function(e){return t(i,e)}),s}function v(i,u,l,s){var c=at(l);"function"!=typeof c&&a("150"),null==(l=c.call(l))&&a("151");for(var f=c=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(i,m,g.value,s);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(i,m),u=o(b,u,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(i,m),c;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(i,g.value,s))&&(u=o(g,u,v),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(i,m);!g.done;v++,g=l.next())null!==(g=h(m,i,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=o(g,u,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach(function(e){return t(i,e)}),c}return function(e,r,o,l){var s="object"==typeof o&&null!==o&&o.type===Xe&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case $e:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?o.type===Xe:s.elementType===o.type){n(e,s.sibling),(r=i(s,o.type===Xe?o.props.children:o.props)).ref=zi(e,s,o),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}o.type===Xe?((r=Yr(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Wr(o.type,o.key,o.props,null,e.mode,l)).ref=zi(e,r,o),l.return=e,e=l)}return u(e);case Ke:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Kr(o,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=$r(o,e.mode,l)).return=e,e=r),u(e);if(Ui(o))return m(e,r,o,l);if(at(o))return v(e,r,o,l);if(c&&Li(e,o),void 0===o&&!s)switch(e.tag){case 1:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var qi=Vi(!0),Bi=Vi(!1),Wi=null,Yi=null,Hi=!1;function $i(e,t){var n=Vr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ki(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Xi(e){if(Hi){var t=Yi;if(t){var n=t;if(!Ki(e,t)){if(!(t=_r(n))||!Ki(e,t))return e.effectTag|=2,Hi=!1,void(Wi=e);$i(Wi,n)}Wi=e,Yi=xr(t)}else e.effectTag|=2,Hi=!1,Wi=e}}function Gi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;Wi=e}function Qi(e){if(e!==Wi)return!1;if(!Hi)return Gi(e),Hi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yr(t,e.memoizedProps))for(t=Yi;t;)$i(e,t),t=_r(t);return Gi(e),Yi=Wi?_r(e.stateNode):null,!0}function Zi(){Yi=Wi=null,Hi=!1}var Ji=We.ReactCurrentOwner;function eo(e,t,n,r){t.child=null===e?Bi(t,null,n,r):qi(t,e.child,n,r)}function to(e,t,n,r,i){n=n.render;var o=t.ref;return gi(t),r=n(r,o),t.effectTag|=1,eo(e,t,r,i),t.child}function no(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||qr(a)||void 0!==a.defaultProps||null!==n.compare?((e=Wr(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ro(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(i,r)&&e.ref===t.ref)?co(e,t,o):(t.effectTag|=1,(e=Br(a,r)).ref=t.ref,e.return=t,t.child=e)}function ro(e,t,n,r,i,o){return null!==e&&i<o&&en(e.memoizedProps,r)&&e.ref===t.ref?co(e,t,o):oo(e,t,n,r,o)}function io(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function oo(e,t,n,r,i){var o=Nr(n)?Mr:Or.current;return o=Ar(t,o),gi(t),n=n(r,o),t.effectTag|=1,eo(e,t,n,i),t.child}function ao(e,t,n,r,i){if(Nr(n)){var o=!0;jr(t)}else o=!1;if(gi(t),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Fi(t,n,r),Di(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=Ai.currentDispatcher.readContext(s):s=Ar(t,s=Nr(n)?Mr:Or.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&ji(t,a,r,s),Jr=!1;var d=t.memoizedState;l=a.state=d;var p=t.updateQueue;null!==p&&(li(t,p,r,a,i),l=t.memoizedState),u!==r||d!==l||Cr.current||Jr?("function"==typeof c&&(Pi(t,n,c,r),l=t.memoizedState),(u=Jr||Ii(t,n,u,r,d,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:Mi(t.type,u),l=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=Ai.currentDispatcher.readContext(s):s=Ar(t,s=Nr(n)?Mr:Or.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&ji(t,a,r,s),Jr=!1,l=t.memoizedState,d=a.state=l,null!==(p=t.updateQueue)&&(li(t,p,r,a,i),d=t.memoizedState),u!==r||l!==d||Cr.current||Jr?("function"==typeof c&&(Pi(t,n,c,r),d=t.memoizedState),(c=Jr||Ii(t,n,u,r,l,d,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return uo(e,t,n,r,o,i)}function uo(e,t,n,r,i,o){io(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&Dr(t,n,!1),co(e,t,o);r=t.stateNode,Ji.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=qi(t,e.child,null,o),t.child=qi(t,null,u,o)):eo(e,t,u,o),t.memoizedState=r.state,i&&Dr(t,n,!0),t.child}function lo(e){var t=e.stateNode;t.pendingContext?Ir(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ir(0,t.context,!1),Ti(e,t.containerInfo)}function so(e,t,n){var r=t.mode,i=t.pendingProps,o=t.memoizedState;if(0==(64&t.effectTag)){o=null;var a=!1}else o={timedOutAt:null!==o?o.timedOutAt:0},a=!0,t.effectTag&=-65;return null===e?a?(a=i.fallback,i=Yr(null,r,0,null),0==(1&t.mode)&&(i.child=null!==t.memoizedState?t.child.child:t.child),r=Yr(a,r,n,null),i.sibling=r,(n=i).return=r.return=t):n=r=Bi(t,null,i.children,n):null!==e.memoizedState?(e=(r=e.child).sibling,a?(n=i.fallback,i=Br(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(i.child=a)),r=i.sibling=Br(e,n,e.expirationTime),n=i,i.childExpirationTime=0,n.return=r.return=t):n=r=qi(t,r.child,i.children,n)):(e=e.child,a?(a=i.fallback,(i=Yr(null,r,0,null)).child=e,0==(1&t.mode)&&(i.child=null!==t.memoizedState?t.child.child:t.child),(r=i.sibling=Yr(a,r,n,null)).effectTag|=2,n=i,i.childExpirationTime=0,n.return=r.return=t):r=n=qi(t,e,i.children,n)),t.memoizedState=o,t.child=n,r}function co(e,t,n){if(null!==e&&(t.firstContextDependency=e.firstContextDependency),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Br(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Br(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fo(e,t,n){var r=t.expirationTime;if(null!==e&&e.memoizedProps===t.pendingProps&&!Cr.current&&r<n){switch(t.tag){case 3:lo(t),Zi();break;case 5:Oi(t);break;case 1:Nr(t.type)&&jr(t);break;case 4:Ti(t,t.stateNode.containerInfo);break;case 10:vi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?so(e,t,n):null!==(t=co(e,t,n))?t.sibling:null}return co(e,t,n)}switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var i=Ar(t,Or.current);if(gi(t),i=r(e,i),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,Nr(r)){var o=!0;jr(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&Pi(t,r,u,e),i.updater=Ri,t.stateNode=i,i._reactInternalFiber=t,Di(t,r,e,n),t=uo(null,t,r,!0,o,n)}else t.tag=0,eo(null,t,i,n),t=t.child;return t;case 16:switch(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),o=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:throw e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._result=t,t}}(i),t.type=e,i=t.tag=function(e){if("function"==typeof e)return qr(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),o=Mi(e,o),u=void 0,i){case 0:u=oo(null,t,e,o,n);break;case 1:u=ao(null,t,e,o,n);break;case 11:u=to(null,t,e,o,n);break;case 14:u=no(null,t,e,Mi(e.type,o),r,n);break;default:a("283",e)}return u;case 0:return r=t.type,i=t.pendingProps,oo(e,t,r,i=t.elementType===r?i:Mi(r,i),n);case 1:return r=t.type,i=t.pendingProps,ao(e,t,r,i=t.elementType===r?i:Mi(r,i),n);case 3:return lo(t),null===(r=t.updateQueue)&&a("282"),i=null!==(i=t.memoizedState)?i.element:null,li(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i?(Zi(),t=co(e,t,n)):(i=t.stateNode,(i=(null===e||null===e.child)&&i.hydrate)&&(Yi=xr(t.stateNode.containerInfo),Wi=t,i=Hi=!0),i?(t.effectTag|=2,t.child=Bi(t,null,r,n)):(eo(e,t,r,n),Zi()),t=t.child),t;case 5:return Oi(t),null===e&&Xi(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,yr(r,i)?u=null:null!==o&&yr(r,o)&&(t.effectTag|=16),io(e,t),1!==n&&1&t.mode&&i.hidden?(t.expirationTime=1,t=null):(eo(e,t,u,n),t=t.child),t;case 6:return null===e&&Xi(t),null;case 13:return so(e,t,n);case 4:return Ti(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=qi(t,null,r,n):eo(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,to(e,t,r,i=t.elementType===r?i:Mi(r,i),n);case 7:return eo(e,t,t.pendingProps,n),t.child;case 8:case 12:return eo(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,u=t.memoizedProps,vi(t,o=i.value),null!==u){var l=u.value;if(0===(o=l===o&&(0!==l||1/l==1/o)||l!=l&&o!=o?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!Cr.current){t=co(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){if(null!==(l=u.firstContextDependency))do{if(l.context===r&&0!=(l.observedBits&o)){if(1===u.tag){var s=ni(n);s.tag=2,ii(u,s)}u.expirationTime<n&&(u.expirationTime=n),null!==(s=u.alternate)&&s.expirationTime<n&&(s.expirationTime=n);for(var c=u.return;null!==c;){if(s=c.alternate,c.childExpirationTime<n)c.childExpirationTime=n,null!==s&&s.childExpirationTime<n&&(s.childExpirationTime=n);else{if(!(null!==s&&s.childExpirationTime<n))break;s.childExpirationTime=n}c=c.return}}s=u.child,l=l.next}while(null!==l);else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}}eo(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,gi(t),r=r(i=bi(i,o.unstable_observedBits)),t.effectTag|=1,eo(e,t,r,n),t.child;case 14:return no(e,t,i=t.type,o=Mi(i.type,t.pendingProps),r,n);case 15:return ro(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Mi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Nr(r)?(e=!0,jr(t)):e=!1,gi(t),Fi(t,r,i),Di(t,r,i,n),uo(null,t,r,!0,e,n);default:a("156")}}function po(e){e.effectTag|=4}var ho=void 0,mo=void 0,vo=void 0,yo=void 0;function go(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function bo(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ko(e,t)}else t.current=null}function _o(e){switch("function"==typeof zr&&zr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(null!==r){var i=e;try{r()}catch(e){Ko(i,e)}}n=n.next}while(n!==t)}break;case 1:if(bo(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ko(e,t)}break;case 5:bo(e);break;case 4:Eo(e)}}function xo(e){return 5===e.tag||3===e.tag||4===e.tag}function wo(e){e:{for(var t=e.return;null!==t;){if(xo(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(ir(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||xo(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)if(n)if(r){var o=t,u=i.stateNode,l=n;8===o.nodeType?o.parentNode.insertBefore(u,l):o.insertBefore(u,l)}else t.insertBefore(i.stateNode,n);else r?(u=t,l=i.stateNode,8===u.nodeType?(o=u.parentNode).insertBefore(l,u):(o=u).appendChild(l),null!==(u=u._reactRootContainer)&&void 0!==u||null!==o.onclick||(o.onclick=pr)):t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function Eo(e){for(var t=e,n=!1,r=void 0,i=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,i=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,i=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var o=t,u=o;;)if(_o(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===o)break;for(;null===u.sibling;){if(null===u.return||u.return===o)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}i?(o=r,u=t.stateNode,8===o.nodeType?o.parentNode.removeChild(u):o.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,i=!0):_o(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function So(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[I]=r,"input"===e&&"radio"===r.type&&null!=r.name&&xt(n,r),fr(e,i),t=fr(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?lr(n,l):"dangerouslySetInnerHTML"===u?rr(n,l):"children"===u?ir(n,l):yt(n,u,l,t)}switch(e){case"input":wt(n,r);break;case"textarea":Gn(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?$n(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?$n(n,!!r.multiple,r.defaultValue,!0):$n(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(e=t,null===(n=t.memoizedState)?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Ea())),null!==e)e:for(t=n=e;;){if(5===t.tag)e=t.stateNode,r?e.style.display="none":(e=t.stateNode,o=void 0!==(o=t.memoizedProps.style)&&null!==o&&o.hasOwnProperty("display")?o.display:null,e.style.display=ur("display",o));else if(6===t.tag)t.stateNode.nodeValue=r?"":t.memoizedProps;else{if(13===t.tag&&null!==t.memoizedState){(e=t.child.sibling).return=t,t=e;continue}if(null!==t.child){t.child.return=t,t=t.child;continue}}if(t===n)break e;for(;null===t.sibling;){if(null===t.return||t.return===n)break e;t=t.return}t.sibling.return=t.return,t=t.sibling}break;case 17:break;default:a("163")}}function To(e,t,n){(n=ni(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ra(r),go(e,t)},n}function ko(e,t,n){(n=ni(n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===qo?qo=new Set([this]):qo.add(this));var n=t.value,i=t.stack;go(e,t),this.componentDidCatch(n,{componentStack:null!==i?i:""})}),n}function Oo(e){switch(e.tag){case 1:Nr(e.type)&&Pr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return ki(),Rr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Ci(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return ki(),null;case 10:return yi(e),null;default:return null}}ho=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},mo=function(){},vo=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(Si(xi.current),e=null,n){case"input":a=bt(u,a),r=bt(u,r),e=[];break;case"option":a=Hn(u,a),r=Hn(u,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Kn(u,a),r=Kn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=pr)}cr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var s=a[n];for(u in s)s.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(l||(l={}),l[u]=c[u])}else l||(e||(e=[]),e.push(n,l)),l=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&dr(o,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}l&&(e=e||[]).push("style",l),o=e,(t.updateQueue=o)&&po(t)}},yo=function(e,t,n,r){n!==r&&po(t)};var Co={readContext:bi},Mo=We.ReactCurrentOwner,Ao=1073741822,No=0,Po=!1,Ro=null,Io=null,Fo=0,jo=-1,Do=!1,Uo=null,zo=!1,Lo=null,Vo=null,qo=null;function Bo(){if(null!==Ro)for(var e=Ro.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!==n&&void 0!==n&&Pr();break;case 3:ki(),Rr();break;case 5:Ci(t);break;case 4:ki();break;case 10:yi(t)}e=e.return}Io=null,Fo=0,jo=-1,Do=!1,Ro=null}function Wo(){null!==Vo&&(o.unstable_cancelCallback(Lo),Vo())}function Yo(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Ro=e;e:{var o=t,u=Fo,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Nr(t.type)&&Pr();break;case 3:ki(),Rr(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==o&&null!==o.child||(Qi(t),t.effectTag&=-3),mo(t);break;case 5:Ci(t);var s=Si(Ei.current);if(u=t.type,null!==o&&null!=t.stateNode)vo(o,t,u,l,s),o.ref!==t.ref&&(t.effectTag|=128);else if(l){var c=Si(xi.current);if(Qi(t)){o=(l=t).stateNode;var f=l.type,d=l.memoizedProps,p=s;switch(o[R]=l,o[I]=d,u=void 0,s=f){case"iframe":case"object":Tn("load",o);break;case"video":case"audio":for(f=0;f<te.length;f++)Tn(te[f],o);break;case"source":Tn("error",o);break;case"img":case"image":case"link":Tn("error",o),Tn("load",o);break;case"form":Tn("reset",o),Tn("submit",o);break;case"details":Tn("toggle",o);break;case"input":_t(o,d),Tn("invalid",o),dr(p,"onChange");break;case"select":o._wrapperState={wasMultiple:!!d.multiple},Tn("invalid",o),dr(p,"onChange");break;case"textarea":Xn(o,d),Tn("invalid",o),dr(p,"onChange")}for(u in cr(s,d),f=null,d)d.hasOwnProperty(u)&&(c=d[u],"children"===u?"string"==typeof c?o.textContent!==c&&(f=["children",c]):"number"==typeof c&&o.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(u)&&null!=c&&dr(p,u));switch(s){case"input":qe(o),Et(o,d,!0);break;case"textarea":qe(o),Qn(o);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(o.onclick=pr)}u=f,l.updateQueue=u,(l=null!==u)&&po(t)}else{d=t,o=u,p=l,f=9===s.nodeType?s:s.ownerDocument,c===Zn.html&&(c=Jn(o)),c===Zn.html?"script"===o?((o=f.createElement("div")).innerHTML="<script><\/script>",f=o.removeChild(o.firstChild)):"string"==typeof p.is?f=f.createElement(o,{is:p.is}):(f=f.createElement(o),"select"===o&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(c,o),(o=f)[R]=d,o[I]=l,ho(o,t,!1,!1),p=o;var h=s,m=fr(f=u,d=l);switch(f){case"iframe":case"object":Tn("load",p),s=d;break;case"video":case"audio":for(s=0;s<te.length;s++)Tn(te[s],p);s=d;break;case"source":Tn("error",p),s=d;break;case"img":case"image":case"link":Tn("error",p),Tn("load",p),s=d;break;case"form":Tn("reset",p),Tn("submit",p),s=d;break;case"details":Tn("toggle",p),s=d;break;case"input":_t(p,d),s=bt(p,d),Tn("invalid",p),dr(h,"onChange");break;case"option":s=Hn(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},s=i({},d,{value:void 0}),Tn("invalid",p),dr(h,"onChange");break;case"textarea":Xn(p,d),s=Kn(p,d),Tn("invalid",p),dr(h,"onChange");break;default:s=d}cr(f,s),c=void 0;var v=f,y=p,g=s;for(c in g)if(g.hasOwnProperty(c)){var _=g[c];"style"===c?lr(y,_):"dangerouslySetInnerHTML"===c?null!=(_=_?_.__html:void 0)&&rr(y,_):"children"===c?"string"==typeof _?("textarea"!==v||""!==_)&&ir(y,_):"number"==typeof _&&ir(y,""+_):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=_&&dr(h,c):null!=_&&yt(y,c,_,m))}switch(f){case"input":qe(p),Et(p,d,!1);break;case"textarea":qe(p),Qn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+gt(d.value));break;case"select":(s=p).multiple=!!d.multiple,null!=(p=d.value)?$n(s,!!d.multiple,p,!1):null!=d.defaultValue&&$n(s,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof s.onClick&&(p.onclick=pr)}(l=vr(u,l))&&po(t),t.stateNode=o}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:o&&null!=t.stateNode?yo(o,t,o.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&a("166")),o=Si(Ei.current),Si(xi.current),Qi(t)?(u=(l=t).stateNode,o=l.memoizedProps,u[R]=l,(l=u.nodeValue!==o)&&po(t)):(u=t,(l=(9===o.nodeType?o:o.ownerDocument).createTextNode(l))[R]=t,u.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,Ro=t;break e}l=null!==l,u=null!==o&&null!==o.memoizedState,null!==o&&!l&&u&&(null!==(o=o.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=o,o.nextEffect=s):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),(l!==u||0==(1&t.effectTag)&&l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:ki(),mo(t);break;case 10:yi(t);break;case 9:case 14:break;case 17:Nr(t.type)&&Pr();break;default:a("156")}Ro=null}if(t=e,1===Fo||1!==t.childExpirationTime){for(l=0,u=t.child;null!==u;)o=u.expirationTime,s=u.childExpirationTime,o>l&&(l=o),s>l&&(l=s),u=u.sibling;t.childExpirationTime=l}if(null!==Ro)return Ro;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Oo(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ho(e){var t=fo(e.alternate,e,Fo);return e.memoizedProps=e.pendingProps,null===t&&(t=Yo(e)),Mo.current=null,t}function $o(e,t){Po&&a("243"),Wo(),Po=!0,Mo.currentDispatcher=Co;var n=e.nextExpirationTimeToWorkOn;n===Fo&&e===Io&&null!==Ro||(Bo(),Fo=n,Ro=Br((Io=e).current,null),e.pendingCommitExpirationTime=0);for(var r=!1;;){try{if(t)for(;null!==Ro&&!Oa();)Ro=Ho(Ro);else for(;null!==Ro;)Ro=Ho(Ro)}catch(t){if(mi=hi=pi=null,null===Ro)r=!0,Ra(t);else{null===Ro&&a("271");var i=Ro,o=i.return;if(null!==o){e:{var u=e,l=o,s=i,c=t;if(o=Fo,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==c&&"object"==typeof c&&"function"==typeof c.then){var f=c;c=l;var d=-1,p=-1;do{if(13===c.tag){var h=c.alternate;if(null!==h&&null!==(h=h.memoizedState)){p=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=c.pendingProps.maxDuration)&&(0>=h?d=0:(-1===d||h<d)&&(d=h))}c=c.return}while(null!==c);c=l;do{if((h=13===c.tag)&&(h=void 0!==c.memoizedProps.fallback&&null===c.memoizedState),h){if(l=Go.bind(null,u,c,s,0==(1&c.mode)?1073741823:o),f.then(l,l),0==(1&c.mode)){c.effectTag|=64,s.effectTag&=-1957,1===s.tag&&null===s.alternate&&(s.tag=17),s.expirationTime=o;break e}-1===d?u=1073741823:(-1===p&&(p=10*(1073741822-Qr(u,o))-5e3),u=p+d),0<=u&&jo<u&&(jo=u),c.effectTag|=2048,c.expirationTime=o;break e}c=c.return}while(null!==c);c=Error((ut(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}Do=!0,c=fi(c,s),u=l;do{switch(u.tag){case 3:s=c,u.effectTag|=2048,u.expirationTime=o,oi(u,o=To(u,s,o));break e;case 1:if(s=c,l=u.type,f=u.stateNode,0==(64&u.effectTag)&&("function"==typeof l.getDerivedStateFromError||null!==f&&"function"==typeof f.componentDidCatch&&(null===qo||!qo.has(f)))){u.effectTag|=2048,u.expirationTime=o,oi(u,o=ko(u,s,o));break e}}u=u.return}while(null!==u)}Ro=Yo(i);continue}r=!0,Ra(t)}}break}if(Po=!1,mi=hi=pi=Mo.currentDispatcher=null,r)Io=null,e.finishedWork=null;else if(null!==Ro)e.finishedWork=null;else{if(null===(r=e.current.alternate)&&a("281"),Io=null,Do){if(i=e.latestPendingTime,o=e.latestSuspendedTime,u=e.latestPingedTime,0!==i&&i<n||0!==o&&o<n||0!==u&&u<n)return Gr(e,n),void wa(e,r,n,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,n=e.nextExpirationTimeToWorkOn=n,t=e.expirationTime=1073741823,void wa(e,r,n,t,-1)}t&&-1!==jo?(Gr(e,n),(t=10*(1073741822-Qr(e,n)))<jo&&(jo=t),t=10*(1073741822-Ea()),t=jo-t,wa(e,r,n,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=n,e.finishedWork=r)}}function Ko(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qo||!qo.has(r)))return ii(n,e=ko(n,e=fi(t,e),1073741823)),void Zo(n,1073741823);break;case 3:return ii(n,e=To(n,e=fi(t,e),1073741823)),void Zo(n,1073741823)}n=n.return}3===e.tag&&(ii(e,n=To(e,n=fi(t,e),1073741823)),Zo(e,1073741823))}function Xo(e,t){return 0!==No?e=No:Po?e=zo?1073741823:Fo:1&t.mode?(e=da?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Io&&e===Fo&&--e):e=1073741823,da&&(0===ua||e<ua)&&(ua=e),e}function Go(e,t,n,r){var i=e.earliestSuspendedTime,o=e.latestSuspendedTime;if(0!==i&&r<=i&&r>=o){o=i=r,e.didError=!1;var a=e.latestPingedTime;(0===a||a>o)&&(e.latestPingedTime=o),Zr(o,e)}else Xr(e,i=Xo(i=Ea(),t));0!=(1&t.mode)&&e===Io&&Fo===r&&(Io=null),Qo(t,i),0==(1&t.mode)&&(Qo(n,i),1===n.tag&&null!==n.stateNode&&((t=ni(i)).tag=2,ii(n,t))),0!==(n=e.expirationTime)&&Sa(e,n)}function Qo(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return i}function Zo(e,t){null!==(e=Qo(e,t))&&(!Po&&0!==Fo&&t>Fo&&Bo(),Xr(e,t),Po&&!zo&&Io===e||Sa(e,e.expirationTime),ga>ya&&(ga=0,a("185")))}function Jo(e,t,n,r,i){var o=No;No=1073741823;try{return e(t,n,r,i)}finally{No=o}}var ea=null,ta=null,na=0,ra=void 0,ia=!1,oa=null,aa=0,ua=0,la=!1,sa=null,ca=!1,fa=!1,da=!1,pa=null,ha=o.unstable_now(),ma=1073741822-(ha/10|0),va=ma,ya=50,ga=0,ba=null;function _a(){ma=1073741822-((o.unstable_now()-ha)/10|0)}function xa(e,t){if(0!==na){if(t<na)return;null!==ra&&o.unstable_cancelCallback(ra)}na=t,e=o.unstable_now()-ha,ra=o.unstable_scheduleCallback(Ca,{timeout:10*(1073741822-t)-e})}function wa(e,t,n,r,i){e.expirationTime=r,0!==i||Oa()?0<i&&(e.timeoutHandle=gr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,_a(),va=ma,Aa(e,n)}.bind(null,e,t,n),i)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Ea(){return ia?va:(Ta(),0!==aa&&1!==aa||(_a(),va=ma),va)}function Sa(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===ta?(ea=ta=e,e.nextScheduledRoot=e):(ta=ta.nextScheduledRoot=e).nextScheduledRoot=ea):t>e.expirationTime&&(e.expirationTime=t),ia||(ca?fa&&(oa=e,aa=1073741823,Na(e,1073741823,!1)):1073741823===t?Ma(1073741823,!1):xa(e,t))}function Ta(){var e=0,t=null;if(null!==ta)for(var n=ta,r=ea;null!==r;){var i=r.expirationTime;if(0===i){if((null===n||null===ta)&&a("244"),r===r.nextScheduledRoot){ea=ta=r.nextScheduledRoot=null;break}if(r===ea)ea=i=r.nextScheduledRoot,ta.nextScheduledRoot=i,r.nextScheduledRoot=null;else{if(r===ta){(ta=n).nextScheduledRoot=ea,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(i>e&&(e=i,t=r),r===ta)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}oa=t,aa=e}var ka=!1;function Oa(){return!!ka||!!o.unstable_shouldYield()&&(ka=!0)}function Ca(){try{if(!Oa()&&null!==ea){_a();var e=ea;do{var t=e.expirationTime;0!==t&&ma<=t&&(e.nextExpirationTimeToWorkOn=ma),e=e.nextScheduledRoot}while(e!==ea)}Ma(0,!0)}finally{ka=!1}}function Ma(e,t){if(Ta(),t)for(_a(),va=ma;null!==oa&&0!==aa&&e<=aa&&!(ka&&ma>aa);)Na(oa,aa,ma>aa),Ta(),_a(),va=ma;else for(;null!==oa&&0!==aa&&e<=aa;)Na(oa,aa,!1),Ta();if(t&&(na=0,ra=null),0!==aa&&xa(oa,aa),ga=0,ba=null,null!==pa)for(e=pa,pa=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){la||(la=!0,sa=e)}}if(la)throw e=sa,sa=null,la=!1,e}function Aa(e,t){ia&&a("253"),oa=e,aa=t,Na(e,t,!1),Ma(1073741823,!1)}function Na(e,t,n){if(ia&&a("245"),ia=!0,n){var r=e.finishedWork;null!==r?Pa(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),$o(e,n),null!==(r=e.finishedWork)&&(Oa()?e.finishedWork=r:Pa(e,r,t)))}else null!==(r=e.finishedWork)?Pa(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),$o(e,n),null!==(r=e.finishedWork)&&Pa(e,r,t));ia=!1}function Pa(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===pa?pa=[r]:pa.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ba?ga++:(ba=e,ga=0),zo=Po=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var i=t.childExpirationTime;if(r=i>r?i:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(0!==(i=e.latestPendingTime)&&(i>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(i=e.earliestSuspendedTime)?Xr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Xr(e,r)):r>i&&Xr(e,r)),Zr(0,e),Mo.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=Sn,Dn(i=jn())){if("selectionStart"in i)var o={start:i.selectionStart,end:i.selectionEnd};else e:{var u=(o=(o=i.ownerDocument)&&o.defaultView||window).getSelection&&o.getSelection();if(u&&0!==u.rangeCount){o=u.anchorNode;var l=u.anchorOffset,s=u.focusNode;u=u.focusOffset;try{o.nodeType,s.nodeType}catch(e){o=null;break e}var c=0,f=-1,d=-1,p=0,h=0,m=i,v=null;t:for(;;){for(var y;m!==o||0!==l&&3!==m.nodeType||(f=c+l),m!==s||0!==u&&3!==m.nodeType||(d=c+u),3===m.nodeType&&(c+=m.nodeValue.length),null!==(y=m.firstChild);)v=m,m=y;for(;;){if(m===i)break t;if(v===o&&++p===l&&(f=c),v===s&&++h===u&&(d=c),null!==(y=m.nextSibling))break;v=(m=v).parentNode}m=y}o=-1===f||-1===d?null:{start:f,end:d}}else o=null}o=o||{start:0,end:0}}else o=null;for(mr={focusedElem:i,selectionRange:o},Sn=!1,Uo=r;null!==Uo;){i=!1,o=void 0;try{for(;null!==Uo;){if(256&Uo.effectTag)e:{var g=Uo.alternate;switch((l=Uo).tag){case 0:case 11:case 15:break e;case 1:if(256&l.effectTag&&null!==g){var b=g.memoizedProps,_=g.memoizedState,x=l.stateNode,w=x.getSnapshotBeforeUpdate(l.elementType===l.type?b:Mi(l.type,b),_);x.__reactInternalSnapshotBeforeUpdate=w}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Uo=Uo.nextEffect}}catch(e){i=!0,o=e}i&&(null===Uo&&a("178"),Ko(Uo,o),null!==Uo&&(Uo=Uo.nextEffect))}for(Uo=r;null!==Uo;){g=!1,b=void 0;try{for(;null!==Uo;){var E=Uo.effectTag;if(16&E&&ir(Uo.stateNode,""),128&E){var S=Uo.alternate;if(null!==S){var T=S.ref;null!==T&&("function"==typeof T?T(null):T.current=null)}}switch(14&E){case 2:wo(Uo),Uo.effectTag&=-3;break;case 6:wo(Uo),Uo.effectTag&=-3,So(Uo.alternate,Uo);break;case 4:So(Uo.alternate,Uo);break;case 8:Eo(_=Uo),_.return=null,_.child=null,_.alternate&&(_.alternate.child=null,_.alternate.return=null)}Uo=Uo.nextEffect}}catch(e){g=!0,b=e}g&&(null===Uo&&a("178"),Ko(Uo,b),null!==Uo&&(Uo=Uo.nextEffect))}if(T=mr,S=jn(),E=T.focusedElem,b=T.selectionRange,S!==E&&E&&E.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(E.ownerDocument.documentElement,E)){null!==b&&Dn(E)&&(S=b.start,void 0===(T=b.end)&&(T=S),"selectionStart"in E?(E.selectionStart=S,E.selectionEnd=Math.min(T,E.value.length)):(T=(S=E.ownerDocument||document)&&S.defaultView||window).getSelection&&(T=T.getSelection(),_=E.textContent.length,g=Math.min(b.start,_),b=void 0===b.end?g:Math.min(b.end,_),!T.extend&&g>b&&(_=b,b=g,g=_),_=Fn(E,g),x=Fn(E,b),_&&x&&(1!==T.rangeCount||T.anchorNode!==_.node||T.anchorOffset!==_.offset||T.focusNode!==x.node||T.focusOffset!==x.offset)&&((S=S.createRange()).setStart(_.node,_.offset),T.removeAllRanges(),g>b?(T.addRange(S),T.extend(x.node,x.offset)):(S.setEnd(x.node,x.offset),T.addRange(S))))),S=[];for(T=E;T=T.parentNode;)1===T.nodeType&&S.push({element:T,left:T.scrollLeft,top:T.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<S.length;E++)(T=S[E]).element.scrollLeft=T.left,T.element.scrollTop=T.top}for(mr=null,Sn=!!hr,hr=null,e.current=t,Uo=r;null!==Uo;){r=!1,E=void 0;try{for(S=n;null!==Uo;){var k=Uo.effectTag;if(36&k){var O=Uo.alternate;switch(g=S,(T=Uo).tag){case 0:case 11:case 15:break;case 1:var C=T.stateNode;if(4&T.effectTag)if(null===O)C.componentDidMount();else{var M=T.elementType===T.type?O.memoizedProps:Mi(T.type,O.memoizedProps);C.componentDidUpdate(M,O.memoizedState,C.__reactInternalSnapshotBeforeUpdate)}var A=T.updateQueue;null!==A&&si(0,A,C);break;case 3:var N=T.updateQueue;if(null!==N){if(b=null,null!==T.child)switch(T.child.tag){case 5:b=T.child.stateNode;break;case 1:b=T.child.stateNode}si(0,N,b)}break;case 5:var P=T.stateNode;null===O&&4&T.effectTag&&vr(T.type,T.memoizedProps)&&P.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&k){var R=Uo.ref;if(null!==R){var I=Uo.stateNode;switch(Uo.tag){case 5:var F=I;break;default:F=I}"function"==typeof R?R(F):R.current=F}}Uo=Uo.nextEffect}}catch(e){r=!0,E=e}r&&(null===Uo&&a("178"),Ko(Uo,E),null!==Uo&&(Uo=Uo.nextEffect))}Po=zo=!1,"function"==typeof Ur&&Ur(t.stateNode),k=t.expirationTime,0===(t=(t=t.childExpirationTime)>k?t:k)&&(qo=null),e.expirationTime=t,e.finishedWork=null}function Ra(e){null===oa&&a("246"),oa.expirationTime=0,la||(la=!0,sa=e)}function Ia(e,t){var n=ca;ca=!0;try{return e(t)}finally{(ca=n)||ia||Ma(1073741823,!1)}}function Fa(e,t){if(ca&&!fa){fa=!0;try{return e(t)}finally{fa=!1}}return e(t)}function ja(e,t,n){if(da)return e(t,n);ca||ia||0===ua||(Ma(ua,!1),ua=0);var r=da,i=ca;ca=da=!0;try{return e(t,n)}finally{da=r,(ca=i)||ia||Ma(1073741823,!1)}}function Da(e,t,n,r,i){var o=t.current;e:if(n){n=n._reactInternalFiber;t:{2===tn(n)&&1===n.tag||a("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Nr(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);a("171"),u=void 0}if(1===n.tag){var l=n.type;if(Nr(l)){n=Fr(n,l,u);break e}}n=u}else n=kr;return null===t.context?t.context=n:t.pendingContext=n,t=i,(i=ni(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),Wo(),ii(o,i),Zo(o,r),r}function Ua(e,t,n,r){var i=t.current;return Da(e,t,n,i=Xo(Ea(),i),r)}function za(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function La(e){var t=1073741822-25*(1+((1073741822-Ea()+500)/25|0));t>=Ao&&(t=Ao-1),this._expirationTime=Ao=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Va(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function qa(e,t,n){e={current:t=Vr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ba(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Wa(e,t,n,r,i){Ba(n)||a("200");var o=n._reactRootContainer;if(o){if("function"==typeof i){var u=i;i=function(){var e=za(o._internalRoot);u.call(e)}}null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new qa(e,!1,t)}(n,r),"function"==typeof i){var l=i;i=function(){var e=za(o._internalRoot);l.call(e)}}Fa(function(){null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)})}return za(o._internalRoot)}function Ya(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ba(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}ke=function(e,t,n){switch(t){case"input":if(wt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=U(r);i||a("90"),Be(r),wt(r,i)}}}break;case"textarea":Gn(e,n);break;case"select":null!=(t=n.value)&&$n(e,!!n.multiple,t,!1)}},La.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Va;return Da(e,t,null,n,r._onCommit),r},La.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},La.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;null===r&&a("251"),r._next=i._next,this._next=t,e.firstBatch=this}this._defer=!1,Aa(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},La.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Va.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Va.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},qa.prototype.render=function(e,t){var n=this._internalRoot,r=new Va;return null!==(t=void 0===t?null:t)&&r.then(t),Ua(e,n,null,r._onCommit),r},qa.prototype.unmount=function(e){var t=this._internalRoot,n=new Va;return null!==(e=void 0===e?null:e)&&n.then(e),Ua(null,t,null,n._onCommit),n},qa.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,i=new Va;return null!==(n=void 0===n?null:n)&&i.then(n),Ua(t,r,e,i._onCommit),i},qa.prototype.createBatch=function(){var e=new La(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Pe=Ia,Re=ja,Ie=function(){ia||0===ua||(Ma(ua,!1),ua=0)};var Ha={createPortal:Ya,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Wa(null,e,t,!0,n)},render:function(e,t,n){return Wa(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&a("38"),Wa(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ba(e)||a("40"),!!e._reactRootContainer&&(Fa(function(){Wa(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ya.apply(void 0,arguments)},unstable_batchedUpdates:Ia,unstable_interactiveUpdates:ja,flushSync:function(e,t){ia&&a("187");var n=ca;ca=!0;try{return Jo(e,t)}finally{ca=n,Ma(1073741823,!1)}},unstable_flushControlled:function(e){var t=ca;ca=!0;try{Jo(e)}finally{(ca=t)||ia||Ma(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[j,D,U,M.injectEventPluginsByName,g,W,function(e){k(e,B)},Ae,Ne,Cn,N]},unstable_createRoot:function(e,t){return Ba(e)||a("299","unstable_createRoot"),new qa(e,!0,null!=t&&!0===t.hydrate)}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ur=Lr(function(e){return t.onCommitFiberRoot(n,e)}),zr=Lr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(i({},e,{findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:F,bundleType:0,version:"16.6.3",rendererPackageName:"react-dom"});var $a={default:Ha},Ka=$a&&Ha||$a;e.exports=Ka.default||Ka},function(e,t,n){"use strict";var r=n(90),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,s=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.concurrent_mode"):60111,p=i?Symbol.for("react.forward_ref"):60112,h=i?Symbol.for("react.suspense"):60113,m=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,i,o,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,i,o,a,u],s=0;(e=Error(t.replace(/%s/g,function(){return l[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function x(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var S=E.prototype=new w;S.constructor=E,r(S,x.prototype),S.isPureReactComponent=!0;var T={current:null,currentDispatcher:null},k=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r=void 0,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!O.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:T.current}}function M(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var A=/\/+/g,N=[];function P(e,t,n,r){if(N.length){var i=N.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+F(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+F(u=t[s],s);l+=e(u,c,r,i)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=y&&t[y]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(u=t.next()).done;)l+=e(u=u.value,c=n+F(u,s++),r,i);else"object"===u&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,function(e){return e}):null!=e&&(M(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(A,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(A,"$&/")+"/"),I(e,D,t=P(t,o,r,i)),R(t)}var z={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,j,t=P(null,null,t,n)),R(t)},count:function(e){return I(e,function(){return null},null)},toArray:function(e){var t=[];return U(e,t,null,function(e){return e}),t},only:function(e){return M(e)||g("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},Fragment:u,StrictMode:l,Suspense:h,createElement:C,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var i=void 0,a=r({},e.props),u=e.key,l=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,s=T.current),void 0!==t.key&&(u=""+t.key);var c=void 0;for(i in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,i)&&!O.hasOwnProperty(i)&&(a[i]=void 0===t[i]&&void 0!==c?c[i]:t[i])}if(1===(i=arguments.length-2))a.children=n;else if(1<i){c=Array(i);for(var f=0;f<i;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:u,ref:l,props:a,_owner:s}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:M,version:"16.6.3",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:T,assign:r}};z.unstable_ConcurrentMode=d,z.unstable_Profiler=s;var L={default:z},V=L&&z||L;e.exports=V.default||V}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,