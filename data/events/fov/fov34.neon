events:
    fov34:
        event_type_id: [15]
        #eventYears: [34] # specify for which years this machine is valid, by default all years
        formLayout: fov.form
        paramScheme:
            notifyBcc:
                default: soustredeni@fykos.cz
            notifyFrom:
                default: soustredeni@fykos.cz
            deadline1:
                default: 1970-01-01 00:00:00
            deadline2:
                default: 1970-01-01 00:00:00
            deadline3:
                default: 1970-01-01 00:00:00
            deadline4:
                default: 1970-01-01 00:00:00
            letterWhere:
                default: nikde
            letterSignature:
                default: Student Pilný
            letterResolutionTime:
                default: až naprší a uschne


        baseMachines:
            PARTICIPANT:
                service: @orm.event_participant.service

                states: %events.fov.states%

                transitions:
                    __init->invited:
                        condition: role('admin')
                        label: _('Invite participant')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34, .self)
                    auto.invited->invited: # this must be duplicate of __init->invited
                        condition: role('admin')
                        label: _('Invite participant')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34, .self)
                    __init->spare:
                        condition: role('admin')
                        label: _('Invite Spare')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34, .self)
                    auto.spare->spare: # this must be duplicate of __init->spare
                        condition: role('admin')
                        label: _('Invite Spare')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34, .self)
                    invited|invited1|invited2|invited3->applied:
                        condition: or(before(param('deadline1')),role('admin'))
                        label: _('Confirm participation')
                    spare|spare1|spare2|spare3->interested:
                        condition: before(param('deadline1'))
                        label: _('I want to go')
                    invited|invited1|invited2|invited3->rejected:
                        condition: or(before(param('deadline1')),role('admin'))
                        label: _('Decline participation')
                        behaviorType: warning

                    spare->spare1:
                        condition: and(after(param('deadline2')),role('admin'))
                        label: _('Send first call')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34.call, self)
                    invited->invited1:
                        condition: and(after(param('deadline2')),role('admin'))
                        label: _('Send first call')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34.call, self)
                    spare1->spare2:
                        condition: and(after(param('deadline3')),role('admin'))
                        label: _('Send second call')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34.call, self)
                    invited1->invited2:
                        condition: and(after(param('deadline3')),role('admin'))
                        label: _('Send second call')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34.call, self)
                    spare2->spare3:
                        condition: and(after(param('deadline4')),role('admin'))
                        label: _('Send last call')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34.call, self)
                    invited2->invited3:
                        condition: and(after(param('deadline4')),role('admin'))
                        label: _('Send last call')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/34.call, self)
                    spare|spare1|spare2|spare3->rejected:
                        condition: or(before(param('deadline1')),role('admin'))
                        label: _('Decline participation')
                        behaviorType: danger
                    interested->applied:
                        condition: role('admin')
                        label: _('Confirm participation')
                    spare->invited:
                        condition: role('admin')
                        label: _('Invite as a participant')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/spare-invited, self)
                    spare1->invited1:
                        condition: role('admin')
                        label: _('Invite as a participant')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/spare-invited, self)
                    spare2->invited2:
                        condition: role('admin')
                        label: _('Invite as a participant')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/spare-invited, self)
                    spare3->invited3:
                        condition: role('admin')
                        label: _('Invite as a participant')
                        onExecuted:
                            - FKSDB\Models\Events\Transitions\MailSender(fov/spare-invited, self)
                    applied->participated:
                        condition: and(role('admin'),eventWas())
                        label: _('Participated')
                    applied->missed:
                        condition: and(role('admin'),eventWas())
                        label: _('Missed')

                    invited|invited1|invited2|invited3|auto.invited|spare|spare1|spare2|spare3|auto.spare|applied|interested->cancelled:
                        condition: role('admin')
                        label: _('Cancel application')
                    invited|invited1|invited2|invited3|spare|spare1|spare2|spare3|applied|interested->out_of_db:
                        condition: role('admin')
                        label: _('Deal with outside FKSDB')
                    out_of_db->invited:
                        condition: role('admin')
                        label: _('Return to DB as Invited')
                    out_of_db->invited1:
                        condition: role('admin')
                        label: _('Return to DB as Invited, first call')
                    out_of_db->invited2:
                        condition: role('admin')
                        label: _('Return to DB as Invited, second call')
                    out_of_db->invited3:
                        condition: role('admin')
                        label: _('Return to DB as Invited, last call')
                    out_of_db->auto.invited:
                        condition: role('admin')
                        label: _('Return to DB as Invited (auto)')
                    out_of_db->spare:
                        condition: role('admin')
                        label: _('Return to DB as Spare')
                    out_of_db->spare1:
                        condition: role('admin')
                        label: _('Return to DB as Spare, first call')
                    out_of_db->spare2:
                        condition: role('admin')
                        label: _('Return to DB as Spare, second call')
                    out_of_db->spare3:
                        condition: role('admin')
                        label: _('Return to DB as Spare, last call')
                    out_of_db->auto.spare:
                        condition: role('admin')
                        label: _('Return to DB as Spare (auto)')
                    out_of_db->applied:
                        condition: role('admin')
                        label: _('Return to DB as Applied')
                    out_of_db->interested:
                        condition: role('admin')
                        label: _('Return to DB as Interested')
                    out_of_db->participated:
                        condition: role('admin')
                        label: _('Return to DB as Participated')
                    out_of_db->rejected:
                        condition: role('admin')
                        label: _('Return to DB as Rejected')
                    out_of_db->missed:
                        condition: role('admin')
                        label: _('Return to DB as missed')
                    out_of_db->cancelled:
                        condition: role('admin')
                        label: _('Return to DB as cancelled')

                    cancelled->__terminated:
                        condition: role('admin')
                        label: _('Delete application')

                fields:
                    person_id:
                        label: _('Person')
                        required: true
                        modifiable: %events.fov.appCond%
                        default: null
                        factory: RefPerson(%events.fov.person%, email, role('admin'), role('admin'), false)


        #
        #   MACHINE
        #   explanation: machine consists of several instances of base machines
        #
        machine:
            baseMachines:
                participant:
                    bmName: PARTICIPANT
                    label: _('Participant')
                    required: true # default false, it's conjuction with fields requirement
                    primary: true # base machine states are propagated to the machine
                    modifiable: or(neg(or(state('participated'),state('missed'),state('rejected'))),role('admin'))
            formAdjustments:
                - FKSDB\Models\Events\FormAdjustments\UniqueCheck('participant.person_id', "The person selected is already applied.")
                - @events.privacyPolicy

            processings:
                - @events.privacyPolicy
