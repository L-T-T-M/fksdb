<script type="text/javascript">
function initRenderer(r, node) {
  var ellipse = r.ellipse(0, 0, 8, 8).attr({
    fill: '#000',
    stroke: '#000',
    "stroke-width": 0
  });
  /* set DOM node ID */
  ellipse.node.id = node.label || node.id;
  shape = r.set().push(ellipse);
  return shape;
}

function terminatedRenderer(r, node) {
  /* the default node drawing */
  var color = Raphael.getColor();
  var inner = r.ellipse(0, 0, 5, 5).attr({
    fill: '#000',
    stroke: '#000',
    "stroke-width": 0
  });
  
  var outer = r.ellipse(0, 0, 10, 10).attr({
    fill: null,
    stroke: '#000',
    "stroke-width": 2
  });
  /* set DOM node ID */
  inner.node.id = node.label || node.id;
  shape = r.set().push(inner).push(outer);
  return shape;
}

$(function(){
    
  var canvas = $('#' + {$id});
  var width = canvas.width();
  var height = 600;
  var redraw;

  var g = new Graph();
  
  /* add a simple node */
  {foreach $states as $state}
    {if $state ==  Events\Machine\BaseMachine::STATE_INIT}
        var renderer = initRenderer;
    {elseif $state ==  Events\Machine\BaseMachine::STATE_TERMINATED}
        var renderer = terminatedRenderer;
    {else}
        var renderer = null;
    {/if}
    
    g.addNode({$state}, { label: {$machine->getStateName($state)}, render: renderer});
  {/foreach}

  {var conditions = array()}  
  {foreach $machine->getTransitions() as $transition}
      {foreach $states as $state}
          {if $transition->matches($state)}
              {var condition = $printer->printExpression($transition->getCondition())}
                  {if $condition == 1}
                      var style = {};
                      var label = {$transition->getLabel()};
                   {else}
                       var style = { title: {$condition} };
                       var label = {$transition->getLabel()} + '*';
                   {/if}
              
              g.addEdge({$state}, {$transition->getTarget()}, { directed: true, label: label, "label-style": style});
          {/if}
      {/foreach}
  {/foreach}
 
  var layouter = new Graph.Layout.Spring(g);
  layouter.maxRepulsiveForceDistance = 10;
  layouter.layout();
  
  /* draw the graph using the RaphaelJS draw implementation */
  var renderer = new Graph.Renderer.Raphael({$id}, g, width, height);
  renderer.draw();
  
  //TODO redraw doesn't work properly...
//  redraw = function() {
//    layouter.layout();
//    renderer.draw();
//  };
  
  //$('#' + {$id} + '-redraw').click(redraw);

});
</script>